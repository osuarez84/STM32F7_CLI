
command_console_train.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002ec8  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001b0  08003098  08003098  00013098  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08003248  08003248  00013248  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08003250  08003250  00013250  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08003254  08003254  00013254  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000070  20000000  08003258  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000000ac  20000070  080032c8  00020070  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  2000011c  080032c8  0002011c  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 10 .debug_info   00010aca  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 000026af  00000000  00000000  00030b6a  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00003185  00000000  00000000  00033219  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_aranges 00000648  00000000  00000000  000363a0  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 000007d8  00000000  00000000  000369e8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   00004134  00000000  00000000  000371c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    00002d17  00000000  00000000  0003b2f4  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .comment      0000007c  00000000  00000000  0003e00b  2**0
                  CONTENTS, READONLY
 18 .debug_frame  000016b0  00000000  00000000  0003e088  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000070 	.word	0x20000070
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08003080 	.word	0x08003080

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000074 	.word	0x20000074
 800020c:	08003080 	.word	0x08003080

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295
 80002c4:	f000 b97a 	b.w	80005bc <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	468c      	mov	ip, r1
 80002e6:	460d      	mov	r5, r1
 80002e8:	4604      	mov	r4, r0
 80002ea:	9e08      	ldr	r6, [sp, #32]
 80002ec:	2b00      	cmp	r3, #0
 80002ee:	d151      	bne.n	8000394 <__udivmoddi4+0xb4>
 80002f0:	428a      	cmp	r2, r1
 80002f2:	4617      	mov	r7, r2
 80002f4:	d96d      	bls.n	80003d2 <__udivmoddi4+0xf2>
 80002f6:	fab2 fe82 	clz	lr, r2
 80002fa:	f1be 0f00 	cmp.w	lr, #0
 80002fe:	d00b      	beq.n	8000318 <__udivmoddi4+0x38>
 8000300:	f1ce 0c20 	rsb	ip, lr, #32
 8000304:	fa01 f50e 	lsl.w	r5, r1, lr
 8000308:	fa20 fc0c 	lsr.w	ip, r0, ip
 800030c:	fa02 f70e 	lsl.w	r7, r2, lr
 8000310:	ea4c 0c05 	orr.w	ip, ip, r5
 8000314:	fa00 f40e 	lsl.w	r4, r0, lr
 8000318:	ea4f 4a17 	mov.w	sl, r7, lsr #16
 800031c:	0c25      	lsrs	r5, r4, #16
 800031e:	fbbc f8fa 	udiv	r8, ip, sl
 8000322:	fa1f f987 	uxth.w	r9, r7
 8000326:	fb0a cc18 	mls	ip, sl, r8, ip
 800032a:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 800032e:	fb08 f309 	mul.w	r3, r8, r9
 8000332:	42ab      	cmp	r3, r5
 8000334:	d90a      	bls.n	800034c <__udivmoddi4+0x6c>
 8000336:	19ed      	adds	r5, r5, r7
 8000338:	f108 32ff 	add.w	r2, r8, #4294967295
 800033c:	f080 8123 	bcs.w	8000586 <__udivmoddi4+0x2a6>
 8000340:	42ab      	cmp	r3, r5
 8000342:	f240 8120 	bls.w	8000586 <__udivmoddi4+0x2a6>
 8000346:	f1a8 0802 	sub.w	r8, r8, #2
 800034a:	443d      	add	r5, r7
 800034c:	1aed      	subs	r5, r5, r3
 800034e:	b2a4      	uxth	r4, r4
 8000350:	fbb5 f0fa 	udiv	r0, r5, sl
 8000354:	fb0a 5510 	mls	r5, sl, r0, r5
 8000358:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 800035c:	fb00 f909 	mul.w	r9, r0, r9
 8000360:	45a1      	cmp	r9, r4
 8000362:	d909      	bls.n	8000378 <__udivmoddi4+0x98>
 8000364:	19e4      	adds	r4, r4, r7
 8000366:	f100 33ff 	add.w	r3, r0, #4294967295
 800036a:	f080 810a 	bcs.w	8000582 <__udivmoddi4+0x2a2>
 800036e:	45a1      	cmp	r9, r4
 8000370:	f240 8107 	bls.w	8000582 <__udivmoddi4+0x2a2>
 8000374:	3802      	subs	r0, #2
 8000376:	443c      	add	r4, r7
 8000378:	eba4 0409 	sub.w	r4, r4, r9
 800037c:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000380:	2100      	movs	r1, #0
 8000382:	2e00      	cmp	r6, #0
 8000384:	d061      	beq.n	800044a <__udivmoddi4+0x16a>
 8000386:	fa24 f40e 	lsr.w	r4, r4, lr
 800038a:	2300      	movs	r3, #0
 800038c:	6034      	str	r4, [r6, #0]
 800038e:	6073      	str	r3, [r6, #4]
 8000390:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000394:	428b      	cmp	r3, r1
 8000396:	d907      	bls.n	80003a8 <__udivmoddi4+0xc8>
 8000398:	2e00      	cmp	r6, #0
 800039a:	d054      	beq.n	8000446 <__udivmoddi4+0x166>
 800039c:	2100      	movs	r1, #0
 800039e:	e886 0021 	stmia.w	r6, {r0, r5}
 80003a2:	4608      	mov	r0, r1
 80003a4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003a8:	fab3 f183 	clz	r1, r3
 80003ac:	2900      	cmp	r1, #0
 80003ae:	f040 808e 	bne.w	80004ce <__udivmoddi4+0x1ee>
 80003b2:	42ab      	cmp	r3, r5
 80003b4:	d302      	bcc.n	80003bc <__udivmoddi4+0xdc>
 80003b6:	4282      	cmp	r2, r0
 80003b8:	f200 80fa 	bhi.w	80005b0 <__udivmoddi4+0x2d0>
 80003bc:	1a84      	subs	r4, r0, r2
 80003be:	eb65 0503 	sbc.w	r5, r5, r3
 80003c2:	2001      	movs	r0, #1
 80003c4:	46ac      	mov	ip, r5
 80003c6:	2e00      	cmp	r6, #0
 80003c8:	d03f      	beq.n	800044a <__udivmoddi4+0x16a>
 80003ca:	e886 1010 	stmia.w	r6, {r4, ip}
 80003ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003d2:	b912      	cbnz	r2, 80003da <__udivmoddi4+0xfa>
 80003d4:	2701      	movs	r7, #1
 80003d6:	fbb7 f7f2 	udiv	r7, r7, r2
 80003da:	fab7 fe87 	clz	lr, r7
 80003de:	f1be 0f00 	cmp.w	lr, #0
 80003e2:	d134      	bne.n	800044e <__udivmoddi4+0x16e>
 80003e4:	1beb      	subs	r3, r5, r7
 80003e6:	0c3a      	lsrs	r2, r7, #16
 80003e8:	fa1f fc87 	uxth.w	ip, r7
 80003ec:	2101      	movs	r1, #1
 80003ee:	fbb3 f8f2 	udiv	r8, r3, r2
 80003f2:	0c25      	lsrs	r5, r4, #16
 80003f4:	fb02 3318 	mls	r3, r2, r8, r3
 80003f8:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 80003fc:	fb0c f308 	mul.w	r3, ip, r8
 8000400:	42ab      	cmp	r3, r5
 8000402:	d907      	bls.n	8000414 <__udivmoddi4+0x134>
 8000404:	19ed      	adds	r5, r5, r7
 8000406:	f108 30ff 	add.w	r0, r8, #4294967295
 800040a:	d202      	bcs.n	8000412 <__udivmoddi4+0x132>
 800040c:	42ab      	cmp	r3, r5
 800040e:	f200 80d1 	bhi.w	80005b4 <__udivmoddi4+0x2d4>
 8000412:	4680      	mov	r8, r0
 8000414:	1aed      	subs	r5, r5, r3
 8000416:	b2a3      	uxth	r3, r4
 8000418:	fbb5 f0f2 	udiv	r0, r5, r2
 800041c:	fb02 5510 	mls	r5, r2, r0, r5
 8000420:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
 8000424:	fb0c fc00 	mul.w	ip, ip, r0
 8000428:	45a4      	cmp	ip, r4
 800042a:	d907      	bls.n	800043c <__udivmoddi4+0x15c>
 800042c:	19e4      	adds	r4, r4, r7
 800042e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000432:	d202      	bcs.n	800043a <__udivmoddi4+0x15a>
 8000434:	45a4      	cmp	ip, r4
 8000436:	f200 80b8 	bhi.w	80005aa <__udivmoddi4+0x2ca>
 800043a:	4618      	mov	r0, r3
 800043c:	eba4 040c 	sub.w	r4, r4, ip
 8000440:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000444:	e79d      	b.n	8000382 <__udivmoddi4+0xa2>
 8000446:	4631      	mov	r1, r6
 8000448:	4630      	mov	r0, r6
 800044a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800044e:	f1ce 0420 	rsb	r4, lr, #32
 8000452:	fa05 f30e 	lsl.w	r3, r5, lr
 8000456:	fa07 f70e 	lsl.w	r7, r7, lr
 800045a:	fa20 f804 	lsr.w	r8, r0, r4
 800045e:	0c3a      	lsrs	r2, r7, #16
 8000460:	fa25 f404 	lsr.w	r4, r5, r4
 8000464:	ea48 0803 	orr.w	r8, r8, r3
 8000468:	fbb4 f1f2 	udiv	r1, r4, r2
 800046c:	ea4f 4518 	mov.w	r5, r8, lsr #16
 8000470:	fb02 4411 	mls	r4, r2, r1, r4
 8000474:	fa1f fc87 	uxth.w	ip, r7
 8000478:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
 800047c:	fb01 f30c 	mul.w	r3, r1, ip
 8000480:	42ab      	cmp	r3, r5
 8000482:	fa00 f40e 	lsl.w	r4, r0, lr
 8000486:	d909      	bls.n	800049c <__udivmoddi4+0x1bc>
 8000488:	19ed      	adds	r5, r5, r7
 800048a:	f101 30ff 	add.w	r0, r1, #4294967295
 800048e:	f080 808a 	bcs.w	80005a6 <__udivmoddi4+0x2c6>
 8000492:	42ab      	cmp	r3, r5
 8000494:	f240 8087 	bls.w	80005a6 <__udivmoddi4+0x2c6>
 8000498:	3902      	subs	r1, #2
 800049a:	443d      	add	r5, r7
 800049c:	1aeb      	subs	r3, r5, r3
 800049e:	fa1f f588 	uxth.w	r5, r8
 80004a2:	fbb3 f0f2 	udiv	r0, r3, r2
 80004a6:	fb02 3310 	mls	r3, r2, r0, r3
 80004aa:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 80004ae:	fb00 f30c 	mul.w	r3, r0, ip
 80004b2:	42ab      	cmp	r3, r5
 80004b4:	d907      	bls.n	80004c6 <__udivmoddi4+0x1e6>
 80004b6:	19ed      	adds	r5, r5, r7
 80004b8:	f100 38ff 	add.w	r8, r0, #4294967295
 80004bc:	d26f      	bcs.n	800059e <__udivmoddi4+0x2be>
 80004be:	42ab      	cmp	r3, r5
 80004c0:	d96d      	bls.n	800059e <__udivmoddi4+0x2be>
 80004c2:	3802      	subs	r0, #2
 80004c4:	443d      	add	r5, r7
 80004c6:	1aeb      	subs	r3, r5, r3
 80004c8:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004cc:	e78f      	b.n	80003ee <__udivmoddi4+0x10e>
 80004ce:	f1c1 0720 	rsb	r7, r1, #32
 80004d2:	fa22 f807 	lsr.w	r8, r2, r7
 80004d6:	408b      	lsls	r3, r1
 80004d8:	fa05 f401 	lsl.w	r4, r5, r1
 80004dc:	ea48 0303 	orr.w	r3, r8, r3
 80004e0:	fa20 fe07 	lsr.w	lr, r0, r7
 80004e4:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 80004e8:	40fd      	lsrs	r5, r7
 80004ea:	ea4e 0e04 	orr.w	lr, lr, r4
 80004ee:	fbb5 f9fc 	udiv	r9, r5, ip
 80004f2:	ea4f 441e 	mov.w	r4, lr, lsr #16
 80004f6:	fb0c 5519 	mls	r5, ip, r9, r5
 80004fa:	fa1f f883 	uxth.w	r8, r3
 80004fe:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 8000502:	fb09 f408 	mul.w	r4, r9, r8
 8000506:	42ac      	cmp	r4, r5
 8000508:	fa02 f201 	lsl.w	r2, r2, r1
 800050c:	fa00 fa01 	lsl.w	sl, r0, r1
 8000510:	d908      	bls.n	8000524 <__udivmoddi4+0x244>
 8000512:	18ed      	adds	r5, r5, r3
 8000514:	f109 30ff 	add.w	r0, r9, #4294967295
 8000518:	d243      	bcs.n	80005a2 <__udivmoddi4+0x2c2>
 800051a:	42ac      	cmp	r4, r5
 800051c:	d941      	bls.n	80005a2 <__udivmoddi4+0x2c2>
 800051e:	f1a9 0902 	sub.w	r9, r9, #2
 8000522:	441d      	add	r5, r3
 8000524:	1b2d      	subs	r5, r5, r4
 8000526:	fa1f fe8e 	uxth.w	lr, lr
 800052a:	fbb5 f0fc 	udiv	r0, r5, ip
 800052e:	fb0c 5510 	mls	r5, ip, r0, r5
 8000532:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
 8000536:	fb00 f808 	mul.w	r8, r0, r8
 800053a:	45a0      	cmp	r8, r4
 800053c:	d907      	bls.n	800054e <__udivmoddi4+0x26e>
 800053e:	18e4      	adds	r4, r4, r3
 8000540:	f100 35ff 	add.w	r5, r0, #4294967295
 8000544:	d229      	bcs.n	800059a <__udivmoddi4+0x2ba>
 8000546:	45a0      	cmp	r8, r4
 8000548:	d927      	bls.n	800059a <__udivmoddi4+0x2ba>
 800054a:	3802      	subs	r0, #2
 800054c:	441c      	add	r4, r3
 800054e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000552:	eba4 0408 	sub.w	r4, r4, r8
 8000556:	fba0 8902 	umull	r8, r9, r0, r2
 800055a:	454c      	cmp	r4, r9
 800055c:	46c6      	mov	lr, r8
 800055e:	464d      	mov	r5, r9
 8000560:	d315      	bcc.n	800058e <__udivmoddi4+0x2ae>
 8000562:	d012      	beq.n	800058a <__udivmoddi4+0x2aa>
 8000564:	b156      	cbz	r6, 800057c <__udivmoddi4+0x29c>
 8000566:	ebba 030e 	subs.w	r3, sl, lr
 800056a:	eb64 0405 	sbc.w	r4, r4, r5
 800056e:	fa04 f707 	lsl.w	r7, r4, r7
 8000572:	40cb      	lsrs	r3, r1
 8000574:	431f      	orrs	r7, r3
 8000576:	40cc      	lsrs	r4, r1
 8000578:	6037      	str	r7, [r6, #0]
 800057a:	6074      	str	r4, [r6, #4]
 800057c:	2100      	movs	r1, #0
 800057e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000582:	4618      	mov	r0, r3
 8000584:	e6f8      	b.n	8000378 <__udivmoddi4+0x98>
 8000586:	4690      	mov	r8, r2
 8000588:	e6e0      	b.n	800034c <__udivmoddi4+0x6c>
 800058a:	45c2      	cmp	sl, r8
 800058c:	d2ea      	bcs.n	8000564 <__udivmoddi4+0x284>
 800058e:	ebb8 0e02 	subs.w	lr, r8, r2
 8000592:	eb69 0503 	sbc.w	r5, r9, r3
 8000596:	3801      	subs	r0, #1
 8000598:	e7e4      	b.n	8000564 <__udivmoddi4+0x284>
 800059a:	4628      	mov	r0, r5
 800059c:	e7d7      	b.n	800054e <__udivmoddi4+0x26e>
 800059e:	4640      	mov	r0, r8
 80005a0:	e791      	b.n	80004c6 <__udivmoddi4+0x1e6>
 80005a2:	4681      	mov	r9, r0
 80005a4:	e7be      	b.n	8000524 <__udivmoddi4+0x244>
 80005a6:	4601      	mov	r1, r0
 80005a8:	e778      	b.n	800049c <__udivmoddi4+0x1bc>
 80005aa:	3802      	subs	r0, #2
 80005ac:	443c      	add	r4, r7
 80005ae:	e745      	b.n	800043c <__udivmoddi4+0x15c>
 80005b0:	4608      	mov	r0, r1
 80005b2:	e708      	b.n	80003c6 <__udivmoddi4+0xe6>
 80005b4:	f1a8 0802 	sub.w	r8, r8, #2
 80005b8:	443d      	add	r5, r7
 80005ba:	e72b      	b.n	8000414 <__udivmoddi4+0x134>

080005bc <__aeabi_idiv0>:
 80005bc:	4770      	bx	lr
 80005be:	bf00      	nop

080005c0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80005c0:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80005c2:	4b0e      	ldr	r3, [pc, #56]	; (80005fc <HAL_InitTick+0x3c>)
{
 80005c4:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80005c6:	4a0e      	ldr	r2, [pc, #56]	; (8000600 <HAL_InitTick+0x40>)
 80005c8:	7818      	ldrb	r0, [r3, #0]
 80005ca:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80005ce:	fbb3 f3f0 	udiv	r3, r3, r0
 80005d2:	6810      	ldr	r0, [r2, #0]
 80005d4:	fbb0 f0f3 	udiv	r0, r0, r3
 80005d8:	f000 f88a 	bl	80006f0 <HAL_SYSTICK_Config>
 80005dc:	4604      	mov	r4, r0
 80005de:	b958      	cbnz	r0, 80005f8 <HAL_InitTick+0x38>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80005e0:	2d0f      	cmp	r5, #15
 80005e2:	d809      	bhi.n	80005f8 <HAL_InitTick+0x38>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80005e4:	4602      	mov	r2, r0
 80005e6:	4629      	mov	r1, r5
 80005e8:	f04f 30ff 	mov.w	r0, #4294967295
 80005ec:	f000 f83c 	bl	8000668 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80005f0:	4b04      	ldr	r3, [pc, #16]	; (8000604 <HAL_InitTick+0x44>)
 80005f2:	4620      	mov	r0, r4
 80005f4:	601d      	str	r5, [r3, #0]
 80005f6:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 80005f8:	2001      	movs	r0, #1
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 80005fa:	bd38      	pop	{r3, r4, r5, pc}
 80005fc:	20000000 	.word	0x20000000
 8000600:	20000008 	.word	0x20000008
 8000604:	20000004 	.word	0x20000004

08000608 <HAL_Init>:
{
 8000608:	b508      	push	{r3, lr}
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800060a:	2003      	movs	r0, #3
 800060c:	f000 f81a 	bl	8000644 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8000610:	2000      	movs	r0, #0
 8000612:	f7ff ffd5 	bl	80005c0 <HAL_InitTick>
  HAL_MspInit();
 8000616:	f001 fca7 	bl	8001f68 <HAL_MspInit>
}
 800061a:	2000      	movs	r0, #0
 800061c:	bd08      	pop	{r3, pc}
	...

08000620 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8000620:	4a03      	ldr	r2, [pc, #12]	; (8000630 <HAL_IncTick+0x10>)
 8000622:	4b04      	ldr	r3, [pc, #16]	; (8000634 <HAL_IncTick+0x14>)
 8000624:	6811      	ldr	r1, [r2, #0]
 8000626:	781b      	ldrb	r3, [r3, #0]
 8000628:	440b      	add	r3, r1
 800062a:	6013      	str	r3, [r2, #0]
 800062c:	4770      	bx	lr
 800062e:	bf00      	nop
 8000630:	20000098 	.word	0x20000098
 8000634:	20000000 	.word	0x20000000

08000638 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8000638:	4b01      	ldr	r3, [pc, #4]	; (8000640 <HAL_GetTick+0x8>)
 800063a:	6818      	ldr	r0, [r3, #0]
}
 800063c:	4770      	bx	lr
 800063e:	bf00      	nop
 8000640:	20000098 	.word	0x20000098

08000644 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000644:	4a07      	ldr	r2, [pc, #28]	; (8000664 <HAL_NVIC_SetPriorityGrouping+0x20>)
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 8000646:	0200      	lsls	r0, r0, #8
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000648:	68d3      	ldr	r3, [r2, #12]
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 800064a:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800064e:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8000652:	041b      	lsls	r3, r3, #16
 8000654:	0c1b      	lsrs	r3, r3, #16
 8000656:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800065a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  reg_value  =  (reg_value                                   |
 800065e:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 8000660:	60d3      	str	r3, [r2, #12]
 8000662:	4770      	bx	lr
 8000664:	e000ed00 	.word	0xe000ed00

08000668 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000668:	4b19      	ldr	r3, [pc, #100]	; (80006d0 <HAL_NVIC_SetPriority+0x68>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800066a:	b530      	push	{r4, r5, lr}
 800066c:	68dc      	ldr	r4, [r3, #12]
 800066e:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000672:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000676:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000678:	2b04      	cmp	r3, #4
 800067a:	bf28      	it	cs
 800067c:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800067e:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000680:	f04f 0501 	mov.w	r5, #1
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000684:	bf8c      	ite	hi
 8000686:	3c03      	subhi	r4, #3
 8000688:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800068a:	fa05 f303 	lsl.w	r3, r5, r3
  if ((int32_t)(IRQn) < 0)
 800068e:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000690:	f103 33ff 	add.w	r3, r3, #4294967295
 8000694:	ea01 0103 	and.w	r1, r1, r3
 8000698:	fa01 f104 	lsl.w	r1, r1, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800069c:	fa05 f404 	lsl.w	r4, r5, r4
 80006a0:	f104 34ff 	add.w	r4, r4, #4294967295
 80006a4:	ea02 0204 	and.w	r2, r2, r4
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80006a8:	ea42 0201 	orr.w	r2, r2, r1
 80006ac:	ea4f 1202 	mov.w	r2, r2, lsl #4
  if ((int32_t)(IRQn) < 0)
 80006b0:	da05      	bge.n	80006be <HAL_NVIC_SetPriority+0x56>
    SCB->SHPR[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006b2:	f000 000f 	and.w	r0, r0, #15
 80006b6:	b2d2      	uxtb	r2, r2
 80006b8:	4b06      	ldr	r3, [pc, #24]	; (80006d4 <HAL_NVIC_SetPriority+0x6c>)
 80006ba:	541a      	strb	r2, [r3, r0]
 80006bc:	bd30      	pop	{r4, r5, pc}
    NVIC->IP[((uint32_t)(int32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006be:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 80006c2:	b2d2      	uxtb	r2, r2
 80006c4:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 80006c8:	f880 2300 	strb.w	r2, [r0, #768]	; 0x300
 80006cc:	bd30      	pop	{r4, r5, pc}
 80006ce:	bf00      	nop
 80006d0:	e000ed00 	.word	0xe000ed00
 80006d4:	e000ed14 	.word	0xe000ed14

080006d8 <HAL_NVIC_EnableIRQ>:
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 80006d8:	0942      	lsrs	r2, r0, #5
 80006da:	2301      	movs	r3, #1
 80006dc:	f000 001f 	and.w	r0, r0, #31
 80006e0:	fa03 f000 	lsl.w	r0, r3, r0
 80006e4:	4b01      	ldr	r3, [pc, #4]	; (80006ec <HAL_NVIC_EnableIRQ+0x14>)
 80006e6:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 80006ea:	4770      	bx	lr
 80006ec:	e000e100 	.word	0xe000e100

080006f0 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80006f0:	3801      	subs	r0, #1
 80006f2:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80006f6:	d20a      	bcs.n	800070e <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80006f8:	4b06      	ldr	r3, [pc, #24]	; (8000714 <HAL_SYSTICK_Config+0x24>)
    SCB->SHPR[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006fa:	21f0      	movs	r1, #240	; 0xf0
 80006fc:	4a06      	ldr	r2, [pc, #24]	; (8000718 <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80006fe:	6058      	str	r0, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000700:	2000      	movs	r0, #0
    SCB->SHPR[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000702:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000706:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000708:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800070a:	601a      	str	r2, [r3, #0]
 800070c:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 800070e:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8000710:	4770      	bx	lr
 8000712:	bf00      	nop
 8000714:	e000e010 	.word	0xe000e010
 8000718:	e000ed00 	.word	0xe000ed00

0800071c <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 800071c:	4b04      	ldr	r3, [pc, #16]	; (8000730 <HAL_SYSTICK_CLKSourceConfig+0x14>)
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 800071e:	2804      	cmp	r0, #4
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 8000720:	681a      	ldr	r2, [r3, #0]
 8000722:	bf0c      	ite	eq
 8000724:	f042 0204 	orreq.w	r2, r2, #4
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 8000728:	f022 0204 	bicne.w	r2, r2, #4
 800072c:	601a      	str	r2, [r3, #0]
 800072e:	4770      	bx	lr
 8000730:	e000e010 	.word	0xe000e010

08000734 <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 8000734:	4770      	bx	lr

08000736 <HAL_SYSTICK_IRQHandler>:
{
 8000736:	b508      	push	{r3, lr}
  HAL_SYSTICK_Callback();
 8000738:	f7ff fffc 	bl	8000734 <HAL_SYSTICK_Callback>
 800073c:	bd08      	pop	{r3, pc}
	...

08000740 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000740:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  for(position = 0; position < GPIO_NUMBER; position++)
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000744:	680b      	ldr	r3, [r1, #0]
{
 8000746:	b085      	sub	sp, #20
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000748:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800090c <HAL_GPIO_Init+0x1cc>
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800074c:	9301      	str	r3, [sp, #4]
  for(position = 0; position < GPIO_NUMBER; position++)
 800074e:	2300      	movs	r3, #0
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
        SYSCFG->EXTICR[position >> 2] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000750:	4a6c      	ldr	r2, [pc, #432]	; (8000904 <HAL_GPIO_Init+0x1c4>)
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8000752:	f8df 91bc 	ldr.w	r9, [pc, #444]	; 8000910 <HAL_GPIO_Init+0x1d0>
    ioposition = ((uint32_t)0x01) << position;
 8000756:	f04f 0e01 	mov.w	lr, #1
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800075a:	9c01      	ldr	r4, [sp, #4]
    ioposition = ((uint32_t)0x01) << position;
 800075c:	fa0e fe03 	lsl.w	lr, lr, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000760:	ea0e 0604 	and.w	r6, lr, r4
    if(iocurrent == ioposition)
 8000764:	45b6      	cmp	lr, r6
 8000766:	f040 80b3 	bne.w	80008d0 <HAL_GPIO_Init+0x190>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800076a:	684c      	ldr	r4, [r1, #4]
 800076c:	f024 0710 	bic.w	r7, r4, #16
 8000770:	2f02      	cmp	r7, #2
 8000772:	d116      	bne.n	80007a2 <HAL_GPIO_Init+0x62>
        temp = GPIOx->AFR[position >> 3];
 8000774:	ea4f 0ad3 	mov.w	sl, r3, lsr #3
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8000778:	f003 0b07 	and.w	fp, r3, #7
 800077c:	f04f 0c0f 	mov.w	ip, #15
 8000780:	eb00 0a8a 	add.w	sl, r0, sl, lsl #2
 8000784:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
        temp = GPIOx->AFR[position >> 3];
 8000788:	f8da 5020 	ldr.w	r5, [sl, #32]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800078c:	fa0c fc0b 	lsl.w	ip, ip, fp
 8000790:	ea25 0c0c 	bic.w	ip, r5, ip
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8000794:	690d      	ldr	r5, [r1, #16]
 8000796:	fa05 f50b 	lsl.w	r5, r5, fp
 800079a:	ea45 050c 	orr.w	r5, r5, ip
        GPIOx->AFR[position >> 3] = temp;
 800079e:	f8ca 5020 	str.w	r5, [sl, #32]
 80007a2:	ea4f 0a43 	mov.w	sl, r3, lsl #1
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 80007a6:	2503      	movs	r5, #3
      temp = GPIOx->MODER;
 80007a8:	f8d0 b000 	ldr.w	fp, [r0]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80007ac:	f004 0c03 	and.w	ip, r4, #3
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 80007b0:	fa05 f50a 	lsl.w	r5, r5, sl
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80007b4:	3f01      	subs	r7, #1
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80007b6:	fa0c fc0a 	lsl.w	ip, ip, sl
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 80007ba:	43ed      	mvns	r5, r5
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80007bc:	2f01      	cmp	r7, #1
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 80007be:	ea0b 0b05 	and.w	fp, fp, r5
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80007c2:	ea4c 0c0b 	orr.w	ip, ip, fp
      GPIOx->MODER = temp;
 80007c6:	f8c0 c000 	str.w	ip, [r0]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80007ca:	d811      	bhi.n	80007f0 <HAL_GPIO_Init+0xb0>
        temp = GPIOx->OSPEEDR; 
 80007cc:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80007ce:	ea07 0b05 	and.w	fp, r7, r5
        temp |= (GPIO_Init->Speed << (position * 2));
 80007d2:	68cf      	ldr	r7, [r1, #12]
 80007d4:	fa07 fc0a 	lsl.w	ip, r7, sl
 80007d8:	ea4c 070b 	orr.w	r7, ip, fp
        GPIOx->OSPEEDR = temp;
 80007dc:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 80007de:	6847      	ldr	r7, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80007e0:	ea27 0e0e 	bic.w	lr, r7, lr
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 80007e4:	f3c4 1700 	ubfx	r7, r4, #4, #1
 80007e8:	409f      	lsls	r7, r3
 80007ea:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->OTYPER = temp;
 80007ee:	6047      	str	r7, [r0, #4]
      temp = GPIOx->PUPDR;
 80007f0:	68c7      	ldr	r7, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 80007f2:	403d      	ands	r5, r7
      temp |= ((GPIO_Init->Pull) << (position * 2));
 80007f4:	688f      	ldr	r7, [r1, #8]
 80007f6:	fa07 f70a 	lsl.w	r7, r7, sl
 80007fa:	433d      	orrs	r5, r7
      GPIOx->PUPDR = temp;
 80007fc:	60c5      	str	r5, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80007fe:	00e5      	lsls	r5, r4, #3
 8000800:	d566      	bpl.n	80008d0 <HAL_GPIO_Init+0x190>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000802:	f8d8 5044 	ldr.w	r5, [r8, #68]	; 0x44
 8000806:	f023 0703 	bic.w	r7, r3, #3
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 800080a:	f003 0e03 	and.w	lr, r3, #3
 800080e:	f04f 0c0f 	mov.w	ip, #15
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000812:	f445 4580 	orr.w	r5, r5, #16384	; 0x4000
 8000816:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 800081a:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800081e:	f8c8 5044 	str.w	r5, [r8, #68]	; 0x44
 8000822:	f507 379c 	add.w	r7, r7, #79872	; 0x13800
 8000826:	f8d8 5044 	ldr.w	r5, [r8, #68]	; 0x44
 800082a:	f405 4580 	and.w	r5, r5, #16384	; 0x4000
 800082e:	9503      	str	r5, [sp, #12]
 8000830:	9d03      	ldr	r5, [sp, #12]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8000832:	fa0c f50e 	lsl.w	r5, ip, lr
        temp = SYSCFG->EXTICR[position >> 2];
 8000836:	f8d7 a008 	ldr.w	sl, [r7, #8]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 800083a:	ea2a 0c05 	bic.w	ip, sl, r5
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800083e:	4d32      	ldr	r5, [pc, #200]	; (8000908 <HAL_GPIO_Init+0x1c8>)
 8000840:	42a8      	cmp	r0, r5
 8000842:	d04c      	beq.n	80008de <HAL_GPIO_Init+0x19e>
 8000844:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000848:	42a8      	cmp	r0, r5
 800084a:	d04a      	beq.n	80008e2 <HAL_GPIO_Init+0x1a2>
 800084c:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000850:	42a8      	cmp	r0, r5
 8000852:	d048      	beq.n	80008e6 <HAL_GPIO_Init+0x1a6>
 8000854:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000858:	42a8      	cmp	r0, r5
 800085a:	d046      	beq.n	80008ea <HAL_GPIO_Init+0x1aa>
 800085c:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000860:	42a8      	cmp	r0, r5
 8000862:	d044      	beq.n	80008ee <HAL_GPIO_Init+0x1ae>
 8000864:	4548      	cmp	r0, r9
 8000866:	d044      	beq.n	80008f2 <HAL_GPIO_Init+0x1b2>
 8000868:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 800086c:	42a8      	cmp	r0, r5
 800086e:	d042      	beq.n	80008f6 <HAL_GPIO_Init+0x1b6>
 8000870:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000874:	42a8      	cmp	r0, r5
 8000876:	d040      	beq.n	80008fa <HAL_GPIO_Init+0x1ba>
 8000878:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800087c:	42a8      	cmp	r0, r5
 800087e:	d03e      	beq.n	80008fe <HAL_GPIO_Init+0x1be>
 8000880:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000884:	42a8      	cmp	r0, r5
 8000886:	bf14      	ite	ne
 8000888:	250a      	movne	r5, #10
 800088a:	2509      	moveq	r5, #9
 800088c:	fa05 f50e 	lsl.w	r5, r5, lr
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000890:	f414 3f80 	tst.w	r4, #65536	; 0x10000
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8000894:	ea45 050c 	orr.w	r5, r5, ip
        SYSCFG->EXTICR[position >> 2] = temp;
 8000898:	60bd      	str	r5, [r7, #8]
        temp &= ~((uint32_t)iocurrent);
 800089a:	ea6f 0706 	mvn.w	r7, r6
        temp = EXTI->IMR;
 800089e:	6815      	ldr	r5, [r2, #0]
        temp &= ~((uint32_t)iocurrent);
 80008a0:	bf0c      	ite	eq
 80008a2:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 80008a4:	4335      	orrne	r5, r6
        }
        EXTI->IMR = temp;

        temp = EXTI->EMR;
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80008a6:	f414 3f00 	tst.w	r4, #131072	; 0x20000
        EXTI->IMR = temp;
 80008aa:	6015      	str	r5, [r2, #0]
        temp = EXTI->EMR;
 80008ac:	6855      	ldr	r5, [r2, #4]
        temp &= ~((uint32_t)iocurrent);
 80008ae:	bf0c      	ite	eq
 80008b0:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 80008b2:	4335      	orrne	r5, r6
        EXTI->EMR = temp;

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80008b4:	f414 1f80 	tst.w	r4, #1048576	; 0x100000
        EXTI->EMR = temp;
 80008b8:	6055      	str	r5, [r2, #4]
        temp = EXTI->RTSR;
 80008ba:	6895      	ldr	r5, [r2, #8]
        temp &= ~((uint32_t)iocurrent);
 80008bc:	bf0c      	ite	eq
 80008be:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 80008c0:	4335      	orrne	r5, r6
        }
        EXTI->RTSR = temp;

        temp = EXTI->FTSR;
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80008c2:	02a4      	lsls	r4, r4, #10
        EXTI->RTSR = temp;
 80008c4:	6095      	str	r5, [r2, #8]
        temp = EXTI->FTSR;
 80008c6:	68d5      	ldr	r5, [r2, #12]
        temp &= ~((uint32_t)iocurrent);
 80008c8:	bf54      	ite	pl
 80008ca:	403d      	andpl	r5, r7
        {
          temp |= iocurrent;
 80008cc:	4335      	orrmi	r5, r6
        }
        EXTI->FTSR = temp;
 80008ce:	60d5      	str	r5, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 80008d0:	3301      	adds	r3, #1
 80008d2:	2b10      	cmp	r3, #16
 80008d4:	f47f af3f 	bne.w	8000756 <HAL_GPIO_Init+0x16>
      }
    }
  }
}
 80008d8:	b005      	add	sp, #20
 80008da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80008de:	2500      	movs	r5, #0
 80008e0:	e7d4      	b.n	800088c <HAL_GPIO_Init+0x14c>
 80008e2:	2501      	movs	r5, #1
 80008e4:	e7d2      	b.n	800088c <HAL_GPIO_Init+0x14c>
 80008e6:	2502      	movs	r5, #2
 80008e8:	e7d0      	b.n	800088c <HAL_GPIO_Init+0x14c>
 80008ea:	2503      	movs	r5, #3
 80008ec:	e7ce      	b.n	800088c <HAL_GPIO_Init+0x14c>
 80008ee:	2504      	movs	r5, #4
 80008f0:	e7cc      	b.n	800088c <HAL_GPIO_Init+0x14c>
 80008f2:	2505      	movs	r5, #5
 80008f4:	e7ca      	b.n	800088c <HAL_GPIO_Init+0x14c>
 80008f6:	2506      	movs	r5, #6
 80008f8:	e7c8      	b.n	800088c <HAL_GPIO_Init+0x14c>
 80008fa:	2507      	movs	r5, #7
 80008fc:	e7c6      	b.n	800088c <HAL_GPIO_Init+0x14c>
 80008fe:	2508      	movs	r5, #8
 8000900:	e7c4      	b.n	800088c <HAL_GPIO_Init+0x14c>
 8000902:	bf00      	nop
 8000904:	40013c00 	.word	0x40013c00
 8000908:	40020000 	.word	0x40020000
 800090c:	40023800 	.word	0x40023800
 8000910:	40021400 	.word	0x40021400

08000914 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000914:	b10a      	cbz	r2, 800091a <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8000916:	6181      	str	r1, [r0, #24]
 8000918:	4770      	bx	lr
 800091a:	0409      	lsls	r1, r1, #16
 800091c:	e7fb      	b.n	8000916 <HAL_GPIO_WritePin+0x2>
	...

08000920 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000920:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  uint32_t tickstart;
  FlagStatus pwrclkchanged = RESET;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000924:	4604      	mov	r4, r0
 8000926:	b918      	cbnz	r0, 8000930 <HAL_RCC_OscConfig+0x10>
  {
    return HAL_ERROR;
 8000928:	2001      	movs	r0, #1
    {
      return HAL_ERROR;
    }
  }
  return HAL_OK;
}
 800092a:	b002      	add	sp, #8
 800092c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000930:	6803      	ldr	r3, [r0, #0]
 8000932:	07d8      	lsls	r0, r3, #31
 8000934:	d410      	bmi.n	8000958 <HAL_RCC_OscConfig+0x38>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000936:	6823      	ldr	r3, [r4, #0]
 8000938:	0799      	lsls	r1, r3, #30
 800093a:	d45e      	bmi.n	80009fa <HAL_RCC_OscConfig+0xda>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800093c:	6823      	ldr	r3, [r4, #0]
 800093e:	0719      	lsls	r1, r3, #28
 8000940:	f100 80a3 	bmi.w	8000a8a <HAL_RCC_OscConfig+0x16a>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000944:	6823      	ldr	r3, [r4, #0]
 8000946:	075a      	lsls	r2, r3, #29
 8000948:	f100 80c4 	bmi.w	8000ad4 <HAL_RCC_OscConfig+0x1b4>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800094c:	69a2      	ldr	r2, [r4, #24]
 800094e:	2a00      	cmp	r2, #0
 8000950:	f040 812e 	bne.w	8000bb0 <HAL_RCC_OscConfig+0x290>
  return HAL_OK;
 8000954:	2000      	movs	r0, #0
 8000956:	e7e8      	b.n	800092a <HAL_RCC_OscConfig+0xa>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000958:	4b93      	ldr	r3, [pc, #588]	; (8000ba8 <HAL_RCC_OscConfig+0x288>)
 800095a:	689a      	ldr	r2, [r3, #8]
 800095c:	f002 020c 	and.w	r2, r2, #12
 8000960:	2a04      	cmp	r2, #4
 8000962:	d007      	beq.n	8000974 <HAL_RCC_OscConfig+0x54>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000964:	689a      	ldr	r2, [r3, #8]
 8000966:	f002 020c 	and.w	r2, r2, #12
 800096a:	2a08      	cmp	r2, #8
 800096c:	d10a      	bne.n	8000984 <HAL_RCC_OscConfig+0x64>
 800096e:	685b      	ldr	r3, [r3, #4]
 8000970:	025a      	lsls	r2, r3, #9
 8000972:	d507      	bpl.n	8000984 <HAL_RCC_OscConfig+0x64>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000974:	4b8c      	ldr	r3, [pc, #560]	; (8000ba8 <HAL_RCC_OscConfig+0x288>)
 8000976:	681b      	ldr	r3, [r3, #0]
 8000978:	039b      	lsls	r3, r3, #14
 800097a:	d5dc      	bpl.n	8000936 <HAL_RCC_OscConfig+0x16>
 800097c:	6863      	ldr	r3, [r4, #4]
 800097e:	2b00      	cmp	r3, #0
 8000980:	d1d9      	bne.n	8000936 <HAL_RCC_OscConfig+0x16>
 8000982:	e7d1      	b.n	8000928 <HAL_RCC_OscConfig+0x8>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000984:	6863      	ldr	r3, [r4, #4]
 8000986:	4d88      	ldr	r5, [pc, #544]	; (8000ba8 <HAL_RCC_OscConfig+0x288>)
 8000988:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800098c:	d111      	bne.n	80009b2 <HAL_RCC_OscConfig+0x92>
 800098e:	682b      	ldr	r3, [r5, #0]
 8000990:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000994:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8000996:	f7ff fe4f 	bl	8000638 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800099a:	4d83      	ldr	r5, [pc, #524]	; (8000ba8 <HAL_RCC_OscConfig+0x288>)
        tickstart = HAL_GetTick();
 800099c:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800099e:	682b      	ldr	r3, [r5, #0]
 80009a0:	039f      	lsls	r7, r3, #14
 80009a2:	d4c8      	bmi.n	8000936 <HAL_RCC_OscConfig+0x16>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80009a4:	f7ff fe48 	bl	8000638 <HAL_GetTick>
 80009a8:	1b80      	subs	r0, r0, r6
 80009aa:	2864      	cmp	r0, #100	; 0x64
 80009ac:	d9f7      	bls.n	800099e <HAL_RCC_OscConfig+0x7e>
            return HAL_TIMEOUT;
 80009ae:	2003      	movs	r0, #3
 80009b0:	e7bb      	b.n	800092a <HAL_RCC_OscConfig+0xa>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80009b2:	b99b      	cbnz	r3, 80009dc <HAL_RCC_OscConfig+0xbc>
 80009b4:	682b      	ldr	r3, [r5, #0]
 80009b6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80009ba:	602b      	str	r3, [r5, #0]
 80009bc:	682b      	ldr	r3, [r5, #0]
 80009be:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80009c2:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 80009c4:	f7ff fe38 	bl	8000638 <HAL_GetTick>
 80009c8:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80009ca:	682b      	ldr	r3, [r5, #0]
 80009cc:	0398      	lsls	r0, r3, #14
 80009ce:	d5b2      	bpl.n	8000936 <HAL_RCC_OscConfig+0x16>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80009d0:	f7ff fe32 	bl	8000638 <HAL_GetTick>
 80009d4:	1b80      	subs	r0, r0, r6
 80009d6:	2864      	cmp	r0, #100	; 0x64
 80009d8:	d9f7      	bls.n	80009ca <HAL_RCC_OscConfig+0xaa>
 80009da:	e7e8      	b.n	80009ae <HAL_RCC_OscConfig+0x8e>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80009dc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80009e0:	682b      	ldr	r3, [r5, #0]
 80009e2:	d103      	bne.n	80009ec <HAL_RCC_OscConfig+0xcc>
 80009e4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80009e8:	602b      	str	r3, [r5, #0]
 80009ea:	e7d0      	b.n	800098e <HAL_RCC_OscConfig+0x6e>
 80009ec:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80009f0:	602b      	str	r3, [r5, #0]
 80009f2:	682b      	ldr	r3, [r5, #0]
 80009f4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80009f8:	e7cc      	b.n	8000994 <HAL_RCC_OscConfig+0x74>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80009fa:	4b6b      	ldr	r3, [pc, #428]	; (8000ba8 <HAL_RCC_OscConfig+0x288>)
 80009fc:	689a      	ldr	r2, [r3, #8]
 80009fe:	f012 0f0c 	tst.w	r2, #12
 8000a02:	d007      	beq.n	8000a14 <HAL_RCC_OscConfig+0xf4>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8000a04:	689a      	ldr	r2, [r3, #8]
 8000a06:	f002 020c 	and.w	r2, r2, #12
 8000a0a:	2a08      	cmp	r2, #8
 8000a0c:	d111      	bne.n	8000a32 <HAL_RCC_OscConfig+0x112>
 8000a0e:	685b      	ldr	r3, [r3, #4]
 8000a10:	0259      	lsls	r1, r3, #9
 8000a12:	d40e      	bmi.n	8000a32 <HAL_RCC_OscConfig+0x112>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000a14:	4b64      	ldr	r3, [pc, #400]	; (8000ba8 <HAL_RCC_OscConfig+0x288>)
 8000a16:	681a      	ldr	r2, [r3, #0]
 8000a18:	0792      	lsls	r2, r2, #30
 8000a1a:	d502      	bpl.n	8000a22 <HAL_RCC_OscConfig+0x102>
 8000a1c:	68e2      	ldr	r2, [r4, #12]
 8000a1e:	2a01      	cmp	r2, #1
 8000a20:	d182      	bne.n	8000928 <HAL_RCC_OscConfig+0x8>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000a22:	681a      	ldr	r2, [r3, #0]
 8000a24:	6921      	ldr	r1, [r4, #16]
 8000a26:	f022 02f8 	bic.w	r2, r2, #248	; 0xf8
 8000a2a:	ea42 02c1 	orr.w	r2, r2, r1, lsl #3
 8000a2e:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000a30:	e784      	b.n	800093c <HAL_RCC_OscConfig+0x1c>
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8000a32:	68e3      	ldr	r3, [r4, #12]
 8000a34:	4d5c      	ldr	r5, [pc, #368]	; (8000ba8 <HAL_RCC_OscConfig+0x288>)
 8000a36:	b1bb      	cbz	r3, 8000a68 <HAL_RCC_OscConfig+0x148>
        __HAL_RCC_HSI_ENABLE();
 8000a38:	682b      	ldr	r3, [r5, #0]
 8000a3a:	f043 0301 	orr.w	r3, r3, #1
 8000a3e:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8000a40:	f7ff fdfa 	bl	8000638 <HAL_GetTick>
 8000a44:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000a46:	682b      	ldr	r3, [r5, #0]
 8000a48:	079f      	lsls	r7, r3, #30
 8000a4a:	d507      	bpl.n	8000a5c <HAL_RCC_OscConfig+0x13c>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000a4c:	682b      	ldr	r3, [r5, #0]
 8000a4e:	6922      	ldr	r2, [r4, #16]
 8000a50:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8000a54:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8000a58:	602b      	str	r3, [r5, #0]
 8000a5a:	e76f      	b.n	800093c <HAL_RCC_OscConfig+0x1c>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000a5c:	f7ff fdec 	bl	8000638 <HAL_GetTick>
 8000a60:	1b80      	subs	r0, r0, r6
 8000a62:	2802      	cmp	r0, #2
 8000a64:	d9ef      	bls.n	8000a46 <HAL_RCC_OscConfig+0x126>
 8000a66:	e7a2      	b.n	80009ae <HAL_RCC_OscConfig+0x8e>
        __HAL_RCC_HSI_DISABLE();
 8000a68:	682b      	ldr	r3, [r5, #0]
 8000a6a:	f023 0301 	bic.w	r3, r3, #1
 8000a6e:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8000a70:	f7ff fde2 	bl	8000638 <HAL_GetTick>
 8000a74:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000a76:	682b      	ldr	r3, [r5, #0]
 8000a78:	0798      	lsls	r0, r3, #30
 8000a7a:	f57f af5f 	bpl.w	800093c <HAL_RCC_OscConfig+0x1c>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000a7e:	f7ff fddb 	bl	8000638 <HAL_GetTick>
 8000a82:	1b80      	subs	r0, r0, r6
 8000a84:	2802      	cmp	r0, #2
 8000a86:	d9f6      	bls.n	8000a76 <HAL_RCC_OscConfig+0x156>
 8000a88:	e791      	b.n	80009ae <HAL_RCC_OscConfig+0x8e>
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8000a8a:	6963      	ldr	r3, [r4, #20]
 8000a8c:	4d46      	ldr	r5, [pc, #280]	; (8000ba8 <HAL_RCC_OscConfig+0x288>)
 8000a8e:	b183      	cbz	r3, 8000ab2 <HAL_RCC_OscConfig+0x192>
      __HAL_RCC_LSI_ENABLE();
 8000a90:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8000a92:	f043 0301 	orr.w	r3, r3, #1
 8000a96:	676b      	str	r3, [r5, #116]	; 0x74
      tickstart = HAL_GetTick();
 8000a98:	f7ff fdce 	bl	8000638 <HAL_GetTick>
 8000a9c:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000a9e:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8000aa0:	079b      	lsls	r3, r3, #30
 8000aa2:	f53f af4f 	bmi.w	8000944 <HAL_RCC_OscConfig+0x24>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000aa6:	f7ff fdc7 	bl	8000638 <HAL_GetTick>
 8000aaa:	1b80      	subs	r0, r0, r6
 8000aac:	2802      	cmp	r0, #2
 8000aae:	d9f6      	bls.n	8000a9e <HAL_RCC_OscConfig+0x17e>
 8000ab0:	e77d      	b.n	80009ae <HAL_RCC_OscConfig+0x8e>
      __HAL_RCC_LSI_DISABLE();
 8000ab2:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8000ab4:	f023 0301 	bic.w	r3, r3, #1
 8000ab8:	676b      	str	r3, [r5, #116]	; 0x74
      tickstart = HAL_GetTick();
 8000aba:	f7ff fdbd 	bl	8000638 <HAL_GetTick>
 8000abe:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000ac0:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8000ac2:	079f      	lsls	r7, r3, #30
 8000ac4:	f57f af3e 	bpl.w	8000944 <HAL_RCC_OscConfig+0x24>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000ac8:	f7ff fdb6 	bl	8000638 <HAL_GetTick>
 8000acc:	1b80      	subs	r0, r0, r6
 8000ace:	2802      	cmp	r0, #2
 8000ad0:	d9f6      	bls.n	8000ac0 <HAL_RCC_OscConfig+0x1a0>
 8000ad2:	e76c      	b.n	80009ae <HAL_RCC_OscConfig+0x8e>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000ad4:	4b34      	ldr	r3, [pc, #208]	; (8000ba8 <HAL_RCC_OscConfig+0x288>)
 8000ad6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000ad8:	00d0      	lsls	r0, r2, #3
 8000ada:	d427      	bmi.n	8000b2c <HAL_RCC_OscConfig+0x20c>
      __HAL_RCC_PWR_CLK_ENABLE();
 8000adc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
      pwrclkchanged = SET;
 8000ade:	2601      	movs	r6, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 8000ae0:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8000ae4:	641a      	str	r2, [r3, #64]	; 0x40
 8000ae6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ae8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000aec:	9301      	str	r3, [sp, #4]
 8000aee:	9b01      	ldr	r3, [sp, #4]
    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8000af0:	4d2e      	ldr	r5, [pc, #184]	; (8000bac <HAL_RCC_OscConfig+0x28c>)
 8000af2:	682b      	ldr	r3, [r5, #0]
 8000af4:	05d9      	lsls	r1, r3, #23
 8000af6:	d51b      	bpl.n	8000b30 <HAL_RCC_OscConfig+0x210>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000af8:	68a3      	ldr	r3, [r4, #8]
 8000afa:	4d2b      	ldr	r5, [pc, #172]	; (8000ba8 <HAL_RCC_OscConfig+0x288>)
 8000afc:	2b01      	cmp	r3, #1
 8000afe:	d127      	bne.n	8000b50 <HAL_RCC_OscConfig+0x230>
 8000b00:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8000b02:	f043 0301 	orr.w	r3, r3, #1
 8000b06:	672b      	str	r3, [r5, #112]	; 0x70
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000b08:	f241 3588 	movw	r5, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8000b0c:	f7ff fd94 	bl	8000638 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000b10:	4f25      	ldr	r7, [pc, #148]	; (8000ba8 <HAL_RCC_OscConfig+0x288>)
      tickstart = HAL_GetTick();
 8000b12:	4680      	mov	r8, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000b14:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8000b16:	079b      	lsls	r3, r3, #30
 8000b18:	d53f      	bpl.n	8000b9a <HAL_RCC_OscConfig+0x27a>
    if(pwrclkchanged == SET)
 8000b1a:	2e00      	cmp	r6, #0
 8000b1c:	f43f af16 	beq.w	800094c <HAL_RCC_OscConfig+0x2c>
      __HAL_RCC_PWR_CLK_DISABLE();
 8000b20:	4a21      	ldr	r2, [pc, #132]	; (8000ba8 <HAL_RCC_OscConfig+0x288>)
 8000b22:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8000b24:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8000b28:	6413      	str	r3, [r2, #64]	; 0x40
 8000b2a:	e70f      	b.n	800094c <HAL_RCC_OscConfig+0x2c>
  FlagStatus pwrclkchanged = RESET;
 8000b2c:	2600      	movs	r6, #0
 8000b2e:	e7df      	b.n	8000af0 <HAL_RCC_OscConfig+0x1d0>
      PWR->CR1 |= PWR_CR1_DBP;
 8000b30:	682b      	ldr	r3, [r5, #0]
 8000b32:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000b36:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 8000b38:	f7ff fd7e 	bl	8000638 <HAL_GetTick>
 8000b3c:	4607      	mov	r7, r0
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8000b3e:	682b      	ldr	r3, [r5, #0]
 8000b40:	05da      	lsls	r2, r3, #23
 8000b42:	d4d9      	bmi.n	8000af8 <HAL_RCC_OscConfig+0x1d8>
        if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8000b44:	f7ff fd78 	bl	8000638 <HAL_GetTick>
 8000b48:	1bc0      	subs	r0, r0, r7
 8000b4a:	2864      	cmp	r0, #100	; 0x64
 8000b4c:	d9f7      	bls.n	8000b3e <HAL_RCC_OscConfig+0x21e>
 8000b4e:	e72e      	b.n	80009ae <HAL_RCC_OscConfig+0x8e>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000b50:	b9ab      	cbnz	r3, 8000b7e <HAL_RCC_OscConfig+0x25e>
 8000b52:	6f2b      	ldr	r3, [r5, #112]	; 0x70
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000b54:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000b58:	f023 0301 	bic.w	r3, r3, #1
 8000b5c:	672b      	str	r3, [r5, #112]	; 0x70
 8000b5e:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8000b60:	f023 0304 	bic.w	r3, r3, #4
 8000b64:	672b      	str	r3, [r5, #112]	; 0x70
      tickstart = HAL_GetTick();
 8000b66:	f7ff fd67 	bl	8000638 <HAL_GetTick>
 8000b6a:	4607      	mov	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000b6c:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8000b6e:	0798      	lsls	r0, r3, #30
 8000b70:	d5d3      	bpl.n	8000b1a <HAL_RCC_OscConfig+0x1fa>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000b72:	f7ff fd61 	bl	8000638 <HAL_GetTick>
 8000b76:	1bc0      	subs	r0, r0, r7
 8000b78:	4540      	cmp	r0, r8
 8000b7a:	d9f7      	bls.n	8000b6c <HAL_RCC_OscConfig+0x24c>
 8000b7c:	e717      	b.n	80009ae <HAL_RCC_OscConfig+0x8e>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000b7e:	2b05      	cmp	r3, #5
 8000b80:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8000b82:	d103      	bne.n	8000b8c <HAL_RCC_OscConfig+0x26c>
 8000b84:	f043 0304 	orr.w	r3, r3, #4
 8000b88:	672b      	str	r3, [r5, #112]	; 0x70
 8000b8a:	e7b9      	b.n	8000b00 <HAL_RCC_OscConfig+0x1e0>
 8000b8c:	f023 0301 	bic.w	r3, r3, #1
 8000b90:	672b      	str	r3, [r5, #112]	; 0x70
 8000b92:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8000b94:	f023 0304 	bic.w	r3, r3, #4
 8000b98:	e7b5      	b.n	8000b06 <HAL_RCC_OscConfig+0x1e6>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000b9a:	f7ff fd4d 	bl	8000638 <HAL_GetTick>
 8000b9e:	eba0 0008 	sub.w	r0, r0, r8
 8000ba2:	42a8      	cmp	r0, r5
 8000ba4:	d9b6      	bls.n	8000b14 <HAL_RCC_OscConfig+0x1f4>
 8000ba6:	e702      	b.n	80009ae <HAL_RCC_OscConfig+0x8e>
 8000ba8:	40023800 	.word	0x40023800
 8000bac:	40007000 	.word	0x40007000
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000bb0:	4d24      	ldr	r5, [pc, #144]	; (8000c44 <HAL_RCC_OscConfig+0x324>)
 8000bb2:	68ab      	ldr	r3, [r5, #8]
 8000bb4:	f003 030c 	and.w	r3, r3, #12
 8000bb8:	2b08      	cmp	r3, #8
 8000bba:	f43f aeb5 	beq.w	8000928 <HAL_RCC_OscConfig+0x8>
        __HAL_RCC_PLL_DISABLE();
 8000bbe:	682b      	ldr	r3, [r5, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000bc0:	2a02      	cmp	r2, #2
        __HAL_RCC_PLL_DISABLE();
 8000bc2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8000bc6:	602b      	str	r3, [r5, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000bc8:	d12e      	bne.n	8000c28 <HAL_RCC_OscConfig+0x308>
        tickstart = HAL_GetTick();
 8000bca:	f7ff fd35 	bl	8000638 <HAL_GetTick>
 8000bce:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8000bd0:	682b      	ldr	r3, [r5, #0]
 8000bd2:	0199      	lsls	r1, r3, #6
 8000bd4:	d422      	bmi.n	8000c1c <HAL_RCC_OscConfig+0x2fc>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8000bd6:	6a22      	ldr	r2, [r4, #32]
 8000bd8:	69e3      	ldr	r3, [r4, #28]
 8000bda:	4313      	orrs	r3, r2
 8000bdc:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8000bde:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8000be2:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8000be6:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8000be8:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8000bec:	6aa2      	ldr	r2, [r4, #40]	; 0x28
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000bee:	4c15      	ldr	r4, [pc, #84]	; (8000c44 <HAL_RCC_OscConfig+0x324>)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8000bf0:	0852      	lsrs	r2, r2, #1
 8000bf2:	3a01      	subs	r2, #1
 8000bf4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000bf8:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 8000bfa:	682b      	ldr	r3, [r5, #0]
 8000bfc:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000c00:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8000c02:	f7ff fd19 	bl	8000638 <HAL_GetTick>
 8000c06:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000c08:	6823      	ldr	r3, [r4, #0]
 8000c0a:	019a      	lsls	r2, r3, #6
 8000c0c:	f53f aea2 	bmi.w	8000954 <HAL_RCC_OscConfig+0x34>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000c10:	f7ff fd12 	bl	8000638 <HAL_GetTick>
 8000c14:	1b40      	subs	r0, r0, r5
 8000c16:	2802      	cmp	r0, #2
 8000c18:	d9f6      	bls.n	8000c08 <HAL_RCC_OscConfig+0x2e8>
 8000c1a:	e6c8      	b.n	80009ae <HAL_RCC_OscConfig+0x8e>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000c1c:	f7ff fd0c 	bl	8000638 <HAL_GetTick>
 8000c20:	1b80      	subs	r0, r0, r6
 8000c22:	2802      	cmp	r0, #2
 8000c24:	d9d4      	bls.n	8000bd0 <HAL_RCC_OscConfig+0x2b0>
 8000c26:	e6c2      	b.n	80009ae <HAL_RCC_OscConfig+0x8e>
        tickstart = HAL_GetTick();
 8000c28:	f7ff fd06 	bl	8000638 <HAL_GetTick>
 8000c2c:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8000c2e:	682b      	ldr	r3, [r5, #0]
 8000c30:	019b      	lsls	r3, r3, #6
 8000c32:	f57f ae8f 	bpl.w	8000954 <HAL_RCC_OscConfig+0x34>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000c36:	f7ff fcff 	bl	8000638 <HAL_GetTick>
 8000c3a:	1b00      	subs	r0, r0, r4
 8000c3c:	2802      	cmp	r0, #2
 8000c3e:	d9f6      	bls.n	8000c2e <HAL_RCC_OscConfig+0x30e>
 8000c40:	e6b5      	b.n	80009ae <HAL_RCC_OscConfig+0x8e>
 8000c42:	bf00      	nop
 8000c44:	40023800 	.word	0x40023800

08000c48 <HAL_RCC_GetSysClockFreq>:
{
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
  uint32_t sysclockfreq = 0;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8000c48:	4913      	ldr	r1, [pc, #76]	; (8000c98 <HAL_RCC_GetSysClockFreq+0x50>)
{
 8000c4a:	b508      	push	{r3, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8000c4c:	688b      	ldr	r3, [r1, #8]
 8000c4e:	f003 030c 	and.w	r3, r3, #12
 8000c52:	2b04      	cmp	r3, #4
 8000c54:	d003      	beq.n	8000c5e <HAL_RCC_GetSysClockFreq+0x16>
 8000c56:	2b08      	cmp	r3, #8
 8000c58:	d003      	beq.n	8000c62 <HAL_RCC_GetSysClockFreq+0x1a>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8000c5a:	4810      	ldr	r0, [pc, #64]	; (8000c9c <HAL_RCC_GetSysClockFreq+0x54>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8000c5c:	bd08      	pop	{r3, pc}
      sysclockfreq = HSE_VALUE;
 8000c5e:	4810      	ldr	r0, [pc, #64]	; (8000ca0 <HAL_RCC_GetSysClockFreq+0x58>)
 8000c60:	bd08      	pop	{r3, pc}
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8000c62:	684a      	ldr	r2, [r1, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8000c64:	684b      	ldr	r3, [r1, #4]
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8000c66:	6849      	ldr	r1, [r1, #4]
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8000c68:	f002 023f 	and.w	r2, r2, #63	; 0x3f
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8000c6c:	f413 0380 	ands.w	r3, r3, #4194304	; 0x400000
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8000c70:	f3c1 1188 	ubfx	r1, r1, #6, #9
 8000c74:	bf1a      	itte	ne
 8000c76:	480a      	ldrne	r0, [pc, #40]	; (8000ca0 <HAL_RCC_GetSysClockFreq+0x58>)
 8000c78:	2300      	movne	r3, #0
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8000c7a:	4808      	ldreq	r0, [pc, #32]	; (8000c9c <HAL_RCC_GetSysClockFreq+0x54>)
 8000c7c:	fba1 0100 	umull	r0, r1, r1, r0
 8000c80:	f7ff fb16 	bl	80002b0 <__aeabi_uldivmod>
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1 ) *2);
 8000c84:	4b04      	ldr	r3, [pc, #16]	; (8000c98 <HAL_RCC_GetSysClockFreq+0x50>)
 8000c86:	685b      	ldr	r3, [r3, #4]
 8000c88:	f3c3 4301 	ubfx	r3, r3, #16, #2
 8000c8c:	3301      	adds	r3, #1
 8000c8e:	005b      	lsls	r3, r3, #1
      sysclockfreq = pllvco/pllp;
 8000c90:	fbb0 f0f3 	udiv	r0, r0, r3
 8000c94:	bd08      	pop	{r3, pc}
 8000c96:	bf00      	nop
 8000c98:	40023800 	.word	0x40023800
 8000c9c:	00f42400 	.word	0x00f42400
 8000ca0:	007a1200 	.word	0x007a1200

08000ca4 <HAL_RCC_ClockConfig>:
{
 8000ca4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000ca8:	460d      	mov	r5, r1
  if(RCC_ClkInitStruct == NULL)
 8000caa:	4604      	mov	r4, r0
 8000cac:	b910      	cbnz	r0, 8000cb4 <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 8000cae:	2001      	movs	r0, #1
 8000cb0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8000cb4:	4a46      	ldr	r2, [pc, #280]	; (8000dd0 <HAL_RCC_ClockConfig+0x12c>)
 8000cb6:	6813      	ldr	r3, [r2, #0]
 8000cb8:	f003 030f 	and.w	r3, r3, #15
 8000cbc:	428b      	cmp	r3, r1
 8000cbe:	d328      	bcc.n	8000d12 <HAL_RCC_ClockConfig+0x6e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8000cc0:	6821      	ldr	r1, [r4, #0]
 8000cc2:	078f      	lsls	r7, r1, #30
 8000cc4:	d430      	bmi.n	8000d28 <HAL_RCC_ClockConfig+0x84>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8000cc6:	07c8      	lsls	r0, r1, #31
 8000cc8:	d443      	bmi.n	8000d52 <HAL_RCC_ClockConfig+0xae>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8000cca:	4a41      	ldr	r2, [pc, #260]	; (8000dd0 <HAL_RCC_ClockConfig+0x12c>)
 8000ccc:	6813      	ldr	r3, [r2, #0]
 8000cce:	f003 030f 	and.w	r3, r3, #15
 8000cd2:	429d      	cmp	r5, r3
 8000cd4:	d367      	bcc.n	8000da6 <HAL_RCC_ClockConfig+0x102>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000cd6:	6822      	ldr	r2, [r4, #0]
 8000cd8:	0751      	lsls	r1, r2, #29
 8000cda:	d470      	bmi.n	8000dbe <HAL_RCC_ClockConfig+0x11a>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000cdc:	0713      	lsls	r3, r2, #28
 8000cde:	d507      	bpl.n	8000cf0 <HAL_RCC_ClockConfig+0x4c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8000ce0:	4a3c      	ldr	r2, [pc, #240]	; (8000dd4 <HAL_RCC_ClockConfig+0x130>)
 8000ce2:	6921      	ldr	r1, [r4, #16]
 8000ce4:	6893      	ldr	r3, [r2, #8]
 8000ce6:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8000cea:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8000cee:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8000cf0:	f7ff ffaa 	bl	8000c48 <HAL_RCC_GetSysClockFreq>
 8000cf4:	4b37      	ldr	r3, [pc, #220]	; (8000dd4 <HAL_RCC_ClockConfig+0x130>)
 8000cf6:	4a38      	ldr	r2, [pc, #224]	; (8000dd8 <HAL_RCC_ClockConfig+0x134>)
 8000cf8:	689b      	ldr	r3, [r3, #8]
 8000cfa:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8000cfe:	5cd3      	ldrb	r3, [r2, r3]
 8000d00:	40d8      	lsrs	r0, r3
 8000d02:	4b36      	ldr	r3, [pc, #216]	; (8000ddc <HAL_RCC_ClockConfig+0x138>)
 8000d04:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 8000d06:	2000      	movs	r0, #0
 8000d08:	f7ff fc5a 	bl	80005c0 <HAL_InitTick>
  return HAL_OK;
 8000d0c:	2000      	movs	r0, #0
 8000d0e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000d12:	6813      	ldr	r3, [r2, #0]
 8000d14:	f023 030f 	bic.w	r3, r3, #15
 8000d18:	430b      	orrs	r3, r1
 8000d1a:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8000d1c:	6813      	ldr	r3, [r2, #0]
 8000d1e:	f003 030f 	and.w	r3, r3, #15
 8000d22:	4299      	cmp	r1, r3
 8000d24:	d1c3      	bne.n	8000cae <HAL_RCC_ClockConfig+0xa>
 8000d26:	e7cb      	b.n	8000cc0 <HAL_RCC_ClockConfig+0x1c>
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000d28:	f011 0f04 	tst.w	r1, #4
 8000d2c:	4b29      	ldr	r3, [pc, #164]	; (8000dd4 <HAL_RCC_ClockConfig+0x130>)
 8000d2e:	d003      	beq.n	8000d38 <HAL_RCC_ClockConfig+0x94>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8000d30:	689a      	ldr	r2, [r3, #8]
 8000d32:	f442 52e0 	orr.w	r2, r2, #7168	; 0x1c00
 8000d36:	609a      	str	r2, [r3, #8]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000d38:	070e      	lsls	r6, r1, #28
 8000d3a:	d503      	bpl.n	8000d44 <HAL_RCC_ClockConfig+0xa0>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8000d3c:	689a      	ldr	r2, [r3, #8]
 8000d3e:	f442 4260 	orr.w	r2, r2, #57344	; 0xe000
 8000d42:	609a      	str	r2, [r3, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8000d44:	689a      	ldr	r2, [r3, #8]
 8000d46:	68a0      	ldr	r0, [r4, #8]
 8000d48:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8000d4c:	4302      	orrs	r2, r0
 8000d4e:	609a      	str	r2, [r3, #8]
 8000d50:	e7b9      	b.n	8000cc6 <HAL_RCC_ClockConfig+0x22>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000d52:	6861      	ldr	r1, [r4, #4]
 8000d54:	4b1f      	ldr	r3, [pc, #124]	; (8000dd4 <HAL_RCC_ClockConfig+0x130>)
 8000d56:	2901      	cmp	r1, #1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000d58:	681a      	ldr	r2, [r3, #0]
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000d5a:	d11c      	bne.n	8000d96 <HAL_RCC_ClockConfig+0xf2>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000d5c:	f412 3f00 	tst.w	r2, #131072	; 0x20000
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000d60:	d0a5      	beq.n	8000cae <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8000d62:	689a      	ldr	r2, [r3, #8]
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000d64:	f241 3888 	movw	r8, #5000	; 0x1388
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8000d68:	4e1a      	ldr	r6, [pc, #104]	; (8000dd4 <HAL_RCC_ClockConfig+0x130>)
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8000d6a:	f022 0203 	bic.w	r2, r2, #3
 8000d6e:	430a      	orrs	r2, r1
 8000d70:	609a      	str	r2, [r3, #8]
    tickstart = HAL_GetTick();
 8000d72:	f7ff fc61 	bl	8000638 <HAL_GetTick>
 8000d76:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8000d78:	68b3      	ldr	r3, [r6, #8]
 8000d7a:	6862      	ldr	r2, [r4, #4]
 8000d7c:	f003 030c 	and.w	r3, r3, #12
 8000d80:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8000d84:	d0a1      	beq.n	8000cca <HAL_RCC_ClockConfig+0x26>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000d86:	f7ff fc57 	bl	8000638 <HAL_GetTick>
 8000d8a:	1bc0      	subs	r0, r0, r7
 8000d8c:	4540      	cmp	r0, r8
 8000d8e:	d9f3      	bls.n	8000d78 <HAL_RCC_ClockConfig+0xd4>
        return HAL_TIMEOUT;
 8000d90:	2003      	movs	r0, #3
}
 8000d92:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8000d96:	2902      	cmp	r1, #2
 8000d98:	d102      	bne.n	8000da0 <HAL_RCC_ClockConfig+0xfc>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000d9a:	f012 7f00 	tst.w	r2, #33554432	; 0x2000000
 8000d9e:	e7df      	b.n	8000d60 <HAL_RCC_ClockConfig+0xbc>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000da0:	f012 0f02 	tst.w	r2, #2
 8000da4:	e7dc      	b.n	8000d60 <HAL_RCC_ClockConfig+0xbc>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000da6:	6813      	ldr	r3, [r2, #0]
 8000da8:	f023 030f 	bic.w	r3, r3, #15
 8000dac:	432b      	orrs	r3, r5
 8000dae:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8000db0:	6813      	ldr	r3, [r2, #0]
 8000db2:	f003 030f 	and.w	r3, r3, #15
 8000db6:	429d      	cmp	r5, r3
 8000db8:	f47f af79 	bne.w	8000cae <HAL_RCC_ClockConfig+0xa>
 8000dbc:	e78b      	b.n	8000cd6 <HAL_RCC_ClockConfig+0x32>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8000dbe:	4905      	ldr	r1, [pc, #20]	; (8000dd4 <HAL_RCC_ClockConfig+0x130>)
 8000dc0:	68e0      	ldr	r0, [r4, #12]
 8000dc2:	688b      	ldr	r3, [r1, #8]
 8000dc4:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 8000dc8:	4303      	orrs	r3, r0
 8000dca:	608b      	str	r3, [r1, #8]
 8000dcc:	e786      	b.n	8000cdc <HAL_RCC_ClockConfig+0x38>
 8000dce:	bf00      	nop
 8000dd0:	40023c00 	.word	0x40023c00
 8000dd4:	40023800 	.word	0x40023800
 8000dd8:	08003195 	.word	0x08003195
 8000ddc:	20000008 	.word	0x20000008

08000de0 <HAL_RCC_GetHCLKFreq>:
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
}
 8000de0:	4b01      	ldr	r3, [pc, #4]	; (8000de8 <HAL_RCC_GetHCLKFreq+0x8>)
 8000de2:	6818      	ldr	r0, [r3, #0]
 8000de4:	4770      	bx	lr
 8000de6:	bf00      	nop
 8000de8:	20000008 	.word	0x20000008

08000dec <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8000dec:	4b04      	ldr	r3, [pc, #16]	; (8000e00 <HAL_RCC_GetPCLK1Freq+0x14>)
 8000dee:	4a05      	ldr	r2, [pc, #20]	; (8000e04 <HAL_RCC_GetPCLK1Freq+0x18>)
 8000df0:	689b      	ldr	r3, [r3, #8]
 8000df2:	f3c3 2382 	ubfx	r3, r3, #10, #3
 8000df6:	5cd3      	ldrb	r3, [r2, r3]
 8000df8:	4a03      	ldr	r2, [pc, #12]	; (8000e08 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8000dfa:	6810      	ldr	r0, [r2, #0]
}
 8000dfc:	40d8      	lsrs	r0, r3
 8000dfe:	4770      	bx	lr
 8000e00:	40023800 	.word	0x40023800
 8000e04:	080031a5 	.word	0x080031a5
 8000e08:	20000008 	.word	0x20000008

08000e0c <HAL_RCC_GetPCLK2Freq>:
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8000e0c:	4b04      	ldr	r3, [pc, #16]	; (8000e20 <HAL_RCC_GetPCLK2Freq+0x14>)
 8000e0e:	4a05      	ldr	r2, [pc, #20]	; (8000e24 <HAL_RCC_GetPCLK2Freq+0x18>)
 8000e10:	689b      	ldr	r3, [r3, #8]
 8000e12:	f3c3 3342 	ubfx	r3, r3, #13, #3
 8000e16:	5cd3      	ldrb	r3, [r2, r3]
 8000e18:	4a03      	ldr	r2, [pc, #12]	; (8000e28 <HAL_RCC_GetPCLK2Freq+0x1c>)
 8000e1a:	6810      	ldr	r0, [r2, #0]
}
 8000e1c:	40d8      	lsrs	r0, r3
 8000e1e:	4770      	bx	lr
 8000e20:	40023800 	.word	0x40023800
 8000e24:	080031a5 	.word	0x080031a5
 8000e28:	20000008 	.word	0x20000008

08000e2c <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8000e2c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8000e30:	6802      	ldr	r2, [r0, #0]
{
 8000e32:	4604      	mov	r4, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8000e34:	f012 0601 	ands.w	r6, r2, #1
 8000e38:	d00b      	beq.n	8000e52 <HAL_RCCEx_PeriphCLKConfig+0x26>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8000e3a:	4bb8      	ldr	r3, [pc, #736]	; (800111c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8000e3c:	6899      	ldr	r1, [r3, #8]
 8000e3e:	f421 0100 	bic.w	r1, r1, #8388608	; 0x800000
 8000e42:	6099      	str	r1, [r3, #8]
 8000e44:	6b46      	ldr	r6, [r0, #52]	; 0x34
 8000e46:	6899      	ldr	r1, [r3, #8]
 8000e48:	4331      	orrs	r1, r6
    
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8000e4a:	fab6 f686 	clz	r6, r6
 8000e4e:	0976      	lsrs	r6, r6, #5
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8000e50:	6099      	str	r1, [r3, #8]
      plli2sused = 1; 
    }
  }
  
  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8000e52:	f412 2500 	ands.w	r5, r2, #524288	; 0x80000
 8000e56:	d012      	beq.n	8000e7e <HAL_RCCEx_PeriphCLKConfig+0x52>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));
    
    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8000e58:	49b0      	ldr	r1, [pc, #704]	; (800111c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8000e5a:	6be5      	ldr	r5, [r4, #60]	; 0x3c
 8000e5c:	f8d1 308c 	ldr.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8000e60:	f5b5 1f80 	cmp.w	r5, #1048576	; 0x100000
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8000e64:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
    {
      plli2sused = 1; 
 8000e68:	bf08      	it	eq
 8000e6a:	2601      	moveq	r6, #1
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8000e6c:	ea43 0305 	orr.w	r3, r3, r5
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8000e70:	bf16      	itet	ne
 8000e72:	fab5 f585 	clzne	r5, r5
  uint32_t pllsaiused = 0;
 8000e76:	2500      	moveq	r5, #0
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8000e78:	096d      	lsrne	r5, r5, #5
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8000e7a:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
      pllsaiused = 1; 
    }
  }
  
  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8000e7e:	02d1      	lsls	r1, r2, #11
 8000e80:	d510      	bpl.n	8000ea4 <HAL_RCCEx_PeriphCLKConfig+0x78>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));
    
    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8000e82:	48a6      	ldr	r0, [pc, #664]	; (800111c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8000e84:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8000e86:	f8d0 308c 	ldr.w	r3, [r0, #140]	; 0x8c
    
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8000e8a:	f5b1 0f80 	cmp.w	r1, #4194304	; 0x400000
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8000e8e:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 8000e92:	ea43 0301 	orr.w	r3, r3, r1
 8000e96:	f8c0 308c 	str.w	r3, [r0, #140]	; 0x8c
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8000e9a:	f000 8185 	beq.w	80011a8 <HAL_RCCEx_PeriphCLKConfig+0x37c>
      plli2sused = 1; 
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
    {
      pllsaiused = 1; 
 8000e9e:	2900      	cmp	r1, #0
 8000ea0:	bf08      	it	eq
 8000ea2:	2501      	moveq	r5, #1
  }
  
  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
  {    
      plli2sused = 1; 
 8000ea4:	f012 7f80 	tst.w	r2, #16777216	; 0x1000000
 8000ea8:	bf18      	it	ne
 8000eaa:	2601      	movne	r6, #1
  }  
  
  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8000eac:	0692      	lsls	r2, r2, #26
 8000eae:	d531      	bpl.n	8000f14 <HAL_RCCEx_PeriphCLKConfig+0xe8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8000eb0:	4b9a      	ldr	r3, [pc, #616]	; (800111c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
    
    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8000eb2:	4f9b      	ldr	r7, [pc, #620]	; (8001120 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
    __HAL_RCC_PWR_CLK_ENABLE();
 8000eb4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000eb6:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8000eba:	641a      	str	r2, [r3, #64]	; 0x40
 8000ebc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ebe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ec2:	9301      	str	r3, [sp, #4]
 8000ec4:	9b01      	ldr	r3, [sp, #4]
    PWR->CR1 |= PWR_CR1_DBP;
 8000ec6:	683b      	ldr	r3, [r7, #0]
 8000ec8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000ecc:	603b      	str	r3, [r7, #0]
    
    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8000ece:	f7ff fbb3 	bl	8000638 <HAL_GetTick>
 8000ed2:	4680      	mov	r8, r0
    
    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8000ed4:	683b      	ldr	r3, [r7, #0]
 8000ed6:	05db      	lsls	r3, r3, #23
 8000ed8:	f140 8168 	bpl.w	80011ac <HAL_RCCEx_PeriphCLKConfig+0x380>
        return HAL_TIMEOUT;
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8000edc:	4f8f      	ldr	r7, [pc, #572]	; (800111c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8000ede:	6f3b      	ldr	r3, [r7, #112]	; 0x70

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8000ee0:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 8000ee4:	f040 816d 	bne.w	80011c2 <HAL_RCCEx_PeriphCLKConfig+0x396>
            return HAL_TIMEOUT;
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8000ee8:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8000eea:	f403 7240 	and.w	r2, r3, #768	; 0x300
 8000eee:	f5b2 7f40 	cmp.w	r2, #768	; 0x300
 8000ef2:	4a8a      	ldr	r2, [pc, #552]	; (800111c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8000ef4:	f040 818b 	bne.w	800120e <HAL_RCCEx_PeriphCLKConfig+0x3e2>
 8000ef8:	6891      	ldr	r1, [r2, #8]
 8000efa:	f023 4070 	bic.w	r0, r3, #4026531840	; 0xf0000000
 8000efe:	f421 11f8 	bic.w	r1, r1, #2031616	; 0x1f0000
 8000f02:	f420 7040 	bic.w	r0, r0, #768	; 0x300
 8000f06:	4301      	orrs	r1, r0
 8000f08:	6091      	str	r1, [r2, #8]
 8000f0a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000f0e:	6f11      	ldr	r1, [r2, #112]	; 0x70
 8000f10:	430b      	orrs	r3, r1
 8000f12:	6713      	str	r3, [r2, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8000f14:	6823      	ldr	r3, [r4, #0]
 8000f16:	06da      	lsls	r2, r3, #27
 8000f18:	d50c      	bpl.n	8000f34 <HAL_RCCEx_PeriphCLKConfig+0x108>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));
    
    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8000f1a:	4a80      	ldr	r2, [pc, #512]	; (800111c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8000f1c:	f8d2 108c 	ldr.w	r1, [r2, #140]	; 0x8c
 8000f20:	f021 7180 	bic.w	r1, r1, #16777216	; 0x1000000
 8000f24:	f8c2 108c 	str.w	r1, [r2, #140]	; 0x8c
 8000f28:	f8d2 108c 	ldr.w	r1, [r2, #140]	; 0x8c
 8000f2c:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8000f2e:	4301      	orrs	r1, r0
 8000f30:	f8c2 108c 	str.w	r1, [r2, #140]	; 0x8c
  }
  
  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8000f34:	045f      	lsls	r7, r3, #17
 8000f36:	d508      	bpl.n	8000f4a <HAL_RCCEx_PeriphCLKConfig+0x11e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8000f38:	4978      	ldr	r1, [pc, #480]	; (800111c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8000f3a:	6e60      	ldr	r0, [r4, #100]	; 0x64
 8000f3c:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8000f40:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
 8000f44:	4302      	orrs	r2, r0
 8000f46:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }
  
  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8000f4a:	0418      	lsls	r0, r3, #16
 8000f4c:	d508      	bpl.n	8000f60 <HAL_RCCEx_PeriphCLKConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8000f4e:	4973      	ldr	r1, [pc, #460]	; (800111c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8000f50:	6ea0      	ldr	r0, [r4, #104]	; 0x68
 8000f52:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8000f56:	f422 2240 	bic.w	r2, r2, #786432	; 0xc0000
 8000f5a:	4302      	orrs	r2, r0
 8000f5c:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }
  
  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8000f60:	03d9      	lsls	r1, r3, #15
 8000f62:	d508      	bpl.n	8000f76 <HAL_RCCEx_PeriphCLKConfig+0x14a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8000f64:	496d      	ldr	r1, [pc, #436]	; (800111c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8000f66:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 8000f68:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8000f6c:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
 8000f70:	4302      	orrs	r2, r0
 8000f72:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }
    
  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8000f76:	039a      	lsls	r2, r3, #14
 8000f78:	d508      	bpl.n	8000f8c <HAL_RCCEx_PeriphCLKConfig+0x160>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));
    
    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8000f7a:	4968      	ldr	r1, [pc, #416]	; (800111c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8000f7c:	6f20      	ldr	r0, [r4, #112]	; 0x70
 8000f7e:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8000f82:	f422 0240 	bic.w	r2, r2, #12582912	; 0xc00000
 8000f86:	4302      	orrs	r2, r0
 8000f88:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8000f8c:	065f      	lsls	r7, r3, #25
 8000f8e:	d508      	bpl.n	8000fa2 <HAL_RCCEx_PeriphCLKConfig+0x176>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8000f90:	4962      	ldr	r1, [pc, #392]	; (800111c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8000f92:	6c60      	ldr	r0, [r4, #68]	; 0x44
 8000f94:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8000f98:	f022 0203 	bic.w	r2, r2, #3
 8000f9c:	4302      	orrs	r2, r0
 8000f9e:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8000fa2:	0618      	lsls	r0, r3, #24
 8000fa4:	d508      	bpl.n	8000fb8 <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8000fa6:	495d      	ldr	r1, [pc, #372]	; (800111c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8000fa8:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 8000faa:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8000fae:	f022 020c 	bic.w	r2, r2, #12
 8000fb2:	4302      	orrs	r2, r0
 8000fb4:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8000fb8:	05d9      	lsls	r1, r3, #23
 8000fba:	d508      	bpl.n	8000fce <HAL_RCCEx_PeriphCLKConfig+0x1a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8000fbc:	4957      	ldr	r1, [pc, #348]	; (800111c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8000fbe:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 8000fc0:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8000fc4:	f022 0230 	bic.w	r2, r2, #48	; 0x30
 8000fc8:	4302      	orrs	r2, r0
 8000fca:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8000fce:	059a      	lsls	r2, r3, #22
 8000fd0:	d508      	bpl.n	8000fe4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8000fd2:	4952      	ldr	r1, [pc, #328]	; (800111c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8000fd4:	6d20      	ldr	r0, [r4, #80]	; 0x50
 8000fd6:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8000fda:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8000fde:	4302      	orrs	r2, r0
 8000fe0:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8000fe4:	055f      	lsls	r7, r3, #21
 8000fe6:	d508      	bpl.n	8000ffa <HAL_RCCEx_PeriphCLKConfig+0x1ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8000fe8:	494c      	ldr	r1, [pc, #304]	; (800111c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8000fea:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8000fec:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8000ff0:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8000ff4:	4302      	orrs	r2, r0
 8000ff6:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8000ffa:	0518      	lsls	r0, r3, #20
 8000ffc:	d508      	bpl.n	8001010 <HAL_RCCEx_PeriphCLKConfig+0x1e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));
    
    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8000ffe:	4947      	ldr	r1, [pc, #284]	; (800111c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001000:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8001002:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8001006:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 800100a:	4302      	orrs	r2, r0
 800100c:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8001010:	04d9      	lsls	r1, r3, #19
 8001012:	d508      	bpl.n	8001026 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));
    
    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8001014:	4941      	ldr	r1, [pc, #260]	; (800111c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001016:	6de0      	ldr	r0, [r4, #92]	; 0x5c
 8001018:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 800101c:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 8001020:	4302      	orrs	r2, r0
 8001022:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8001026:	049a      	lsls	r2, r3, #18
 8001028:	d508      	bpl.n	800103c <HAL_RCCEx_PeriphCLKConfig+0x210>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));
    
    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 800102a:	493c      	ldr	r1, [pc, #240]	; (800111c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800102c:	6e20      	ldr	r0, [r4, #96]	; 0x60
 800102e:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8001032:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 8001036:	4302      	orrs	r2, r0
 8001038:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }
  
  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800103c:	025f      	lsls	r7, r3, #9
 800103e:	d508      	bpl.n	8001052 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8001040:	4936      	ldr	r1, [pc, #216]	; (800111c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001042:	6fa0      	ldr	r0, [r4, #120]	; 0x78
 8001044:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8001048:	f022 6280 	bic.w	r2, r2, #67108864	; 0x4000000
 800104c:	4302      	orrs	r2, r0
 800104e:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }
  
  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8001052:	0298      	lsls	r0, r3, #10
 8001054:	d50c      	bpl.n	8001070 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));
    
    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8001056:	4831      	ldr	r0, [pc, #196]	; (800111c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001058:	6fe1      	ldr	r1, [r4, #124]	; 0x7c
 800105a:	f8d0 2090 	ldr.w	r2, [r0, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
    {
      pllsaiused = 1; 
 800105e:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8001062:	f022 6200 	bic.w	r2, r2, #134217728	; 0x8000000
      pllsaiused = 1; 
 8001066:	bf08      	it	eq
 8001068:	2501      	moveq	r5, #1
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800106a:	430a      	orrs	r2, r1
 800106c:	f8c0 2090 	str.w	r2, [r0, #144]	; 0x90

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
  {
    pllsaiused = 1; 
 8001070:	f013 0f08 	tst.w	r3, #8
 8001074:	bf18      	it	ne
 8001076:	2501      	movne	r5, #1
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */
  
  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8001078:	0359      	lsls	r1, r3, #13
 800107a:	d508      	bpl.n	800108e <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    
    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800107c:	4927      	ldr	r1, [pc, #156]	; (800111c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800107e:	6f60      	ldr	r0, [r4, #116]	; 0x74
 8001080:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8001084:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8001088:	4302      	orrs	r2, r0
 800108a:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
   }
  
  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 800108e:	021a      	lsls	r2, r3, #8
 8001090:	d509      	bpl.n	80010a6 <HAL_RCCEx_PeriphCLKConfig+0x27a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    
    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8001092:	4922      	ldr	r1, [pc, #136]	; (800111c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001094:	f8d4 0080 	ldr.w	r0, [r4, #128]	; 0x80
 8001098:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 800109c:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 80010a0:	4302      	orrs	r2, r0
 80010a2:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }  
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */
  
  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 80010a6:	2e01      	cmp	r6, #1
 80010a8:	f000 80b5 	beq.w	8001216 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
 80010ac:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80010b0:	f000 80b1 	beq.w	8001216 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
    }
  } 
  
  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 80010b4:	2d01      	cmp	r5, #1
 80010b6:	d175      	bne.n	80011a4 <HAL_RCCEx_PeriphCLKConfig+0x378>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE(); 
 80010b8:	4d18      	ldr	r5, [pc, #96]	; (800111c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80010ba:	682b      	ldr	r3, [r5, #0]
 80010bc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80010c0:	602b      	str	r3, [r5, #0]
    
    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80010c2:	f7ff fab9 	bl	8000638 <HAL_GetTick>
 80010c6:	4606      	mov	r6, r0

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80010c8:	682b      	ldr	r3, [r5, #0]
 80010ca:	009f      	lsls	r7, r3, #2
 80010cc:	f100 8127 	bmi.w	800131e <HAL_RCCEx_PeriphCLKConfig+0x4f2>
    
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));
    
    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/  
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80010d0:	6821      	ldr	r1, [r4, #0]
 80010d2:	030e      	lsls	r6, r1, #12
 80010d4:	d501      	bpl.n	80010da <HAL_RCCEx_PeriphCLKConfig+0x2ae>
 80010d6:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80010d8:	b11b      	cbz	r3, 80010e2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
 80010da:	02cd      	lsls	r5, r1, #11
 80010dc:	d522      	bpl.n	8001124 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80010de:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80010e0:	bb03      	cbnz	r3, 8001124 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));
    
      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80010e2:	4a0e      	ldr	r2, [pc, #56]	; (800111c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80010e4:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80010e8:	f8d2 0088 	ldr.w	r0, [r2, #136]	; 0x88
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 80010ec:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80010f0:	f000 40e0 	and.w	r0, r0, #1879048192	; 0x70000000
 80010f4:	4303      	orrs	r3, r0
 80010f6:	6960      	ldr	r0, [r4, #20]
 80010f8:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 80010fc:	69a0      	ldr	r0, [r4, #24]
 80010fe:	ea43 6300 	orr.w	r3, r3, r0, lsl #24
 8001102:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
      
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */ 
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8001106:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
 800110a:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 800110c:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
 8001110:	3801      	subs	r0, #1
 8001112:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
 8001116:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 800111a:	e003      	b.n	8001124 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
 800111c:	40023800 	.word	0x40023800
 8001120:	40007000 	.word	0x40007000
    }           

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/   
    /* In Case of PLLI2S is selected as source clock for CK48 */ 
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8001124:	0288      	lsls	r0, r1, #10
 8001126:	d515      	bpl.n	8001154 <HAL_RCCEx_PeriphCLKConfig+0x328>
 8001128:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
 800112a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800112e:	d111      	bne.n	8001154 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8001130:	4a82      	ldr	r2, [pc, #520]	; (800133c <HAL_RCCEx_PeriphCLKConfig+0x510>)
 8001132:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8001136:	f8d2 0088 	ldr.w	r0, [r2, #136]	; 0x88
      
      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 800113a:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
 800113e:	f000 40e0 	and.w	r0, r0, #1879048192	; 0x70000000
 8001142:	4303      	orrs	r3, r0
 8001144:	6960      	ldr	r0, [r4, #20]
 8001146:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 800114a:	6a20      	ldr	r0, [r4, #32]
 800114c:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8001150:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    }        

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) 
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8001154:	070a      	lsls	r2, r1, #28
 8001156:	d519      	bpl.n	800118c <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));
      
      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8001158:	4978      	ldr	r1, [pc, #480]	; (800133c <HAL_RCCEx_PeriphCLKConfig+0x510>)
 800115a:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800115e:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
      
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8001162:	f002 6270 	and.w	r2, r2, #251658240	; 0xf000000
 8001166:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800116a:	4313      	orrs	r3, r2
 800116c:	6962      	ldr	r2, [r4, #20]
 800116e:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8001172:	69e2      	ldr	r2, [r4, #28]
 8001174:	ea43 7302 	orr.w	r3, r3, r2, lsl #28
 8001178:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */ 
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 800117c:	f8d1 308c 	ldr.w	r3, [r1, #140]	; 0x8c
 8001180:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8001182:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8001186:	4313      	orrs	r3, r2
 8001188:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }    
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */  

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 800118c:	4c6b      	ldr	r4, [pc, #428]	; (800133c <HAL_RCCEx_PeriphCLKConfig+0x510>)
 800118e:	6823      	ldr	r3, [r4, #0]
 8001190:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001194:	6023      	str	r3, [r4, #0]
    
    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001196:	f7ff fa4f 	bl	8000638 <HAL_GetTick>
 800119a:	4605      	mov	r5, r0

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800119c:	6823      	ldr	r3, [r4, #0]
 800119e:	009b      	lsls	r3, r3, #2
 80011a0:	f140 80c4 	bpl.w	800132c <HAL_RCCEx_PeriphCLKConfig+0x500>
        /* return in case of Timeout detected */        
        return HAL_TIMEOUT;
      }
    }
  }
  return HAL_OK;
 80011a4:	2000      	movs	r0, #0
 80011a6:	e009      	b.n	80011bc <HAL_RCCEx_PeriphCLKConfig+0x390>
      plli2sused = 1; 
 80011a8:	2601      	movs	r6, #1
 80011aa:	e67b      	b.n	8000ea4 <HAL_RCCEx_PeriphCLKConfig+0x78>
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80011ac:	f7ff fa44 	bl	8000638 <HAL_GetTick>
 80011b0:	eba0 0008 	sub.w	r0, r0, r8
 80011b4:	2864      	cmp	r0, #100	; 0x64
 80011b6:	f67f ae8d 	bls.w	8000ed4 <HAL_RCCEx_PeriphCLKConfig+0xa8>
        return HAL_TIMEOUT;
 80011ba:	2003      	movs	r0, #3
}
 80011bc:	b003      	add	sp, #12
 80011be:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80011c2:	6b22      	ldr	r2, [r4, #48]	; 0x30
 80011c4:	f402 7240 	and.w	r2, r2, #768	; 0x300
 80011c8:	4293      	cmp	r3, r2
 80011ca:	f43f ae8d 	beq.w	8000ee8 <HAL_RCCEx_PeriphCLKConfig+0xbc>
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80011ce:	6f3b      	ldr	r3, [r7, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_FORCE();
 80011d0:	6f3a      	ldr	r2, [r7, #112]	; 0x70
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80011d2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
      __HAL_RCC_BACKUPRESET_FORCE();
 80011d6:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80011da:	673a      	str	r2, [r7, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 80011dc:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 80011de:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80011e2:	673a      	str	r2, [r7, #112]	; 0x70
      RCC->BDCR = tmpreg0;
 80011e4:	673b      	str	r3, [r7, #112]	; 0x70
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80011e6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80011e8:	07d8      	lsls	r0, r3, #31
 80011ea:	f57f ae7d 	bpl.w	8000ee8 <HAL_RCCEx_PeriphCLKConfig+0xbc>
        tickstart = HAL_GetTick();
 80011ee:	f7ff fa23 	bl	8000638 <HAL_GetTick>
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80011f2:	f241 3988 	movw	r9, #5000	; 0x1388
        tickstart = HAL_GetTick();
 80011f6:	4680      	mov	r8, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80011f8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80011fa:	0799      	lsls	r1, r3, #30
 80011fc:	f53f ae74 	bmi.w	8000ee8 <HAL_RCCEx_PeriphCLKConfig+0xbc>
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001200:	f7ff fa1a 	bl	8000638 <HAL_GetTick>
 8001204:	eba0 0008 	sub.w	r0, r0, r8
 8001208:	4548      	cmp	r0, r9
 800120a:	d9f5      	bls.n	80011f8 <HAL_RCCEx_PeriphCLKConfig+0x3cc>
 800120c:	e7d5      	b.n	80011ba <HAL_RCCEx_PeriphCLKConfig+0x38e>
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800120e:	6891      	ldr	r1, [r2, #8]
 8001210:	f421 11f8 	bic.w	r1, r1, #2031616	; 0x1f0000
 8001214:	e678      	b.n	8000f08 <HAL_RCCEx_PeriphCLKConfig+0xdc>
    __HAL_RCC_PLLI2S_DISABLE();  
 8001216:	4e49      	ldr	r6, [pc, #292]	; (800133c <HAL_RCCEx_PeriphCLKConfig+0x510>)
 8001218:	6833      	ldr	r3, [r6, #0]
 800121a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800121e:	6033      	str	r3, [r6, #0]
    tickstart = HAL_GetTick();
 8001220:	f7ff fa0a 	bl	8000638 <HAL_GetTick>
 8001224:	4607      	mov	r7, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8001226:	6833      	ldr	r3, [r6, #0]
 8001228:	011b      	lsls	r3, r3, #4
 800122a:	d472      	bmi.n	8001312 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 800122c:	6822      	ldr	r2, [r4, #0]
 800122e:	07d7      	lsls	r7, r2, #31
 8001230:	d512      	bpl.n	8001258 <HAL_RCCEx_PeriphCLKConfig+0x42c>
 8001232:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8001234:	b983      	cbnz	r3, 8001258 <HAL_RCCEx_PeriphCLKConfig+0x42c>
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8001236:	f8d6 3084 	ldr.w	r3, [r6, #132]	; 0x84
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800123a:	f8d6 1084 	ldr.w	r1, [r6, #132]	; 0x84
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 800123e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001242:	f001 6170 	and.w	r1, r1, #251658240	; 0xf000000
 8001246:	430b      	orrs	r3, r1
 8001248:	6861      	ldr	r1, [r4, #4]
 800124a:	ea43 1381 	orr.w	r3, r3, r1, lsl #6
 800124e:	68a1      	ldr	r1, [r4, #8]
 8001250:	ea43 7301 	orr.w	r3, r3, r1, lsl #28
 8001254:	f8c6 3084 	str.w	r3, [r6, #132]	; 0x84
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8001258:	0316      	lsls	r6, r2, #12
 800125a:	d503      	bpl.n	8001264 <HAL_RCCEx_PeriphCLKConfig+0x438>
 800125c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800125e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001262:	d005      	beq.n	8001270 <HAL_RCCEx_PeriphCLKConfig+0x444>
 8001264:	02d0      	lsls	r0, r2, #11
 8001266:	d51e      	bpl.n	80012a6 <HAL_RCCEx_PeriphCLKConfig+0x47a>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S))) 
 8001268:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800126a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800126e:	d11a      	bne.n	80012a6 <HAL_RCCEx_PeriphCLKConfig+0x47a>
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8001270:	4932      	ldr	r1, [pc, #200]	; (800133c <HAL_RCCEx_PeriphCLKConfig+0x510>)
 8001272:	f8d1 3084 	ldr.w	r3, [r1, #132]	; 0x84
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8001276:	f8d1 0084 	ldr.w	r0, [r1, #132]	; 0x84
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 800127a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800127e:	f000 40e0 	and.w	r0, r0, #1879048192	; 0x70000000
 8001282:	4303      	orrs	r3, r0
 8001284:	6860      	ldr	r0, [r4, #4]
 8001286:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 800128a:	68e0      	ldr	r0, [r4, #12]
 800128c:	ea43 6300 	orr.w	r3, r3, r0, lsl #24
 8001290:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);   
 8001294:	f8d1 008c 	ldr.w	r0, [r1, #140]	; 0x8c
 8001298:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800129a:	f020 001f 	bic.w	r0, r0, #31
 800129e:	3b01      	subs	r3, #1
 80012a0:	4303      	orrs	r3, r0
 80012a2:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80012a6:	01d1      	lsls	r1, r2, #7
 80012a8:	d511      	bpl.n	80012ce <HAL_RCCEx_PeriphCLKConfig+0x4a2>
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80012aa:	4924      	ldr	r1, [pc, #144]	; (800133c <HAL_RCCEx_PeriphCLKConfig+0x510>)
 80012ac:	f8d1 3084 	ldr.w	r3, [r1, #132]	; 0x84
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80012b0:	f8d1 0084 	ldr.w	r0, [r1, #132]	; 0x84
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 80012b4:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
 80012b8:	f000 40e0 	and.w	r0, r0, #1879048192	; 0x70000000
 80012bc:	4303      	orrs	r3, r0
 80012be:	6860      	ldr	r0, [r4, #4]
 80012c0:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 80012c4:	6920      	ldr	r0, [r4, #16]
 80012c6:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 80012ca:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80012ce:	0192      	lsls	r2, r2, #6
 80012d0:	d50d      	bpl.n	80012ee <HAL_RCCEx_PeriphCLKConfig+0x4c2>
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80012d2:	6923      	ldr	r3, [r4, #16]
 80012d4:	6862      	ldr	r2, [r4, #4]
 80012d6:	041b      	lsls	r3, r3, #16
 80012d8:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 80012dc:	68e2      	ldr	r2, [r4, #12]
 80012de:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 80012e2:	68a2      	ldr	r2, [r4, #8]
 80012e4:	ea43 7302 	orr.w	r3, r3, r2, lsl #28
 80012e8:	4a14      	ldr	r2, [pc, #80]	; (800133c <HAL_RCCEx_PeriphCLKConfig+0x510>)
 80012ea:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
    __HAL_RCC_PLLI2S_ENABLE();
 80012ee:	4e13      	ldr	r6, [pc, #76]	; (800133c <HAL_RCCEx_PeriphCLKConfig+0x510>)
 80012f0:	6833      	ldr	r3, [r6, #0]
 80012f2:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80012f6:	6033      	str	r3, [r6, #0]
    tickstart = HAL_GetTick();
 80012f8:	f7ff f99e 	bl	8000638 <HAL_GetTick>
 80012fc:	4607      	mov	r7, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80012fe:	6833      	ldr	r3, [r6, #0]
 8001300:	011b      	lsls	r3, r3, #4
 8001302:	f53f aed7 	bmi.w	80010b4 <HAL_RCCEx_PeriphCLKConfig+0x288>
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8001306:	f7ff f997 	bl	8000638 <HAL_GetTick>
 800130a:	1bc0      	subs	r0, r0, r7
 800130c:	2864      	cmp	r0, #100	; 0x64
 800130e:	d9f6      	bls.n	80012fe <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8001310:	e753      	b.n	80011ba <HAL_RCCEx_PeriphCLKConfig+0x38e>
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8001312:	f7ff f991 	bl	8000638 <HAL_GetTick>
 8001316:	1bc0      	subs	r0, r0, r7
 8001318:	2864      	cmp	r0, #100	; 0x64
 800131a:	d984      	bls.n	8001226 <HAL_RCCEx_PeriphCLKConfig+0x3fa>
 800131c:	e74d      	b.n	80011ba <HAL_RCCEx_PeriphCLKConfig+0x38e>
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800131e:	f7ff f98b 	bl	8000638 <HAL_GetTick>
 8001322:	1b80      	subs	r0, r0, r6
 8001324:	2864      	cmp	r0, #100	; 0x64
 8001326:	f67f aecf 	bls.w	80010c8 <HAL_RCCEx_PeriphCLKConfig+0x29c>
 800132a:	e746      	b.n	80011ba <HAL_RCCEx_PeriphCLKConfig+0x38e>
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800132c:	f7ff f984 	bl	8000638 <HAL_GetTick>
 8001330:	1b40      	subs	r0, r0, r5
 8001332:	2864      	cmp	r0, #100	; 0x64
 8001334:	f67f af32 	bls.w	800119c <HAL_RCCEx_PeriphCLKConfig+0x370>
 8001338:	e73f      	b.n	80011ba <HAL_RCCEx_PeriphCLKConfig+0x38e>
 800133a:	bf00      	nop
 800133c:	40023800 	.word	0x40023800

08001340 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8001340:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001344:	9d06      	ldr	r5, [sp, #24]
 8001346:	4604      	mov	r4, r0
 8001348:	460f      	mov	r7, r1
 800134a:	4616      	mov	r6, r2
 800134c:	4698      	mov	r8, r3
  /* Wait until flag is set */
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800134e:	6821      	ldr	r1, [r4, #0]
 8001350:	69ca      	ldr	r2, [r1, #28]
 8001352:	ea37 0302 	bics.w	r3, r7, r2
 8001356:	bf0c      	ite	eq
 8001358:	2201      	moveq	r2, #1
 800135a:	2200      	movne	r2, #0
 800135c:	42b2      	cmp	r2, r6
 800135e:	d002      	beq.n	8001366 <UART_WaitOnFlagUntilTimeout+0x26>
        __HAL_UNLOCK(huart);
        return HAL_TIMEOUT;
      }
    }
  }
  return HAL_OK;
 8001360:	2000      	movs	r0, #0
}
 8001362:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if(Timeout != HAL_MAX_DELAY)
 8001366:	1c6b      	adds	r3, r5, #1
 8001368:	d0f2      	beq.n	8001350 <UART_WaitOnFlagUntilTimeout+0x10>
      if((Timeout == 0U)||((HAL_GetTick()-Tickstart) >=  Timeout))
 800136a:	b99d      	cbnz	r5, 8001394 <UART_WaitOnFlagUntilTimeout+0x54>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800136c:	6823      	ldr	r3, [r4, #0]
        __HAL_UNLOCK(huart);
 800136e:	2003      	movs	r0, #3
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8001370:	681a      	ldr	r2, [r3, #0]
 8001372:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8001376:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001378:	689a      	ldr	r2, [r3, #8]
 800137a:	f022 0201 	bic.w	r2, r2, #1
 800137e:	609a      	str	r2, [r3, #8]
        huart->gState = HAL_UART_STATE_READY;
 8001380:	2320      	movs	r3, #32
 8001382:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69
        huart->RxState = HAL_UART_STATE_READY;
 8001386:	f884 306a 	strb.w	r3, [r4, #106]	; 0x6a
        __HAL_UNLOCK(huart);
 800138a:	2300      	movs	r3, #0
 800138c:	f884 3068 	strb.w	r3, [r4, #104]	; 0x68
 8001390:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if((Timeout == 0U)||((HAL_GetTick()-Tickstart) >=  Timeout))
 8001394:	f7ff f950 	bl	8000638 <HAL_GetTick>
 8001398:	eba0 0008 	sub.w	r0, r0, r8
 800139c:	4285      	cmp	r5, r0
 800139e:	d8d6      	bhi.n	800134e <UART_WaitOnFlagUntilTimeout+0xe>
 80013a0:	e7e4      	b.n	800136c <UART_WaitOnFlagUntilTimeout+0x2c>

080013a2 <HAL_UART_Transmit>:
{
 80013a2:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 80013a6:	461f      	mov	r7, r3
  if(huart->gState == HAL_UART_STATE_READY)
 80013a8:	f890 3069 	ldrb.w	r3, [r0, #105]	; 0x69
{
 80013ac:	4604      	mov	r4, r0
 80013ae:	460d      	mov	r5, r1
  if(huart->gState == HAL_UART_STATE_READY)
 80013b0:	2b20      	cmp	r3, #32
{
 80013b2:	4690      	mov	r8, r2
  if(huart->gState == HAL_UART_STATE_READY)
 80013b4:	d14c      	bne.n	8001450 <HAL_UART_Transmit+0xae>
    if((pData == NULL ) || (Size == 0U))
 80013b6:	2900      	cmp	r1, #0
 80013b8:	d048      	beq.n	800144c <HAL_UART_Transmit+0xaa>
 80013ba:	2a00      	cmp	r2, #0
 80013bc:	d046      	beq.n	800144c <HAL_UART_Transmit+0xaa>
    __HAL_LOCK(huart);
 80013be:	f890 3068 	ldrb.w	r3, [r0, #104]	; 0x68
 80013c2:	2b01      	cmp	r3, #1
 80013c4:	d044      	beq.n	8001450 <HAL_UART_Transmit+0xae>
 80013c6:	2301      	movs	r3, #1
 80013c8:	f880 3068 	strb.w	r3, [r0, #104]	; 0x68
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80013cc:	2300      	movs	r3, #0
 80013ce:	66c3      	str	r3, [r0, #108]	; 0x6c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80013d0:	2321      	movs	r3, #33	; 0x21
 80013d2:	f880 3069 	strb.w	r3, [r0, #105]	; 0x69
    tickstart = HAL_GetTick();
 80013d6:	f7ff f92f 	bl	8000638 <HAL_GetTick>
 80013da:	4606      	mov	r6, r0
    huart->TxXferSize = Size;
 80013dc:	f8a4 8050 	strh.w	r8, [r4, #80]	; 0x50
    huart->TxXferCount = Size;
 80013e0:	f8a4 8052 	strh.w	r8, [r4, #82]	; 0x52
    while(huart->TxXferCount > 0U)
 80013e4:	f8b4 2052 	ldrh.w	r2, [r4, #82]	; 0x52
 80013e8:	b292      	uxth	r2, r2
 80013ea:	b962      	cbnz	r2, 8001406 <HAL_UART_Transmit+0x64>
    if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80013ec:	9700      	str	r7, [sp, #0]
 80013ee:	4633      	mov	r3, r6
 80013f0:	2140      	movs	r1, #64	; 0x40
 80013f2:	4620      	mov	r0, r4
 80013f4:	f7ff ffa4 	bl	8001340 <UART_WaitOnFlagUntilTimeout>
 80013f8:	b998      	cbnz	r0, 8001422 <HAL_UART_Transmit+0x80>
    huart->gState = HAL_UART_STATE_READY;
 80013fa:	2320      	movs	r3, #32
    __HAL_UNLOCK(huart);
 80013fc:	f884 0068 	strb.w	r0, [r4, #104]	; 0x68
    huart->gState = HAL_UART_STATE_READY;
 8001400:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69
    return HAL_OK;
 8001404:	e00e      	b.n	8001424 <HAL_UART_Transmit+0x82>
      huart->TxXferCount--;
 8001406:	f8b4 3052 	ldrh.w	r3, [r4, #82]	; 0x52
      if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800140a:	2200      	movs	r2, #0
 800140c:	9700      	str	r7, [sp, #0]
 800140e:	2180      	movs	r1, #128	; 0x80
      huart->TxXferCount--;
 8001410:	3b01      	subs	r3, #1
      if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001412:	4620      	mov	r0, r4
      huart->TxXferCount--;
 8001414:	b29b      	uxth	r3, r3
 8001416:	f8a4 3052 	strh.w	r3, [r4, #82]	; 0x52
      if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800141a:	4633      	mov	r3, r6
 800141c:	f7ff ff90 	bl	8001340 <UART_WaitOnFlagUntilTimeout>
 8001420:	b118      	cbz	r0, 800142a <HAL_UART_Transmit+0x88>
        return HAL_TIMEOUT;
 8001422:	2003      	movs	r0, #3
}
 8001424:	b002      	add	sp, #8
 8001426:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800142a:	68a3      	ldr	r3, [r4, #8]
 800142c:	6822      	ldr	r2, [r4, #0]
 800142e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001432:	d107      	bne.n	8001444 <HAL_UART_Transmit+0xa2>
 8001434:	6923      	ldr	r3, [r4, #16]
 8001436:	b92b      	cbnz	r3, 8001444 <HAL_UART_Transmit+0xa2>
        huart->Instance->TDR = (*tmp & (uint16_t)0x01FFU);
 8001438:	f835 3b02 	ldrh.w	r3, [r5], #2
 800143c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001440:	6293      	str	r3, [r2, #40]	; 0x28
        pData += 2;
 8001442:	e7cf      	b.n	80013e4 <HAL_UART_Transmit+0x42>
        huart->Instance->TDR = (*pData++ & (uint8_t)0xFFU);
 8001444:	782b      	ldrb	r3, [r5, #0]
 8001446:	3501      	adds	r5, #1
 8001448:	6293      	str	r3, [r2, #40]	; 0x28
 800144a:	e7cb      	b.n	80013e4 <HAL_UART_Transmit+0x42>
      return  HAL_ERROR;
 800144c:	2001      	movs	r0, #1
 800144e:	e7e9      	b.n	8001424 <HAL_UART_Transmit+0x82>
    return HAL_BUSY;
 8001450:	2002      	movs	r0, #2
 8001452:	e7e7      	b.n	8001424 <HAL_UART_Transmit+0x82>

08001454 <HAL_UART_Receive>:
{
 8001454:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8001458:	4698      	mov	r8, r3
  if(huart->RxState == HAL_UART_STATE_READY)
 800145a:	f890 306a 	ldrb.w	r3, [r0, #106]	; 0x6a
{
 800145e:	4604      	mov	r4, r0
 8001460:	460d      	mov	r5, r1
  if(huart->RxState == HAL_UART_STATE_READY)
 8001462:	2b20      	cmp	r3, #32
{
 8001464:	4616      	mov	r6, r2
  if(huart->RxState == HAL_UART_STATE_READY)
 8001466:	d161      	bne.n	800152c <HAL_UART_Receive+0xd8>
    if((pData == NULL ) || (Size == 0U))
 8001468:	2900      	cmp	r1, #0
 800146a:	d05d      	beq.n	8001528 <HAL_UART_Receive+0xd4>
 800146c:	2a00      	cmp	r2, #0
 800146e:	d05b      	beq.n	8001528 <HAL_UART_Receive+0xd4>
    __HAL_LOCK(huart);
 8001470:	f890 3068 	ldrb.w	r3, [r0, #104]	; 0x68
 8001474:	2b01      	cmp	r3, #1
 8001476:	d059      	beq.n	800152c <HAL_UART_Receive+0xd8>
 8001478:	2301      	movs	r3, #1
 800147a:	f880 3068 	strb.w	r3, [r0, #104]	; 0x68
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800147e:	2300      	movs	r3, #0
 8001480:	66c3      	str	r3, [r0, #108]	; 0x6c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8001482:	2322      	movs	r3, #34	; 0x22
 8001484:	f880 306a 	strb.w	r3, [r0, #106]	; 0x6a
    tickstart = HAL_GetTick();
 8001488:	f7ff f8d6 	bl	8000638 <HAL_GetTick>
    UART_MASK_COMPUTATION(huart);
 800148c:	68a3      	ldr	r3, [r4, #8]
    tickstart = HAL_GetTick();
 800148e:	4607      	mov	r7, r0
    huart->RxXferSize = Size;
 8001490:	f8a4 6058 	strh.w	r6, [r4, #88]	; 0x58
    UART_MASK_COMPUTATION(huart);
 8001494:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
    huart->RxXferCount = Size;
 8001498:	f8a4 605a 	strh.w	r6, [r4, #90]	; 0x5a
    UART_MASK_COMPUTATION(huart);
 800149c:	d115      	bne.n	80014ca <HAL_UART_Receive+0x76>
 800149e:	6923      	ldr	r3, [r4, #16]
 80014a0:	b98b      	cbnz	r3, 80014c6 <HAL_UART_Receive+0x72>
 80014a2:	f240 13ff 	movw	r3, #511	; 0x1ff
 80014a6:	f8a4 305c 	strh.w	r3, [r4, #92]	; 0x5c
    uhMask = huart->Mask;
 80014aa:	f8b4 605c 	ldrh.w	r6, [r4, #92]	; 0x5c
    while(huart->RxXferCount > 0U)
 80014ae:	f8b4 005a 	ldrh.w	r0, [r4, #90]	; 0x5a
 80014b2:	b280      	uxth	r0, r0
 80014b4:	b9b8      	cbnz	r0, 80014e6 <HAL_UART_Receive+0x92>
    huart->RxState = HAL_UART_STATE_READY;
 80014b6:	2320      	movs	r3, #32
    __HAL_UNLOCK(huart);
 80014b8:	f884 0068 	strb.w	r0, [r4, #104]	; 0x68
    huart->RxState = HAL_UART_STATE_READY;
 80014bc:	f884 306a 	strb.w	r3, [r4, #106]	; 0x6a
}
 80014c0:	b002      	add	sp, #8
 80014c2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    UART_MASK_COMPUTATION(huart);
 80014c6:	23ff      	movs	r3, #255	; 0xff
 80014c8:	e7ed      	b.n	80014a6 <HAL_UART_Receive+0x52>
 80014ca:	b923      	cbnz	r3, 80014d6 <HAL_UART_Receive+0x82>
 80014cc:	6923      	ldr	r3, [r4, #16]
 80014ce:	2b00      	cmp	r3, #0
 80014d0:	d0f9      	beq.n	80014c6 <HAL_UART_Receive+0x72>
 80014d2:	237f      	movs	r3, #127	; 0x7f
 80014d4:	e7e7      	b.n	80014a6 <HAL_UART_Receive+0x52>
 80014d6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80014da:	d1e6      	bne.n	80014aa <HAL_UART_Receive+0x56>
 80014dc:	6923      	ldr	r3, [r4, #16]
 80014de:	2b00      	cmp	r3, #0
 80014e0:	d0f7      	beq.n	80014d2 <HAL_UART_Receive+0x7e>
 80014e2:	233f      	movs	r3, #63	; 0x3f
 80014e4:	e7df      	b.n	80014a6 <HAL_UART_Receive+0x52>
      huart->RxXferCount--;
 80014e6:	f8b4 305a 	ldrh.w	r3, [r4, #90]	; 0x5a
      if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80014ea:	2200      	movs	r2, #0
 80014ec:	f8cd 8000 	str.w	r8, [sp]
 80014f0:	2120      	movs	r1, #32
      huart->RxXferCount--;
 80014f2:	3b01      	subs	r3, #1
      if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80014f4:	4620      	mov	r0, r4
      huart->RxXferCount--;
 80014f6:	b29b      	uxth	r3, r3
 80014f8:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
      if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80014fc:	463b      	mov	r3, r7
 80014fe:	f7ff ff1f 	bl	8001340 <UART_WaitOnFlagUntilTimeout>
 8001502:	b9a8      	cbnz	r0, 8001530 <HAL_UART_Receive+0xdc>
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001504:	68a3      	ldr	r3, [r4, #8]
 8001506:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800150a:	6823      	ldr	r3, [r4, #0]
 800150c:	d106      	bne.n	800151c <HAL_UART_Receive+0xc8>
 800150e:	6922      	ldr	r2, [r4, #16]
 8001510:	b922      	cbnz	r2, 800151c <HAL_UART_Receive+0xc8>
        *tmp = (uint16_t)(huart->Instance->RDR & uhMask);
 8001512:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001514:	4033      	ands	r3, r6
 8001516:	f825 3b02 	strh.w	r3, [r5], #2
        pData +=2U;
 800151a:	e7c8      	b.n	80014ae <HAL_UART_Receive+0x5a>
        *pData++ = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 800151c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800151e:	3501      	adds	r5, #1
 8001520:	4033      	ands	r3, r6
 8001522:	f805 3c01 	strb.w	r3, [r5, #-1]
 8001526:	e7c2      	b.n	80014ae <HAL_UART_Receive+0x5a>
      return  HAL_ERROR;
 8001528:	2001      	movs	r0, #1
 800152a:	e7c9      	b.n	80014c0 <HAL_UART_Receive+0x6c>
    return HAL_BUSY;
 800152c:	2002      	movs	r0, #2
 800152e:	e7c7      	b.n	80014c0 <HAL_UART_Receive+0x6c>
        return HAL_TIMEOUT;
 8001530:	2003      	movs	r0, #3
 8001532:	e7c5      	b.n	80014c0 <HAL_UART_Receive+0x6c>

08001534 <HAL_UART_ErrorCallback>:
  * @brief UART error callbacks
  * @param huart uart handle
  * @retval None
  */
 __weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8001534:	4770      	bx	lr
	...

08001538 <UART_SetConfig>:
  * @brief Configure the UART peripheral
  * @param huart uart handle
  * @retval None
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001538:	b538      	push	{r3, r4, r5, lr}
 800153a:	4604      	mov	r4, r0
   *  set the M bits according to huart->Init.WordLength value
   *  set PCE and PS bits according to huart->Init.Parity value
   *  set TE and RE bits according to huart->Init.Mode value
   *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 800153c:	6805      	ldr	r5, [r0, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800153e:	69c3      	ldr	r3, [r0, #28]
 8001540:	6921      	ldr	r1, [r4, #16]
 8001542:	68a2      	ldr	r2, [r4, #8]
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 8001544:	6828      	ldr	r0, [r5, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8001546:	430a      	orrs	r2, r1
 8001548:	6961      	ldr	r1, [r4, #20]
 800154a:	430a      	orrs	r2, r1
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 800154c:	4993      	ldr	r1, [pc, #588]	; (800179c <UART_SetConfig+0x264>)
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800154e:	431a      	orrs	r2, r3
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 8001550:	4001      	ands	r1, r0
  /* Configure
   * - UART HardWare Flow Control: set CTSE and RTSE bits according
   *   to huart->Init.HwFlowCtl value
   * - one-bit sampling method versus three samples' majority rule according
   *   to huart->Init.OneBitSampling */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl | huart->Init.OneBitSampling ;
 8001552:	6a20      	ldr	r0, [r4, #32]
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 8001554:	430a      	orrs	r2, r1
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001556:	68e1      	ldr	r1, [r4, #12]
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 8001558:	602a      	str	r2, [r5, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800155a:	686a      	ldr	r2, [r5, #4]
 800155c:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 8001560:	430a      	orrs	r2, r1
 8001562:	606a      	str	r2, [r5, #4]
  tmpreg = (uint32_t)huart->Init.HwFlowCtl | huart->Init.OneBitSampling ;
 8001564:	69a2      	ldr	r2, [r4, #24]
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT), tmpreg);
 8001566:	68a9      	ldr	r1, [r5, #8]
  tmpreg = (uint32_t)huart->Init.HwFlowCtl | huart->Init.OneBitSampling ;
 8001568:	4302      	orrs	r2, r0
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT), tmpreg);
 800156a:	f421 6130 	bic.w	r1, r1, #2816	; 0xb00
 800156e:	430a      	orrs	r2, r1
 8001570:	60aa      	str	r2, [r5, #8]

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8001572:	4a8b      	ldr	r2, [pc, #556]	; (80017a0 <UART_SetConfig+0x268>)
 8001574:	4295      	cmp	r5, r2
 8001576:	d119      	bne.n	80015ac <UART_SetConfig+0x74>
 8001578:	f502 3294 	add.w	r2, r2, #75776	; 0x12800
 800157c:	4989      	ldr	r1, [pc, #548]	; (80017a4 <UART_SetConfig+0x26c>)
 800157e:	f8d2 2090 	ldr.w	r2, [r2, #144]	; 0x90
 8001582:	f002 0203 	and.w	r2, r2, #3

  /* Check UART Over Sampling to set Baud Rate Register */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001586:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800158a:	5c8a      	ldrb	r2, [r1, r2]
 800158c:	f040 80b3 	bne.w	80016f6 <UART_SetConfig+0x1be>
  {
    switch (clocksource)
 8001590:	2a08      	cmp	r2, #8
 8001592:	f200 80ad 	bhi.w	80016f0 <UART_SetConfig+0x1b8>
 8001596:	e8df f012 	tbh	[pc, r2, lsl #1]
 800159a:	0026      	.short	0x0026
 800159c:	00e9007b 	.word	0x00e9007b
 80015a0:	00f500ab 	.word	0x00f500ab
 80015a4:	00ab00ab 	.word	0x00ab00ab
 80015a8:	00fb00ab 	.word	0x00fb00ab
  UART_GETCLOCKSOURCE(huart, clocksource);
 80015ac:	4a7e      	ldr	r2, [pc, #504]	; (80017a8 <UART_SetConfig+0x270>)
 80015ae:	4295      	cmp	r5, r2
 80015b0:	d107      	bne.n	80015c2 <UART_SetConfig+0x8a>
 80015b2:	f502 32fa 	add.w	r2, r2, #128000	; 0x1f400
 80015b6:	497d      	ldr	r1, [pc, #500]	; (80017ac <UART_SetConfig+0x274>)
 80015b8:	f8d2 2090 	ldr.w	r2, [r2, #144]	; 0x90
 80015bc:	f002 020c 	and.w	r2, r2, #12
 80015c0:	e7e1      	b.n	8001586 <UART_SetConfig+0x4e>
 80015c2:	4a7b      	ldr	r2, [pc, #492]	; (80017b0 <UART_SetConfig+0x278>)
 80015c4:	4295      	cmp	r5, r2
 80015c6:	d12b      	bne.n	8001620 <UART_SetConfig+0xe8>
 80015c8:	f502 32f8 	add.w	r2, r2, #126976	; 0x1f000
 80015cc:	f8d2 2090 	ldr.w	r2, [r2, #144]	; 0x90
 80015d0:	f002 0230 	and.w	r2, r2, #48	; 0x30
 80015d4:	2a10      	cmp	r2, #16
 80015d6:	f000 80d2 	beq.w	800177e <UART_SetConfig+0x246>
 80015da:	d816      	bhi.n	800160a <UART_SetConfig+0xd2>
 80015dc:	b9da      	cbnz	r2, 8001616 <UART_SetConfig+0xde>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80015de:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80015e2:	f040 809f 	bne.w	8001724 <UART_SetConfig+0x1ec>
    {
    case UART_CLOCKSOURCE_PCLK1:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 80015e6:	f7ff fc01 	bl	8000dec <HAL_RCC_GetPCLK1Freq>
      break;
    case UART_CLOCKSOURCE_PCLK2:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 80015ea:	6861      	ldr	r1, [r4, #4]
 80015ec:	084a      	lsrs	r2, r1, #1
 80015ee:	eb02 0340 	add.w	r3, r2, r0, lsl #1
 80015f2:	fbb3 f3f1 	udiv	r3, r3, r1
 80015f6:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 80015f8:	2000      	movs	r0, #0
    default:
        ret = HAL_ERROR;
      break;
    }

    brrtemp = usartdiv & 0xFFF0U;
 80015fa:	f023 020f 	bic.w	r2, r3, #15
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80015fe:	f3c3 0342 	ubfx	r3, r3, #1, #3
    huart->Instance->BRR = brrtemp;
 8001602:	6821      	ldr	r1, [r4, #0]
 8001604:	4313      	orrs	r3, r2
 8001606:	60cb      	str	r3, [r1, #12]
 8001608:	bd38      	pop	{r3, r4, r5, pc}
  UART_GETCLOCKSOURCE(huart, clocksource);
 800160a:	2a20      	cmp	r2, #32
 800160c:	f000 80ab 	beq.w	8001766 <UART_SetConfig+0x22e>
 8001610:	2a30      	cmp	r2, #48	; 0x30
 8001612:	f000 80ba 	beq.w	800178a <UART_SetConfig+0x252>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001616:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800161a:	d069      	beq.n	80016f0 <UART_SetConfig+0x1b8>
    case UART_CLOCKSOURCE_LSE:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
      break;
      case UART_CLOCKSOURCE_UNDEFINED:
    default:
        ret = HAL_ERROR;
 800161c:	2001      	movs	r0, #1
    }
  }

  return ret;

}
 800161e:	bd38      	pop	{r3, r4, r5, pc}
  UART_GETCLOCKSOURCE(huart, clocksource);
 8001620:	4a64      	ldr	r2, [pc, #400]	; (80017b4 <UART_SetConfig+0x27c>)
 8001622:	4295      	cmp	r5, r2
 8001624:	d10e      	bne.n	8001644 <UART_SetConfig+0x10c>
 8001626:	f502 32f6 	add.w	r2, r2, #125952	; 0x1ec00
 800162a:	f8d2 2090 	ldr.w	r2, [r2, #144]	; 0x90
 800162e:	f002 02c0 	and.w	r2, r2, #192	; 0xc0
 8001632:	2a40      	cmp	r2, #64	; 0x40
 8001634:	f000 80a3 	beq.w	800177e <UART_SetConfig+0x246>
 8001638:	d9d0      	bls.n	80015dc <UART_SetConfig+0xa4>
 800163a:	2a80      	cmp	r2, #128	; 0x80
 800163c:	f000 8093 	beq.w	8001766 <UART_SetConfig+0x22e>
 8001640:	2ac0      	cmp	r2, #192	; 0xc0
 8001642:	e7e6      	b.n	8001612 <UART_SetConfig+0xda>
 8001644:	4a5c      	ldr	r2, [pc, #368]	; (80017b8 <UART_SetConfig+0x280>)
 8001646:	4295      	cmp	r5, r2
 8001648:	d110      	bne.n	800166c <UART_SetConfig+0x134>
 800164a:	f502 32f4 	add.w	r2, r2, #124928	; 0x1e800
 800164e:	f8d2 2090 	ldr.w	r2, [r2, #144]	; 0x90
 8001652:	f402 7240 	and.w	r2, r2, #768	; 0x300
 8001656:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
 800165a:	f000 8090 	beq.w	800177e <UART_SetConfig+0x246>
 800165e:	d9bd      	bls.n	80015dc <UART_SetConfig+0xa4>
 8001660:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
 8001664:	d07f      	beq.n	8001766 <UART_SetConfig+0x22e>
 8001666:	f5b2 7f40 	cmp.w	r2, #768	; 0x300
 800166a:	e7d2      	b.n	8001612 <UART_SetConfig+0xda>
 800166c:	4a53      	ldr	r2, [pc, #332]	; (80017bc <UART_SetConfig+0x284>)
 800166e:	4295      	cmp	r5, r2
 8001670:	d117      	bne.n	80016a2 <UART_SetConfig+0x16a>
 8001672:	f502 3292 	add.w	r2, r2, #74752	; 0x12400
 8001676:	f8d2 2090 	ldr.w	r2, [r2, #144]	; 0x90
 800167a:	f402 6240 	and.w	r2, r2, #3072	; 0xc00
 800167e:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 8001682:	d07c      	beq.n	800177e <UART_SetConfig+0x246>
 8001684:	d807      	bhi.n	8001696 <UART_SetConfig+0x15e>
 8001686:	2a00      	cmp	r2, #0
 8001688:	d1c5      	bne.n	8001616 <UART_SetConfig+0xde>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800168a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800168e:	d154      	bne.n	800173a <UART_SetConfig+0x202>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8001690:	f7ff fbbc 	bl	8000e0c <HAL_RCC_GetPCLK2Freq>
 8001694:	e7a9      	b.n	80015ea <UART_SetConfig+0xb2>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8001696:	f5b2 6f00 	cmp.w	r2, #2048	; 0x800
 800169a:	d064      	beq.n	8001766 <UART_SetConfig+0x22e>
 800169c:	f5b2 6f40 	cmp.w	r2, #3072	; 0xc00
 80016a0:	e7b7      	b.n	8001612 <UART_SetConfig+0xda>
 80016a2:	4a47      	ldr	r2, [pc, #284]	; (80017c0 <UART_SetConfig+0x288>)
 80016a4:	4295      	cmp	r5, r2
 80016a6:	d10f      	bne.n	80016c8 <UART_SetConfig+0x190>
 80016a8:	f502 32e0 	add.w	r2, r2, #114688	; 0x1c000
 80016ac:	f8d2 2090 	ldr.w	r2, [r2, #144]	; 0x90
 80016b0:	f402 5240 	and.w	r2, r2, #12288	; 0x3000
 80016b4:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
 80016b8:	d061      	beq.n	800177e <UART_SetConfig+0x246>
 80016ba:	d98f      	bls.n	80015dc <UART_SetConfig+0xa4>
 80016bc:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 80016c0:	d051      	beq.n	8001766 <UART_SetConfig+0x22e>
 80016c2:	f5b2 5f40 	cmp.w	r2, #12288	; 0x3000
 80016c6:	e7a4      	b.n	8001612 <UART_SetConfig+0xda>
 80016c8:	4a3e      	ldr	r2, [pc, #248]	; (80017c4 <UART_SetConfig+0x28c>)
 80016ca:	4295      	cmp	r5, r2
 80016cc:	d1a3      	bne.n	8001616 <UART_SetConfig+0xde>
 80016ce:	f502 32de 	add.w	r2, r2, #113664	; 0x1bc00
 80016d2:	f8d2 2090 	ldr.w	r2, [r2, #144]	; 0x90
 80016d6:	f402 4240 	and.w	r2, r2, #49152	; 0xc000
 80016da:	f5b2 4f80 	cmp.w	r2, #16384	; 0x4000
 80016de:	d04e      	beq.n	800177e <UART_SetConfig+0x246>
 80016e0:	f67f af7c 	bls.w	80015dc <UART_SetConfig+0xa4>
 80016e4:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 80016e8:	d03d      	beq.n	8001766 <UART_SetConfig+0x22e>
 80016ea:	f5b2 4f40 	cmp.w	r2, #49152	; 0xc000
 80016ee:	e790      	b.n	8001612 <UART_SetConfig+0xda>
        ret = HAL_ERROR;
 80016f0:	2001      	movs	r0, #1
  uint16_t usartdiv                   = 0x0000U;
 80016f2:	2300      	movs	r3, #0
 80016f4:	e781      	b.n	80015fa <UART_SetConfig+0xc2>
    switch (clocksource)
 80016f6:	2a08      	cmp	r2, #8
 80016f8:	d890      	bhi.n	800161c <UART_SetConfig+0xe4>
 80016fa:	a301      	add	r3, pc, #4	; (adr r3, 8001700 <UART_SetConfig+0x1c8>)
 80016fc:	f853 f022 	ldr.w	pc, [r3, r2, lsl #2]
 8001700:	08001725 	.word	0x08001725
 8001704:	0800173b 	.word	0x0800173b
 8001708:	08001741 	.word	0x08001741
 800170c:	0800161d 	.word	0x0800161d
 8001710:	08001757 	.word	0x08001757
 8001714:	0800161d 	.word	0x0800161d
 8001718:	0800161d 	.word	0x0800161d
 800171c:	0800161d 	.word	0x0800161d
 8001720:	0800175d 	.word	0x0800175d
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8001724:	f7ff fb62 	bl	8000dec <HAL_RCC_GetPCLK1Freq>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8001728:	6863      	ldr	r3, [r4, #4]
 800172a:	eb00 0053 	add.w	r0, r0, r3, lsr #1
 800172e:	fbb0 f0f3 	udiv	r0, r0, r3
 8001732:	b280      	uxth	r0, r0
 8001734:	60e8      	str	r0, [r5, #12]
  HAL_StatusTypeDef ret               = HAL_OK;
 8001736:	2000      	movs	r0, #0
      break;
 8001738:	bd38      	pop	{r3, r4, r5, pc}
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 800173a:	f7ff fb67 	bl	8000e0c <HAL_RCC_GetPCLK2Freq>
 800173e:	e7f3      	b.n	8001728 <UART_SetConfig+0x1f0>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8001740:	6862      	ldr	r2, [r4, #4]
 8001742:	0853      	lsrs	r3, r2, #1
 8001744:	f503 0374 	add.w	r3, r3, #15990784	; 0xf40000
 8001748:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 800174c:	fbb3 f3f2 	udiv	r3, r3, r2
 8001750:	b29b      	uxth	r3, r3
 8001752:	60eb      	str	r3, [r5, #12]
 8001754:	e7ef      	b.n	8001736 <UART_SetConfig+0x1fe>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8001756:	f7ff fa77 	bl	8000c48 <HAL_RCC_GetSysClockFreq>
 800175a:	e7e5      	b.n	8001728 <UART_SetConfig+0x1f0>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 800175c:	6862      	ldr	r2, [r4, #4]
 800175e:	0853      	lsrs	r3, r2, #1
 8001760:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8001764:	e7f2      	b.n	800174c <UART_SetConfig+0x214>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001766:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800176a:	d1e9      	bne.n	8001740 <UART_SetConfig+0x208>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 800176c:	6860      	ldr	r0, [r4, #4]
 800176e:	0843      	lsrs	r3, r0, #1
 8001770:	f103 73f4 	add.w	r3, r3, #31981568	; 0x1e80000
 8001774:	f503 4390 	add.w	r3, r3, #18432	; 0x4800
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8001778:	fbb3 f3f0 	udiv	r3, r3, r0
 800177c:	e73b      	b.n	80015f6 <UART_SetConfig+0xbe>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800177e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001782:	d1e8      	bne.n	8001756 <UART_SetConfig+0x21e>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8001784:	f7ff fa60 	bl	8000c48 <HAL_RCC_GetSysClockFreq>
 8001788:	e72f      	b.n	80015ea <UART_SetConfig+0xb2>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800178a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800178e:	d1e5      	bne.n	800175c <UART_SetConfig+0x224>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8001790:	6860      	ldr	r0, [r4, #4]
 8001792:	0843      	lsrs	r3, r0, #1
 8001794:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 8001798:	e7ee      	b.n	8001778 <UART_SetConfig+0x240>
 800179a:	bf00      	nop
 800179c:	efff69f3 	.word	0xefff69f3
 80017a0:	40011000 	.word	0x40011000
 80017a4:	08003098 	.word	0x08003098
 80017a8:	40004400 	.word	0x40004400
 80017ac:	0800309c 	.word	0x0800309c
 80017b0:	40004800 	.word	0x40004800
 80017b4:	40004c00 	.word	0x40004c00
 80017b8:	40005000 	.word	0x40005000
 80017bc:	40011400 	.word	0x40011400
 80017c0:	40007800 	.word	0x40007800
 80017c4:	40007c00 	.word	0x40007c00

080017c8 <UART_AdvFeatureConfig>:
{
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80017c8:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80017ca:	07da      	lsls	r2, r3, #31
{
 80017cc:	b510      	push	{r4, lr}
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80017ce:	d506      	bpl.n	80017de <UART_AdvFeatureConfig+0x16>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80017d0:	6801      	ldr	r1, [r0, #0]
 80017d2:	6a84      	ldr	r4, [r0, #40]	; 0x28
 80017d4:	684a      	ldr	r2, [r1, #4]
 80017d6:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 80017da:	4322      	orrs	r2, r4
 80017dc:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX pin active level inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80017de:	079c      	lsls	r4, r3, #30
 80017e0:	d506      	bpl.n	80017f0 <UART_AdvFeatureConfig+0x28>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80017e2:	6801      	ldr	r1, [r0, #0]
 80017e4:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
 80017e6:	684a      	ldr	r2, [r1, #4]
 80017e8:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80017ec:	4322      	orrs	r2, r4
 80017ee:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure data inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80017f0:	0759      	lsls	r1, r3, #29
 80017f2:	d506      	bpl.n	8001802 <UART_AdvFeatureConfig+0x3a>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80017f4:	6801      	ldr	r1, [r0, #0]
 80017f6:	6b04      	ldr	r4, [r0, #48]	; 0x30
 80017f8:	684a      	ldr	r2, [r1, #4]
 80017fa:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80017fe:	4322      	orrs	r2, r4
 8001800:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX/TX pins swap */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8001802:	071a      	lsls	r2, r3, #28
 8001804:	d506      	bpl.n	8001814 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8001806:	6801      	ldr	r1, [r0, #0]
 8001808:	6b44      	ldr	r4, [r0, #52]	; 0x34
 800180a:	684a      	ldr	r2, [r1, #4]
 800180c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001810:	4322      	orrs	r2, r4
 8001812:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8001814:	06dc      	lsls	r4, r3, #27
 8001816:	d506      	bpl.n	8001826 <UART_AdvFeatureConfig+0x5e>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8001818:	6801      	ldr	r1, [r0, #0]
 800181a:	6b84      	ldr	r4, [r0, #56]	; 0x38
 800181c:	688a      	ldr	r2, [r1, #8]
 800181e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001822:	4322      	orrs	r2, r4
 8001824:	608a      	str	r2, [r1, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8001826:	0699      	lsls	r1, r3, #26
 8001828:	d506      	bpl.n	8001838 <UART_AdvFeatureConfig+0x70>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800182a:	6801      	ldr	r1, [r0, #0]
 800182c:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
 800182e:	688a      	ldr	r2, [r1, #8]
 8001830:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001834:	4322      	orrs	r2, r4
 8001836:	608a      	str	r2, [r1, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8001838:	065a      	lsls	r2, r3, #25
 800183a:	d510      	bpl.n	800185e <UART_AdvFeatureConfig+0x96>
  {
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800183c:	6801      	ldr	r1, [r0, #0]
 800183e:	6c04      	ldr	r4, [r0, #64]	; 0x40
 8001840:	684a      	ldr	r2, [r1, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if(huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8001842:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8001846:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
 800184a:	ea42 0204 	orr.w	r2, r2, r4
 800184e:	604a      	str	r2, [r1, #4]
    if(huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8001850:	d105      	bne.n	800185e <UART_AdvFeatureConfig+0x96>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8001852:	684a      	ldr	r2, [r1, #4]
 8001854:	6c44      	ldr	r4, [r0, #68]	; 0x44
 8001856:	f422 02c0 	bic.w	r2, r2, #6291456	; 0x600000
 800185a:	4322      	orrs	r2, r4
 800185c:	604a      	str	r2, [r1, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800185e:	061b      	lsls	r3, r3, #24
 8001860:	d506      	bpl.n	8001870 <UART_AdvFeatureConfig+0xa8>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8001862:	6802      	ldr	r2, [r0, #0]
 8001864:	6c81      	ldr	r1, [r0, #72]	; 0x48
 8001866:	6853      	ldr	r3, [r2, #4]
 8001868:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 800186c:	430b      	orrs	r3, r1
 800186e:	6053      	str	r3, [r2, #4]
 8001870:	bd10      	pop	{r4, pc}

08001872 <UART_CheckIdleState>:
  * @brief Check the UART Idle State
  * @param huart uart handle
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8001872:	b537      	push	{r0, r1, r2, r4, r5, lr}
  uint32_t tickstart = 0U;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001874:	2500      	movs	r5, #0
{
 8001876:	4604      	mov	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001878:	66c5      	str	r5, [r0, #108]	; 0x6c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 800187a:	f7fe fedd 	bl	8000638 <HAL_GetTick>

  /* Check if the Transmitter is enabled */
  if((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800187e:	6822      	ldr	r2, [r4, #0]
  tickstart = HAL_GetTick();
 8001880:	4603      	mov	r3, r0
  if((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8001882:	6812      	ldr	r2, [r2, #0]
 8001884:	0712      	lsls	r2, r2, #28
 8001886:	d409      	bmi.n	800189c <UART_CheckIdleState+0x2a>
      return HAL_TIMEOUT;
    }
  }

  /* Initialize the UART State */
  huart->gState= HAL_UART_STATE_READY;
 8001888:	2320      	movs	r3, #32
  huart->RxState= HAL_UART_STATE_READY;

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800188a:	2000      	movs	r0, #0
  huart->gState= HAL_UART_STATE_READY;
 800188c:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69
  __HAL_UNLOCK(huart);
 8001890:	f884 0068 	strb.w	r0, [r4, #104]	; 0x68
  huart->RxState= HAL_UART_STATE_READY;
 8001894:	f884 306a 	strb.w	r3, [r4, #106]	; 0x6a

  return HAL_OK;
}
 8001898:	b003      	add	sp, #12
 800189a:	bd30      	pop	{r4, r5, pc}
    if(UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800189c:	f06f 427e 	mvn.w	r2, #4261412864	; 0xfe000000
 80018a0:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80018a4:	4620      	mov	r0, r4
 80018a6:	9200      	str	r2, [sp, #0]
 80018a8:	462a      	mov	r2, r5
 80018aa:	f7ff fd49 	bl	8001340 <UART_WaitOnFlagUntilTimeout>
 80018ae:	2800      	cmp	r0, #0
 80018b0:	d0ea      	beq.n	8001888 <UART_CheckIdleState+0x16>
      return HAL_TIMEOUT;
 80018b2:	2003      	movs	r0, #3
 80018b4:	e7f0      	b.n	8001898 <UART_CheckIdleState+0x26>

080018b6 <HAL_UART_Init>:
{
 80018b6:	b510      	push	{r4, lr}
  if(huart == NULL)
 80018b8:	4604      	mov	r4, r0
 80018ba:	b360      	cbz	r0, 8001916 <HAL_UART_Init+0x60>
  if(huart->gState == HAL_UART_STATE_RESET)
 80018bc:	f890 3069 	ldrb.w	r3, [r0, #105]	; 0x69
 80018c0:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80018c4:	b91b      	cbnz	r3, 80018ce <HAL_UART_Init+0x18>
    huart->Lock = HAL_UNLOCKED;
 80018c6:	f880 2068 	strb.w	r2, [r0, #104]	; 0x68
    HAL_UART_MspInit(huart);
 80018ca:	f000 fb7d 	bl	8001fc8 <HAL_UART_MspInit>
  __HAL_UART_DISABLE(huart);
 80018ce:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 80018d0:	2324      	movs	r3, #36	; 0x24
  if (UART_SetConfig(huart) == HAL_ERROR)
 80018d2:	4620      	mov	r0, r4
  huart->gState = HAL_UART_STATE_BUSY;
 80018d4:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69
  __HAL_UART_DISABLE(huart);
 80018d8:	6813      	ldr	r3, [r2, #0]
 80018da:	f023 0301 	bic.w	r3, r3, #1
 80018de:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 80018e0:	f7ff fe2a 	bl	8001538 <UART_SetConfig>
 80018e4:	2801      	cmp	r0, #1
 80018e6:	d016      	beq.n	8001916 <HAL_UART_Init+0x60>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80018e8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80018ea:	b113      	cbz	r3, 80018f2 <HAL_UART_Init+0x3c>
    UART_AdvFeatureConfig(huart);
 80018ec:	4620      	mov	r0, r4
 80018ee:	f7ff ff6b 	bl	80017c8 <UART_AdvFeatureConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80018f2:	6823      	ldr	r3, [r4, #0]
  return (UART_CheckIdleState(huart));
 80018f4:	4620      	mov	r0, r4
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80018f6:	685a      	ldr	r2, [r3, #4]
 80018f8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80018fc:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80018fe:	689a      	ldr	r2, [r3, #8]
 8001900:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001904:	609a      	str	r2, [r3, #8]
  __HAL_UART_ENABLE(huart);
 8001906:	681a      	ldr	r2, [r3, #0]
 8001908:	f042 0201 	orr.w	r2, r2, #1
}
 800190c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  __HAL_UART_ENABLE(huart);
 8001910:	601a      	str	r2, [r3, #0]
  return (UART_CheckIdleState(huart));
 8001912:	f7ff bfae 	b.w	8001872 <UART_CheckIdleState>
}
 8001916:	2001      	movs	r0, #1
 8001918:	bd10      	pop	{r4, pc}

0800191a <OS_HAL_UART_Receive_IT>:
  * @retval HAL status
  */
HAL_StatusTypeDef OS_HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData)
{
  /* Check that a Rx process is not already ongoing */
  if(huart->RxState == HAL_UART_STATE_READY)
 800191a:	f890 306a 	ldrb.w	r3, [r0, #106]	; 0x6a
 800191e:	2b20      	cmp	r3, #32
 8001920:	d13a      	bne.n	8001998 <OS_HAL_UART_Receive_IT+0x7e>
  {
    if((pData == NULL ))
 8001922:	2900      	cmp	r1, #0
 8001924:	d036      	beq.n	8001994 <OS_HAL_UART_Receive_IT+0x7a>
    {
      return HAL_ERROR;
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8001926:	f890 3068 	ldrb.w	r3, [r0, #104]	; 0x68
 800192a:	2b01      	cmp	r3, #1
 800192c:	d034      	beq.n	8001998 <OS_HAL_UART_Receive_IT+0x7e>
 800192e:	2301      	movs	r3, #1

    huart->pRxBuffPtr = pData;
 8001930:	6541      	str	r1, [r0, #84]	; 0x54
    __HAL_LOCK(huart);
 8001932:	f880 3068 	strb.w	r3, [r0, #104]	; 0x68
    //huart->RxXferSize = Size;
    huart->RxXferCount = 0;
 8001936:	2300      	movs	r3, #0
 8001938:	f8a0 305a 	strh.w	r3, [r0, #90]	; 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 800193c:	6883      	ldr	r3, [r0, #8]
 800193e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001942:	d119      	bne.n	8001978 <OS_HAL_UART_Receive_IT+0x5e>
 8001944:	6903      	ldr	r3, [r0, #16]
 8001946:	b9ab      	cbnz	r3, 8001974 <OS_HAL_UART_Receive_IT+0x5a>
 8001948:	f240 13ff 	movw	r3, #511	; 0x1ff
 800194c:	f8a0 305c 	strh.w	r3, [r0, #92]	; 0x5c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001950:	2300      	movs	r3, #0
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8001952:	2222      	movs	r2, #34	; 0x22
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001954:	66c3      	str	r3, [r0, #108]	; 0x6c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8001956:	f880 206a 	strb.w	r2, [r0, #106]	; 0x6a

    /* Process Unlocked */
    __HAL_UNLOCK(huart);

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800195a:	6802      	ldr	r2, [r0, #0]
    __HAL_UNLOCK(huart);
 800195c:	f880 3068 	strb.w	r3, [r0, #104]	; 0x68

    /* Enable the UART Parity Error and Data Register not empty Interrupts */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);

    return HAL_OK;
 8001960:	4618      	mov	r0, r3
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001962:	6891      	ldr	r1, [r2, #8]
 8001964:	f041 0101 	orr.w	r1, r1, #1
 8001968:	6091      	str	r1, [r2, #8]
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 800196a:	6811      	ldr	r1, [r2, #0]
 800196c:	f441 7190 	orr.w	r1, r1, #288	; 0x120
 8001970:	6011      	str	r1, [r2, #0]
    return HAL_OK;
 8001972:	4770      	bx	lr
    UART_MASK_COMPUTATION(huart);
 8001974:	23ff      	movs	r3, #255	; 0xff
 8001976:	e7e9      	b.n	800194c <OS_HAL_UART_Receive_IT+0x32>
 8001978:	b923      	cbnz	r3, 8001984 <OS_HAL_UART_Receive_IT+0x6a>
 800197a:	6903      	ldr	r3, [r0, #16]
 800197c:	2b00      	cmp	r3, #0
 800197e:	d0f9      	beq.n	8001974 <OS_HAL_UART_Receive_IT+0x5a>
 8001980:	237f      	movs	r3, #127	; 0x7f
 8001982:	e7e3      	b.n	800194c <OS_HAL_UART_Receive_IT+0x32>
 8001984:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8001988:	d1e2      	bne.n	8001950 <OS_HAL_UART_Receive_IT+0x36>
 800198a:	6903      	ldr	r3, [r0, #16]
 800198c:	2b00      	cmp	r3, #0
 800198e:	d0f7      	beq.n	8001980 <OS_HAL_UART_Receive_IT+0x66>
 8001990:	233f      	movs	r3, #63	; 0x3f
 8001992:	e7db      	b.n	800194c <OS_HAL_UART_Receive_IT+0x32>
      return HAL_ERROR;
 8001994:	2001      	movs	r0, #1
 8001996:	4770      	bx	lr
  }
  else
  {
    return HAL_BUSY;
 8001998:	2002      	movs	r0, #2
  }
}
 800199a:	4770      	bx	lr

0800199c <OS_UART_Receive_IT>:
    uint16_t* tmp;
    uint16_t uhMask = huart->Mask;
    uint8_t ch = 0;

    /* Check that a Rx process is ongoing */
    if(huart->RxState == HAL_UART_STATE_BUSY_RX)
 800199c:	f890 206a 	ldrb.w	r2, [r0, #106]	; 0x6a
 80019a0:	2a22      	cmp	r2, #34	; 0x22
 80019a2:	6802      	ldr	r2, [r0, #0]
HAL_StatusTypeDef OS_UART_Receive_IT (UART_HandleTypeDef* huart) {
 80019a4:	b570      	push	{r4, r5, r6, lr}
    if(huart->RxState == HAL_UART_STATE_BUSY_RX)
 80019a6:	d11b      	bne.n	80019e0 <OS_UART_Receive_IT+0x44>
    {

    	/* ONLY CAN RECEIVE IN 8 BIT MODE WITHOUT PARITY */
        ch = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 80019a8:	6a55      	ldr	r5, [r2, #36]	; 0x24
 80019aa:	f890 105c 	ldrb.w	r1, [r0, #92]	; 0x5c
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 80019ae:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80019b0:	6d44      	ldr	r4, [r0, #84]	; 0x54
 80019b2:	400a      	ands	r2, r1


        if(ch == '\n')
 80019b4:	4029      	ands	r1, r5
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 80019b6:	1c66      	adds	r6, r4, #1
        if(ch == '\n')
 80019b8:	290a      	cmp	r1, #10
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 80019ba:	6546      	str	r6, [r0, #84]	; 0x54
 80019bc:	7022      	strb	r2, [r4, #0]
        if(ch == '\n')
 80019be:	d10d      	bne.n	80019dc <OS_UART_Receive_IT+0x40>
        {
            /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
            CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80019c0:	6802      	ldr	r2, [r0, #0]
 80019c2:	6811      	ldr	r1, [r2, #0]
 80019c4:	f421 7190 	bic.w	r1, r1, #288	; 0x120
 80019c8:	6011      	str	r1, [r2, #0]

            /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
            CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80019ca:	6891      	ldr	r1, [r2, #8]
 80019cc:	f021 0101 	bic.w	r1, r1, #1
 80019d0:	6091      	str	r1, [r2, #8]

            /* Rx process is completed, restore huart->RxState to Ready */
            huart->RxState = HAL_UART_STATE_READY;
 80019d2:	2220      	movs	r2, #32
 80019d4:	f880 206a 	strb.w	r2, [r0, #106]	; 0x6a

            HAL_UART_RxCpltCallback(huart);
 80019d8:	f000 fab2 	bl	8001f40 <HAL_UART_RxCpltCallback>

            return HAL_OK;
        }

        return HAL_OK;
 80019dc:	2000      	movs	r0, #0
        /* Clear RXNE interrupt flag */
        __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);

        return HAL_BUSY;
    }
}
 80019de:	bd70      	pop	{r4, r5, r6, pc}
        __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80019e0:	6993      	ldr	r3, [r2, #24]
        return HAL_BUSY;
 80019e2:	2002      	movs	r0, #2
        __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80019e4:	f043 0308 	orr.w	r3, r3, #8
 80019e8:	6193      	str	r3, [r2, #24]
        return HAL_BUSY;
 80019ea:	bd70      	pop	{r4, r5, r6, pc}

080019ec <OS_HAL_USART_command_IRQHandler>:
void OS_HAL_USART_command_IRQHandler (UART_HandleTypeDef* huart) {
 80019ec:	b538      	push	{r3, r4, r5, lr}
    uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80019ee:	6803      	ldr	r3, [r0, #0]
void OS_HAL_USART_command_IRQHandler (UART_HandleTypeDef* huart) {
 80019f0:	4604      	mov	r4, r0
    uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80019f2:	69da      	ldr	r2, [r3, #28]
    uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80019f4:	6819      	ldr	r1, [r3, #0]
    if (errorflags == RESET)
 80019f6:	f012 0f0f 	tst.w	r2, #15
    uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80019fa:	689d      	ldr	r5, [r3, #8]
    if (errorflags == RESET)
 80019fc:	d107      	bne.n	8001a0e <OS_HAL_USART_command_IRQHandler+0x22>
        if(((isrflags & USART_ISR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80019fe:	0695      	lsls	r5, r2, #26
 8001a00:	d559      	bpl.n	8001ab6 <OS_HAL_USART_command_IRQHandler+0xca>
 8001a02:	068d      	lsls	r5, r1, #26
 8001a04:	d557      	bpl.n	8001ab6 <OS_HAL_USART_command_IRQHandler+0xca>
}
 8001a06:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
            OS_UART_Receive_IT(huart);
 8001a0a:	f7ff bfc7 	b.w	800199c <OS_UART_Receive_IT>
        && (   ((cr3its & USART_CR3_EIE) != RESET)
 8001a0e:	f015 0001 	ands.w	r0, r5, #1
 8001a12:	d102      	bne.n	8001a1a <OS_HAL_USART_command_IRQHandler+0x2e>
            || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)) )
 8001a14:	f411 7f90 	tst.w	r1, #288	; 0x120
 8001a18:	d04d      	beq.n	8001ab6 <OS_HAL_USART_command_IRQHandler+0xca>
        if(((isrflags & USART_ISR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8001a1a:	07d5      	lsls	r5, r2, #31
 8001a1c:	d507      	bpl.n	8001a2e <OS_HAL_USART_command_IRQHandler+0x42>
 8001a1e:	05cd      	lsls	r5, r1, #23
 8001a20:	d505      	bpl.n	8001a2e <OS_HAL_USART_command_IRQHandler+0x42>
            __HAL_UART_CLEAR_IT(huart, UART_CLEAR_PEF);
 8001a22:	2501      	movs	r5, #1
 8001a24:	621d      	str	r5, [r3, #32]
            huart->ErrorCode |= HAL_UART_ERROR_PE;
 8001a26:	6ee5      	ldr	r5, [r4, #108]	; 0x6c
 8001a28:	f045 0501 	orr.w	r5, r5, #1
 8001a2c:	66e5      	str	r5, [r4, #108]	; 0x6c
        if(((isrflags & USART_ISR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8001a2e:	0795      	lsls	r5, r2, #30
 8001a30:	d506      	bpl.n	8001a40 <OS_HAL_USART_command_IRQHandler+0x54>
 8001a32:	b128      	cbz	r0, 8001a40 <OS_HAL_USART_command_IRQHandler+0x54>
            __HAL_UART_CLEAR_IT(huart, UART_CLEAR_FEF);
 8001a34:	2502      	movs	r5, #2
 8001a36:	621d      	str	r5, [r3, #32]
            huart->ErrorCode |= HAL_UART_ERROR_FE;
 8001a38:	6ee5      	ldr	r5, [r4, #108]	; 0x6c
 8001a3a:	f045 0504 	orr.w	r5, r5, #4
 8001a3e:	66e5      	str	r5, [r4, #108]	; 0x6c
        if(((isrflags & USART_ISR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8001a40:	0755      	lsls	r5, r2, #29
 8001a42:	d506      	bpl.n	8001a52 <OS_HAL_USART_command_IRQHandler+0x66>
 8001a44:	b128      	cbz	r0, 8001a52 <OS_HAL_USART_command_IRQHandler+0x66>
            __HAL_UART_CLEAR_IT(huart, UART_CLEAR_NEF);
 8001a46:	2504      	movs	r5, #4
 8001a48:	621d      	str	r5, [r3, #32]
            huart->ErrorCode |= HAL_UART_ERROR_NE;
 8001a4a:	6ee5      	ldr	r5, [r4, #108]	; 0x6c
 8001a4c:	f045 0502 	orr.w	r5, r5, #2
 8001a50:	66e5      	str	r5, [r4, #108]	; 0x6c
        if(((isrflags & USART_ISR_ORE) != RESET) &&
 8001a52:	0715      	lsls	r5, r2, #28
 8001a54:	d507      	bpl.n	8001a66 <OS_HAL_USART_command_IRQHandler+0x7a>
 8001a56:	068d      	lsls	r5, r1, #26
 8001a58:	d400      	bmi.n	8001a5c <OS_HAL_USART_command_IRQHandler+0x70>
        (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8001a5a:	b120      	cbz	r0, 8001a66 <OS_HAL_USART_command_IRQHandler+0x7a>
            __HAL_UART_CLEAR_IT(huart, UART_CLEAR_OREF);
 8001a5c:	2008      	movs	r0, #8
 8001a5e:	6218      	str	r0, [r3, #32]
            huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8001a60:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 8001a62:	4303      	orrs	r3, r0
 8001a64:	66e3      	str	r3, [r4, #108]	; 0x6c
        if(huart->ErrorCode != HAL_UART_ERROR_NONE)
 8001a66:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 8001a68:	2b00      	cmp	r3, #0
 8001a6a:	d055      	beq.n	8001b18 <OS_HAL_USART_command_IRQHandler+0x12c>
            if(((isrflags & USART_ISR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8001a6c:	0693      	lsls	r3, r2, #26
 8001a6e:	d504      	bpl.n	8001a7a <OS_HAL_USART_command_IRQHandler+0x8e>
 8001a70:	068d      	lsls	r5, r1, #26
 8001a72:	d502      	bpl.n	8001a7a <OS_HAL_USART_command_IRQHandler+0x8e>
                OS_UART_Receive_IT(huart);
 8001a74:	4620      	mov	r0, r4
 8001a76:	f7ff ff91 	bl	800199c <OS_UART_Receive_IT>
            if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) ||
 8001a7a:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 8001a7c:	f013 0f08 	tst.w	r3, #8
 8001a80:	6823      	ldr	r3, [r4, #0]
 8001a82:	d103      	bne.n	8001a8c <OS_HAL_USART_command_IRQHandler+0xa0>
                (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)))
 8001a84:	689d      	ldr	r5, [r3, #8]
            if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) ||
 8001a86:	f015 0540 	ands.w	r5, r5, #64	; 0x40
 8001a8a:	d00f      	beq.n	8001aac <OS_HAL_USART_command_IRQHandler+0xc0>
  * @retval None
  */
static void OS_UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8001a8c:	681a      	ldr	r2, [r3, #0]
                HAL_UART_ErrorCallback(huart);
 8001a8e:	4620      	mov	r0, r4
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8001a90:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8001a94:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001a96:	689a      	ldr	r2, [r3, #8]
 8001a98:	f022 0201 	bic.w	r2, r2, #1
 8001a9c:	609a      	str	r2, [r3, #8]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8001a9e:	2320      	movs	r3, #32
 8001aa0:	f884 306a 	strb.w	r3, [r4, #106]	; 0x6a
}
 8001aa4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
                HAL_UART_ErrorCallback(huart);
 8001aa8:	f7ff bd44 	b.w	8001534 <HAL_UART_ErrorCallback>
                HAL_UART_ErrorCallback(huart);
 8001aac:	4620      	mov	r0, r4
 8001aae:	f7ff fd41 	bl	8001534 <HAL_UART_ErrorCallback>
                huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001ab2:	66e5      	str	r5, [r4, #108]	; 0x6c
 8001ab4:	bd38      	pop	{r3, r4, r5, pc}
    if(((isrflags & USART_ISR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8001ab6:	0610      	lsls	r0, r2, #24
 8001ab8:	d51e      	bpl.n	8001af8 <OS_HAL_USART_command_IRQHandler+0x10c>
 8001aba:	060d      	lsls	r5, r1, #24
 8001abc:	d51c      	bpl.n	8001af8 <OS_HAL_USART_command_IRQHandler+0x10c>
static HAL_StatusTypeDef OS_UART_Transmit_IT(UART_HandleTypeDef *huart)
{
  uint16_t* tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8001abe:	f894 2069 	ldrb.w	r2, [r4, #105]	; 0x69
 8001ac2:	2a21      	cmp	r2, #33	; 0x21
 8001ac4:	d128      	bne.n	8001b18 <OS_HAL_USART_command_IRQHandler+0x12c>
  {

    if(huart->TxXferCount == 0U)
 8001ac6:	f8b4 2052 	ldrh.w	r2, [r4, #82]	; 0x52
 8001aca:	b292      	uxth	r2, r2
 8001acc:	b942      	cbnz	r2, 8001ae0 <OS_HAL_USART_command_IRQHandler+0xf4>
    {
    	/* Disable the UART Transmit Data Register Empty Interrupt */
		CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8001ace:	681a      	ldr	r2, [r3, #0]
 8001ad0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001ad4:	601a      	str	r2, [r3, #0]

		/* Enable the UART Transmit Complete Interrupt */
		SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8001ad6:	681a      	ldr	r2, [r3, #0]
 8001ad8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001adc:	601a      	str	r2, [r3, #0]
 8001ade:	bd38      	pop	{r3, r4, r5, pc}
    }
    else
    {

    	/* CAN ONLY TRANSMIT IN 8 BIT MODE WITHOUT PARITY */
    	huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0xFFU);
 8001ae0:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
 8001ae2:	1c51      	adds	r1, r2, #1
 8001ae4:	64e1      	str	r1, [r4, #76]	; 0x4c
 8001ae6:	7812      	ldrb	r2, [r2, #0]
 8001ae8:	629a      	str	r2, [r3, #40]	; 0x28


    	huart->TxXferCount--;
 8001aea:	f8b4 3052 	ldrh.w	r3, [r4, #82]	; 0x52
 8001aee:	3b01      	subs	r3, #1
 8001af0:	b29b      	uxth	r3, r3
 8001af2:	f8a4 3052 	strh.w	r3, [r4, #82]	; 0x52
 8001af6:	bd38      	pop	{r3, r4, r5, pc}
    if(((isrflags & USART_ISR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8001af8:	0650      	lsls	r0, r2, #25
 8001afa:	d50d      	bpl.n	8001b18 <OS_HAL_USART_command_IRQHandler+0x12c>
 8001afc:	064a      	lsls	r2, r1, #25
 8001afe:	d50b      	bpl.n	8001b18 <OS_HAL_USART_command_IRQHandler+0x12c>
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8001b00:	681a      	ldr	r2, [r3, #0]
  HAL_UART_TxCpltCallback(huart);
 8001b02:	4620      	mov	r0, r4
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8001b04:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001b08:	601a      	str	r2, [r3, #0]
  huart->gState = HAL_UART_STATE_READY;
 8001b0a:	2320      	movs	r3, #32
 8001b0c:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69
}
 8001b10:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_UART_TxCpltCallback(huart);
 8001b14:	f000 ba12 	b.w	8001f3c <HAL_UART_TxCpltCallback>
 8001b18:	bd38      	pop	{r3, r4, r5, pc}
	...

08001b1c <ConsoleProcess>:
/* ************************************************************************** */
/* Console command API */
/* ************************************************************************** */


void ConsoleProcess (void) {
 8001b1c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	const sConsoleCommandTable_T* commandTable;
	uint32_t cmdIndex;
	int32_t found;
	eCommandResult_T result;

	commandTable = ConsoleCommandsGetTable();
 8001b20:	f000 f89c 	bl	8001c5c <ConsoleCommandsGetTable>
	cmdIndex = 0;
 8001b24:	2400      	movs	r4, #0
	commandTable = ConsoleCommandsGetTable();
 8001b26:	4605      	mov	r5, r0
	if (buffer[i] == name[i]) {
 8001b28:	4f2a      	ldr	r7, [pc, #168]	; (8001bd4 <ConsoleProcess+0xb8>)
	found = NOT_FOUND;
 8001b2a:	f04f 30ff 	mov.w	r0, #4294967295
			/* found! execute the function  */
			result = commandTable[cmdIndex].execute(UART6_RxBuffer);

			/* if the execution goes wrong! */
			if(result != COMMAND_SUCCESS) {
				msg_info("Error!");
 8001b2e:	4e2a      	ldr	r6, [pc, #168]	; (8001bd8 <ConsoleProcess+0xbc>)
	while( (commandTable[cmdIndex].name != NULL) && (found == NOT_FOUND) ) {
 8001b30:	230c      	movs	r3, #12
 8001b32:	4363      	muls	r3, r4
 8001b34:	58e9      	ldr	r1, [r5, r3]
 8001b36:	eb05 0803 	add.w	r8, r5, r3
 8001b3a:	b339      	cbz	r1, 8001b8c <ConsoleProcess+0x70>
 8001b3c:	1c43      	adds	r3, r0, #1
 8001b3e:	d12d      	bne.n	8001b9c <ConsoleProcess+0x80>
 8001b40:	460b      	mov	r3, r1
 8001b42:	eba3 0c01 	sub.w	ip, r3, r1
	while(name[i] != LF_CHAR) {
 8001b46:	f813 2b01 	ldrb.w	r2, [r3], #1
 8001b4a:	2a0a      	cmp	r2, #10
 8001b4c:	d1f9      	bne.n	8001b42 <ConsoleProcess+0x26>
	if (buffer[i] == name[i]) {
 8001b4e:	783b      	ldrb	r3, [r7, #0]
			(buffer[i] != CR_CHAR) &&
 8001b50:	f242 4901 	movw	r9, #9217	; 0x2401
	if (buffer[i] == name[i]) {
 8001b54:	780a      	ldrb	r2, [r1, #0]
 8001b56:	1a9a      	subs	r2, r3, r2
 8001b58:	4253      	negs	r3, r2
 8001b5a:	4153      	adcs	r3, r2
	i = 0;
 8001b5c:	461a      	mov	r2, r3
	while( (result == 1) &&
 8001b5e:	b163      	cbz	r3, 8001b7a <ConsoleProcess+0x5e>
 8001b60:	2a0a      	cmp	r2, #10
 8001b62:	d008      	beq.n	8001b76 <ConsoleProcess+0x5a>
			(buffer[i] != LF_CHAR) &&
 8001b64:	f817 e002 	ldrb.w	lr, [r7, r2]
			(buffer[i] != CR_CHAR) &&
 8001b68:	f1be 0f0d 	cmp.w	lr, #13
 8001b6c:	d807      	bhi.n	8001b7e <ConsoleProcess+0x62>
 8001b6e:	fa29 f30e 	lsr.w	r3, r9, lr
 8001b72:	07db      	lsls	r3, r3, #31
 8001b74:	d503      	bpl.n	8001b7e <ConsoleProcess+0x62>
		if (command_length != i) {
 8001b76:	4562      	cmp	r2, ip
 8001b78:	d018      	beq.n	8001bac <ConsoleProcess+0x90>
			found = cmdIndex;

		}
		/* if not search in the following line... */
		else {
			cmdIndex++;
 8001b7a:	3401      	adds	r4, #1
 8001b7c:	e7d8      	b.n	8001b30 <ConsoleProcess+0x14>
		if (buffer[i] != name[i]){
 8001b7e:	5c8b      	ldrb	r3, [r1, r2]
		i++;
 8001b80:	3201      	adds	r2, #1
		if (buffer[i] != name[i]){
 8001b82:	4573      	cmp	r3, lr
 8001b84:	bf14      	ite	ne
 8001b86:	2300      	movne	r3, #0
 8001b88:	2301      	moveq	r3, #1
 8001b8a:	e7e8      	b.n	8001b5e <ConsoleProcess+0x42>
		}

	}

	/* if not find the command in the table */
	if( found == NOT_FOUND ) {
 8001b8c:	3001      	adds	r0, #1
 8001b8e:	d105      	bne.n	8001b9c <ConsoleProcess+0x80>

		msg_info("Command not found.");
 8001b90:	4812      	ldr	r0, [pc, #72]	; (8001bdc <ConsoleProcess+0xc0>)
 8001b92:	f000 fb11 	bl	80021b8 <iprintf>
		msg_info(STR_ENDLINE);
 8001b96:	4812      	ldr	r0, [pc, #72]	; (8001be0 <ConsoleProcess+0xc4>)
 8001b98:	f000 fb82 	bl	80022a0 <puts>
		receiveBuffer[i] = 0;
 8001b9c:	4b0d      	ldr	r3, [pc, #52]	; (8001bd4 <ConsoleProcess+0xb8>)
 8001b9e:	2200      	movs	r2, #0
 8001ba0:	701a      	strb	r2, [r3, #0]
 8001ba2:	705a      	strb	r2, [r3, #1]
 8001ba4:	709a      	strb	r2, [r3, #2]
 8001ba6:	70da      	strb	r2, [r3, #3]
	}

	/* clean the buffer */
	ConsoleResetBuffer(UART6_RxBuffer);
}
 8001ba8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			result = commandTable[cmdIndex].execute(UART6_RxBuffer);
 8001bac:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8001bb0:	4638      	mov	r0, r7
 8001bb2:	4798      	blx	r3
			if(result != COMMAND_SUCCESS) {
 8001bb4:	b160      	cbz	r0, 8001bd0 <ConsoleProcess+0xb4>
				msg_info("Error!");
 8001bb6:	4630      	mov	r0, r6
 8001bb8:	f000 fafe 	bl	80021b8 <iprintf>
				msg_info("Help:");
 8001bbc:	4809      	ldr	r0, [pc, #36]	; (8001be4 <ConsoleProcess+0xc8>)
 8001bbe:	f000 fafb 	bl	80021b8 <iprintf>
				msg_info(commandTable[cmdIndex].help);
 8001bc2:	f8d8 0008 	ldr.w	r0, [r8, #8]
 8001bc6:	f000 faf7 	bl	80021b8 <iprintf>
				msg_info(STR_ENDLINE);
 8001bca:	4805      	ldr	r0, [pc, #20]	; (8001be0 <ConsoleProcess+0xc4>)
 8001bcc:	f000 fb68 	bl	80022a0 <puts>
			found = cmdIndex;
 8001bd0:	4620      	mov	r0, r4
 8001bd2:	e7ad      	b.n	8001b30 <ConsoleProcess+0x14>
 8001bd4:	2000009c 	.word	0x2000009c
 8001bd8:	080030a9 	.word	0x080030a9
 8001bdc:	080030b8 	.word	0x080030b8
 8001be0:	080030b6 	.word	0x080030b6
 8001be4:	080030b0 	.word	0x080030b0

08001be8 <ConsoleCommandVer>:

	return result;
}


static eCommandResult_T ConsoleCommandVer (const uint8_t* buffer) {
 8001be8:	b508      	push	{r3, lr}
	eCommandResult_T result = COMMAND_SUCCESS;


	msg_info("ver 1.0.0 test CEMITEC");
 8001bea:	4804      	ldr	r0, [pc, #16]	; (8001bfc <ConsoleCommandVer+0x14>)
 8001bec:	f000 fae4 	bl	80021b8 <iprintf>
	msg_info(STR_ENDLINE);
 8001bf0:	4803      	ldr	r0, [pc, #12]	; (8001c00 <ConsoleCommandVer+0x18>)
 8001bf2:	f000 fb55 	bl	80022a0 <puts>
	return result;
}
 8001bf6:	2000      	movs	r0, #0
 8001bf8:	bd08      	pop	{r3, pc}
 8001bfa:	bf00      	nop
 8001bfc:	080030eb 	.word	0x080030eb
 8001c00:	080030b6 	.word	0x080030b6

08001c04 <ConsoleCommandLED>:
static eCommandResult_T ConsoleCommandLED (const uint8_t* buffer) {
 8001c04:	b508      	push	{r3, lr}
	msg_info("The LED has been turned on!");
 8001c06:	4804      	ldr	r0, [pc, #16]	; (8001c18 <ConsoleCommandLED+0x14>)
 8001c08:	f000 fad6 	bl	80021b8 <iprintf>
	msg_info(STR_ENDLINE);
 8001c0c:	4803      	ldr	r0, [pc, #12]	; (8001c1c <ConsoleCommandLED+0x18>)
 8001c0e:	f000 fb47 	bl	80022a0 <puts>
}
 8001c12:	2000      	movs	r0, #0
 8001c14:	bd08      	pop	{r3, pc}
 8001c16:	bf00      	nop
 8001c18:	080030cf 	.word	0x080030cf
 8001c1c:	080030b6 	.word	0x080030b6

08001c20 <ConsoleCommandHelp>:
static eCommandResult_T ConsoleCommandHelp (const uint8_t* buffer) {
 8001c20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001c22:	2400      	movs	r4, #0
		msg_info(mConsoleCommandTable[i].name);
 8001c24:	4d0a      	ldr	r5, [pc, #40]	; (8001c50 <ConsoleCommandHelp+0x30>)
		msg_info(" : ");
 8001c26:	4f0b      	ldr	r7, [pc, #44]	; (8001c54 <ConsoleCommandHelp+0x34>)
		msg_info(STR_ENDLINE);
 8001c28:	4e0b      	ldr	r6, [pc, #44]	; (8001c58 <ConsoleCommandHelp+0x38>)
		msg_info(mConsoleCommandTable[i].name);
 8001c2a:	5960      	ldr	r0, [r4, r5]
 8001c2c:	f000 fac4 	bl	80021b8 <iprintf>
		msg_info(" : ");
 8001c30:	4638      	mov	r0, r7
 8001c32:	f000 fac1 	bl	80021b8 <iprintf>
		msg_info(mConsoleCommandTable[i].help);
 8001c36:	192b      	adds	r3, r5, r4
 8001c38:	340c      	adds	r4, #12
 8001c3a:	6898      	ldr	r0, [r3, #8]
 8001c3c:	f000 fabc 	bl	80021b8 <iprintf>
		msg_info(STR_ENDLINE);
 8001c40:	4630      	mov	r0, r6
 8001c42:	f000 fb2d 	bl	80022a0 <puts>
	for (i = 0; i < tableLenght - 1; i++) {
 8001c46:	2c24      	cmp	r4, #36	; 0x24
 8001c48:	d1ef      	bne.n	8001c2a <ConsoleCommandHelp+0xa>
}
 8001c4a:	2000      	movs	r0, #0
 8001c4c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001c4e:	bf00      	nop
 8001c50:	08003104 	.word	0x08003104
 8001c54:	080030cb 	.word	0x080030cb
 8001c58:	080030b6 	.word	0x080030b6

08001c5c <ConsoleCommandsGetTable>:


const sConsoleCommandTable_T* ConsoleCommandsGetTable(void)
{
	return (mConsoleCommandTable);
}
 8001c5c:	4800      	ldr	r0, [pc, #0]	; (8001c60 <ConsoleCommandsGetTable+0x4>)
 8001c5e:	4770      	bx	lr
 8001c60:	08003104 	.word	0x08003104

08001c64 <__io_putchar>:
  * @brief  Retargets the C library printf function to the USART.
  * @param  None
  * @retval None
  */
PUTCHAR_PROTOTYPE
{
 8001c64:	b537      	push	{r0, r1, r2, r4, r5, lr}
  /* Place your implementation of fputc here */
  /* e.g. write a character to the USART2 and Loop until the end of transmission */

  while (HAL_OK != HAL_UART_Transmit(&huart6, (uint8_t *) &ch, 1, 3000))
 8001c66:	4d08      	ldr	r5, [pc, #32]	; (8001c88 <__io_putchar+0x24>)
{
 8001c68:	ac02      	add	r4, sp, #8
 8001c6a:	f844 0d04 	str.w	r0, [r4, #-4]!
  while (HAL_OK != HAL_UART_Transmit(&huart6, (uint8_t *) &ch, 1, 3000))
 8001c6e:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8001c72:	2201      	movs	r2, #1
 8001c74:	4621      	mov	r1, r4
 8001c76:	4628      	mov	r0, r5
 8001c78:	f7ff fb93 	bl	80013a2 <HAL_UART_Transmit>
 8001c7c:	2800      	cmp	r0, #0
 8001c7e:	d1f6      	bne.n	8001c6e <__io_putchar+0xa>
	;
  }

  return ch;

}
 8001c80:	9801      	ldr	r0, [sp, #4]
 8001c82:	b003      	add	sp, #12
 8001c84:	bd30      	pop	{r4, r5, pc}
 8001c86:	bf00      	nop
 8001c88:	200000a8 	.word	0x200000a8

08001c8c <__io_getchar>:
  * @brief  Retargets the C library scanf function to the USART.
  * @param  None
  * @retval None
  */
GETCHAR_PROTOTYPE
{
 8001c8c:	b537      	push	{r0, r1, r2, r4, r5, lr}
  /* Place your implementation of fgetc here */
  /* e.g. read a character on USART and loop until the end of read */
  uint8_t ch = 0;
 8001c8e:	2300      	movs	r3, #0
 8001c90:	ac02      	add	r4, sp, #8
  while (HAL_OK != HAL_UART_Receive(&huart6, (uint8_t *)&ch, 1, 3000))
 8001c92:	4d08      	ldr	r5, [pc, #32]	; (8001cb4 <__io_getchar+0x28>)
  uint8_t ch = 0;
 8001c94:	f804 3d01 	strb.w	r3, [r4, #-1]!
  while (HAL_OK != HAL_UART_Receive(&huart6, (uint8_t *)&ch, 1, 3000))
 8001c98:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8001c9c:	2201      	movs	r2, #1
 8001c9e:	4621      	mov	r1, r4
 8001ca0:	4628      	mov	r0, r5
 8001ca2:	f7ff fbd7 	bl	8001454 <HAL_UART_Receive>
 8001ca6:	2800      	cmp	r0, #0
 8001ca8:	d1f6      	bne.n	8001c98 <__io_getchar+0xc>
  {
	;
  }

  return ch;
}
 8001caa:	f89d 0007 	ldrb.w	r0, [sp, #7]
 8001cae:	b003      	add	sp, #12
 8001cb0:	bd30      	pop	{r4, r5, pc}
 8001cb2:	bf00      	nop
 8001cb4:	200000a8 	.word	0x200000a8

08001cb8 <SystemClock_Config>:
  RCC_ClkInitTypeDef RCC_ClkInitStruct;
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct;

    /**Configure the main internal regulator output voltage 
    */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001cb8:	4b27      	ldr	r3, [pc, #156]	; (8001d58 <SystemClock_Config+0xa0>)
 8001cba:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001cbc:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
{
 8001cc0:	b510      	push	{r4, lr}
  __HAL_RCC_PWR_CLK_ENABLE();
 8001cc2:	641a      	str	r2, [r3, #64]	; 0x40
{
 8001cc4:	b0b4      	sub	sp, #208	; 0xd0
  __HAL_RCC_PWR_CLK_ENABLE();
 8001cc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40

  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001cc8:	2401      	movs	r4, #1
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8001cca:	4a24      	ldr	r2, [pc, #144]	; (8001d5c <SystemClock_Config+0xa4>)
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001ccc:	a807      	add	r0, sp, #28
  __HAL_RCC_PWR_CLK_ENABLE();
 8001cce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001cd2:	9300      	str	r3, [sp, #0]
 8001cd4:	9b00      	ldr	r3, [sp, #0]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8001cd6:	6813      	ldr	r3, [r2, #0]
 8001cd8:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001cdc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001ce0:	6013      	str	r3, [r2, #0]
 8001ce2:	6813      	ldr	r3, [r2, #0]
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001ce4:	9407      	str	r4, [sp, #28]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8001ce6:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001cea:	9301      	str	r3, [sp, #4]
 8001cec:	9b01      	ldr	r3, [sp, #4]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001cee:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001cf2:	9308      	str	r3, [sp, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001cf4:	2300      	movs	r3, #0
 8001cf6:	930d      	str	r3, [sp, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001cf8:	f7fe fe12 	bl	8000920 <HAL_RCC_OscConfig>
 8001cfc:	4601      	mov	r1, r0
 8001cfe:	b100      	cbz	r0, 8001d02 <SystemClock_Config+0x4a>
 8001d00:	e7fe      	b.n	8001d00 <SystemClock_Config+0x48>
    _Error_Handler(__FILE__, __LINE__);
  }

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001d02:	230f      	movs	r3, #15
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001d04:	9004      	str	r0, [sp, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001d06:	9006      	str	r0, [sp, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001d08:	a802      	add	r0, sp, #8
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001d0a:	9302      	str	r3, [sp, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001d0c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 8001d10:	9403      	str	r4, [sp, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001d12:	9305      	str	r3, [sp, #20]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001d14:	f7fe ffc6 	bl	8000ca4 <HAL_RCC_ClockConfig>
 8001d18:	b100      	cbz	r0, 8001d1c <SystemClock_Config+0x64>
 8001d1a:	e7fe      	b.n	8001d1a <SystemClock_Config+0x62>
  {
    _Error_Handler(__FILE__, __LINE__);
  }

  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART6;
 8001d1c:	f44f 6300 	mov.w	r3, #2048	; 0x800
  PeriphClkInitStruct.Usart6ClockSelection = RCC_USART6CLKSOURCE_PCLK2;
 8001d20:	9029      	str	r0, [sp, #164]	; 0xa4
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001d22:	a813      	add	r0, sp, #76	; 0x4c
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART6;
 8001d24:	9313      	str	r3, [sp, #76]	; 0x4c
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001d26:	f7ff f881 	bl	8000e2c <HAL_RCCEx_PeriphCLKConfig>
 8001d2a:	4604      	mov	r4, r0
 8001d2c:	b100      	cbz	r0, 8001d30 <SystemClock_Config+0x78>
 8001d2e:	e7fe      	b.n	8001d2e <SystemClock_Config+0x76>
    _Error_Handler(__FILE__, __LINE__);
  }

    /**Configure the Systick interrupt time 
    */
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 8001d30:	f7ff f856 	bl	8000de0 <HAL_RCC_GetHCLKFreq>
 8001d34:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001d38:	fbb0 f0f3 	udiv	r0, r0, r3
 8001d3c:	f7fe fcd8 	bl	80006f0 <HAL_SYSTICK_Config>

    /**Configure the Systick 
    */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 8001d40:	2004      	movs	r0, #4
 8001d42:	f7fe fceb 	bl	800071c <HAL_SYSTICK_CLKSourceConfig>

  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 8001d46:	4622      	mov	r2, r4
 8001d48:	4621      	mov	r1, r4
 8001d4a:	f04f 30ff 	mov.w	r0, #4294967295
 8001d4e:	f7fe fc8b 	bl	8000668 <HAL_NVIC_SetPriority>
}
 8001d52:	b034      	add	sp, #208	; 0xd0
 8001d54:	bd10      	pop	{r4, pc}
 8001d56:	bf00      	nop
 8001d58:	40023800 	.word	0x40023800
 8001d5c:	40007000 	.word	0x40007000

08001d60 <main>:
{
 8001d60:	b580      	push	{r7, lr}
 8001d62:	b08c      	sub	sp, #48	; 0x30
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d64:	2400      	movs	r4, #0
  HAL_Init();
 8001d66:	f7fe fc4f 	bl	8000608 <HAL_Init>
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8001d6a:	f44f 5900 	mov.w	r9, #8192	; 0x2000
  SystemClock_Config();
 8001d6e:	f7ff ffa3 	bl	8001cb8 <SystemClock_Config>
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001d72:	4b68      	ldr	r3, [pc, #416]	; (8001f14 <main+0x1b4>)
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8001d74:	f244 0181 	movw	r1, #16513	; 0x4081
 8001d78:	4867      	ldr	r0, [pc, #412]	; (8001f18 <main+0x1b8>)
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001d7a:	6b1a      	ldr	r2, [r3, #48]	; 0x30

  /*Configure GPIO pins : RMII_MDC_Pin RMII_RXD0_Pin RMII_RXD1_Pin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d7c:	2503      	movs	r5, #3
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d7e:	2602      	movs	r6, #2
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001d80:	270b      	movs	r7, #11
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001d82:	f042 0204 	orr.w	r2, r2, #4
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001d86:	f04f 0801 	mov.w	r8, #1
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001d8a:	631a      	str	r2, [r3, #48]	; 0x30
 8001d8c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001d8e:	f002 0204 	and.w	r2, r2, #4
 8001d92:	9201      	str	r2, [sp, #4]
 8001d94:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001d96:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001d98:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001d9c:	631a      	str	r2, [r3, #48]	; 0x30
 8001d9e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001da0:	f002 0280 	and.w	r2, r2, #128	; 0x80
 8001da4:	9202      	str	r2, [sp, #8]
 8001da6:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001da8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001daa:	f042 0201 	orr.w	r2, r2, #1
 8001dae:	631a      	str	r2, [r3, #48]	; 0x30
 8001db0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001db2:	f002 0201 	and.w	r2, r2, #1
 8001db6:	9203      	str	r2, [sp, #12]
 8001db8:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001dba:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001dbc:	f042 0202 	orr.w	r2, r2, #2
 8001dc0:	631a      	str	r2, [r3, #48]	; 0x30
 8001dc2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001dc4:	f002 0202 	and.w	r2, r2, #2
 8001dc8:	9204      	str	r2, [sp, #16]
 8001dca:	9a04      	ldr	r2, [sp, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001dcc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001dce:	f042 0208 	orr.w	r2, r2, #8
 8001dd2:	631a      	str	r2, [r3, #48]	; 0x30
 8001dd4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001dd6:	f002 0208 	and.w	r2, r2, #8
 8001dda:	9205      	str	r2, [sp, #20]
 8001ddc:	9a05      	ldr	r2, [sp, #20]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001dde:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001de0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001de4:	631a      	str	r2, [r3, #48]	; 0x30
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8001de6:	2200      	movs	r2, #0
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001de8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001dee:	9306      	str	r3, [sp, #24]
 8001df0:	9b06      	ldr	r3, [sp, #24]
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8001df2:	f7fe fd8f 	bl	8000914 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8001df6:	2200      	movs	r2, #0
 8001df8:	2140      	movs	r1, #64	; 0x40
 8001dfa:	4848      	ldr	r0, [pc, #288]	; (8001f1c <main+0x1bc>)
 8001dfc:	f7fe fd8a 	bl	8000914 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001e00:	4b47      	ldr	r3, [pc, #284]	; (8001f20 <main+0x1c0>)
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8001e02:	a907      	add	r1, sp, #28
 8001e04:	4847      	ldr	r0, [pc, #284]	; (8001f24 <main+0x1c4>)
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001e06:	9308      	str	r3, [sp, #32]
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8001e08:	f8cd 901c 	str.w	r9, [sp, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e0c:	9409      	str	r4, [sp, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8001e0e:	f7fe fc97 	bl	8000740 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8001e12:	2332      	movs	r3, #50	; 0x32
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001e14:	a907      	add	r1, sp, #28
 8001e16:	4843      	ldr	r0, [pc, #268]	; (8001f24 <main+0x1c4>)
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8001e18:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e1a:	950a      	str	r5, [sp, #40]	; 0x28
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e1c:	9608      	str	r6, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e1e:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001e20:	970b      	str	r7, [sp, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001e22:	f7fe fc8d 	bl	8000740 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8001e26:	2386      	movs	r3, #134	; 0x86
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e28:	a907      	add	r1, sp, #28
 8001e2a:	483f      	ldr	r0, [pc, #252]	; (8001f28 <main+0x1c8>)
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8001e2c:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e2e:	950a      	str	r5, [sp, #40]	; 0x28
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e30:	9608      	str	r6, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e32:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001e34:	970b      	str	r7, [sp, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e36:	f7fe fc83 	bl	8000740 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8001e3a:	f244 0381 	movw	r3, #16513	; 0x4081
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e3e:	a907      	add	r1, sp, #28
 8001e40:	4835      	ldr	r0, [pc, #212]	; (8001f18 <main+0x1b8>)
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8001e42:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001e44:	f8cd 8020 	str.w	r8, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e48:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e4a:	940a      	str	r4, [sp, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e4c:	f7fe fc78 	bl	8000740 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = RMII_TXD1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
  HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8001e50:	a907      	add	r1, sp, #28
 8001e52:	4831      	ldr	r0, [pc, #196]	; (8001f18 <main+0x1b8>)
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e54:	950a      	str	r5, [sp, #40]	; 0x28
  GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8001e56:	f8cd 901c 	str.w	r9, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e5a:	9608      	str	r6, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e5c:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001e5e:	970b      	str	r7, [sp, #44]	; 0x2c
  HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8001e60:	f7fe fc6e 	bl	8000740 <HAL_GPIO_Init>

  /*Configure GPIO pins : STLK_RX_Pin STLK_TX_Pin */
  GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8001e64:	f44f 7340 	mov.w	r3, #768	; 0x300
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
  GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001e68:	a907      	add	r1, sp, #28
 8001e6a:	4830      	ldr	r0, [pc, #192]	; (8001f2c <main+0x1cc>)
  GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8001e6c:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001e6e:	2307      	movs	r3, #7
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e70:	950a      	str	r5, [sp, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001e72:	930b      	str	r3, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e74:	9608      	str	r6, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e76:	9409      	str	r4, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001e78:	f7fe fc62 	bl	8000740 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8001e7c:	2340      	movs	r3, #64	; 0x40
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8001e7e:	a907      	add	r1, sp, #28
 8001e80:	4826      	ldr	r0, [pc, #152]	; (8001f1c <main+0x1bc>)
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8001e82:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001e84:	f8cd 8020 	str.w	r8, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e88:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e8a:	940a      	str	r4, [sp, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8001e8c:	f7fe fc58 	bl	8000740 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8001e90:	2380      	movs	r3, #128	; 0x80
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8001e92:	a907      	add	r1, sp, #28
 8001e94:	4821      	ldr	r0, [pc, #132]	; (8001f1c <main+0x1bc>)
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8001e96:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001e98:	9408      	str	r4, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e9a:	9409      	str	r4, [sp, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8001e9c:	f7fe fc50 	bl	8000740 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_SOF_Pin USB_ID_Pin USB_DM_Pin USB_DP_Pin */
  GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8001ea0:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ea4:	a907      	add	r1, sp, #28
 8001ea6:	4820      	ldr	r0, [pc, #128]	; (8001f28 <main+0x1c8>)
  GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8001ea8:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8001eaa:	230a      	movs	r3, #10
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001eac:	950a      	str	r5, [sp, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8001eae:	930b      	str	r3, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001eb0:	9608      	str	r6, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001eb2:	9409      	str	r4, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001eb4:	f7fe fc44 	bl	8000740 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_VBUS_Pin */
  GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8001eb8:	f44f 7300 	mov.w	r3, #512	; 0x200
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8001ebc:	a907      	add	r1, sp, #28
 8001ebe:	481a      	ldr	r0, [pc, #104]	; (8001f28 <main+0x1c8>)
  GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8001ec0:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001ec2:	9408      	str	r4, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ec4:	9409      	str	r4, [sp, #36]	; 0x24
  HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8001ec6:	f7fe fc3b 	bl	8000740 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_TX_EN_Pin RMII_TXD0_Pin */
  GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8001eca:	f44f 5320 	mov.w	r3, #10240	; 0x2800
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001ece:	4813      	ldr	r0, [pc, #76]	; (8001f1c <main+0x1bc>)
 8001ed0:	a907      	add	r1, sp, #28
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ed2:	950a      	str	r5, [sp, #40]	; 0x28
  GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8001ed4:	9307      	str	r3, [sp, #28]
  huart6.Instance = USART6;
 8001ed6:	4d16      	ldr	r5, [pc, #88]	; (8001f30 <main+0x1d0>)
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ed8:	9608      	str	r6, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001eda:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001edc:	970b      	str	r7, [sp, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001ede:	f7fe fc2f 	bl	8000740 <HAL_GPIO_Init>
  huart6.Init.BaudRate = 115200;
 8001ee2:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 8001ee6:	4a13      	ldr	r2, [pc, #76]	; (8001f34 <main+0x1d4>)
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8001ee8:	4628      	mov	r0, r5
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8001eea:	60ac      	str	r4, [r5, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8001eec:	60ec      	str	r4, [r5, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8001eee:	612c      	str	r4, [r5, #16]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001ef0:	61ac      	str	r4, [r5, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8001ef2:	61ec      	str	r4, [r5, #28]
  huart6.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001ef4:	622c      	str	r4, [r5, #32]
  huart6.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001ef6:	626c      	str	r4, [r5, #36]	; 0x24
  huart6.Init.BaudRate = 115200;
 8001ef8:	e885 000c 	stmia.w	r5, {r2, r3}
  huart6.Init.Mode = UART_MODE_TX_RX;
 8001efc:	230c      	movs	r3, #12
 8001efe:	616b      	str	r3, [r5, #20]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8001f00:	f7ff fcd9 	bl	80018b6 <HAL_UART_Init>
 8001f04:	b100      	cbz	r0, 8001f08 <main+0x1a8>
 8001f06:	e7fe      	b.n	8001f06 <main+0x1a6>
  OS_HAL_UART_Receive_IT(&huart6, UART6_RxBuffer);
 8001f08:	490b      	ldr	r1, [pc, #44]	; (8001f38 <main+0x1d8>)
 8001f0a:	4628      	mov	r0, r5
 8001f0c:	f7ff fd05 	bl	800191a <OS_HAL_UART_Receive_IT>
 8001f10:	e7fe      	b.n	8001f10 <main+0x1b0>
 8001f12:	bf00      	nop
 8001f14:	40023800 	.word	0x40023800
 8001f18:	40020400 	.word	0x40020400
 8001f1c:	40021800 	.word	0x40021800
 8001f20:	10110000 	.word	0x10110000
 8001f24:	40020800 	.word	0x40020800
 8001f28:	40020000 	.word	0x40020000
 8001f2c:	40020c00 	.word	0x40020c00
 8001f30:	200000a8 	.word	0x200000a8
 8001f34:	40011400 	.word	0x40011400
 8001f38:	2000009c 	.word	0x2000009c

08001f3c <HAL_UART_TxCpltCallback>:
/* ************************************************************************** */
/* CALLBACKS */
/* ************************************************************************** */

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *UartHandle)
{
 8001f3c:	4770      	bx	lr
	...

08001f40 <HAL_UART_RxCpltCallback>:
	}

}

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *UartHandle)
{
 8001f40:	b508      	push	{r3, lr}
	/* Set transmission flag: transfer complete */
	if(UartHandle->Instance == USART6){
 8001f42:	6802      	ldr	r2, [r0, #0]
 8001f44:	4b05      	ldr	r3, [pc, #20]	; (8001f5c <HAL_UART_RxCpltCallback+0x1c>)
 8001f46:	429a      	cmp	r2, r3
 8001f48:	d107      	bne.n	8001f5a <HAL_UART_RxCpltCallback+0x1a>

		/* init the console process after receive data */
		ConsoleProcess();
 8001f4a:	f7ff fde7 	bl	8001b1c <ConsoleProcess>

		/* reinit the USART to receive commands again */
		OS_HAL_UART_Receive_IT(&huart6, UART6_RxBuffer);
 8001f4e:	4904      	ldr	r1, [pc, #16]	; (8001f60 <HAL_UART_RxCpltCallback+0x20>)
 8001f50:	4804      	ldr	r0, [pc, #16]	; (8001f64 <HAL_UART_RxCpltCallback+0x24>)

	}

}
 8001f52:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		OS_HAL_UART_Receive_IT(&huart6, UART6_RxBuffer);
 8001f56:	f7ff bce0 	b.w	800191a <OS_HAL_UART_Receive_IT>
 8001f5a:	bd08      	pop	{r3, pc}
 8001f5c:	40011400 	.word	0x40011400
 8001f60:	2000009c 	.word	0x2000009c
 8001f64:	200000a8 	.word	0x200000a8

08001f68 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001f68:	b508      	push	{r3, lr}
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001f6a:	2003      	movs	r0, #3
 8001f6c:	f7fe fb6a 	bl	8000644 <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/
  /* MemoryManagement_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(MemoryManagement_IRQn, 0, 0);
 8001f70:	2200      	movs	r2, #0
 8001f72:	f06f 000b 	mvn.w	r0, #11
 8001f76:	4611      	mov	r1, r2
 8001f78:	f7fe fb76 	bl	8000668 <HAL_NVIC_SetPriority>
  /* BusFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(BusFault_IRQn, 0, 0);
 8001f7c:	2200      	movs	r2, #0
 8001f7e:	f06f 000a 	mvn.w	r0, #10
 8001f82:	4611      	mov	r1, r2
 8001f84:	f7fe fb70 	bl	8000668 <HAL_NVIC_SetPriority>
  /* UsageFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(UsageFault_IRQn, 0, 0);
 8001f88:	2200      	movs	r2, #0
 8001f8a:	f06f 0009 	mvn.w	r0, #9
 8001f8e:	4611      	mov	r1, r2
 8001f90:	f7fe fb6a 	bl	8000668 <HAL_NVIC_SetPriority>
  /* SVCall_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SVCall_IRQn, 0, 0);
 8001f94:	2200      	movs	r2, #0
 8001f96:	f06f 0004 	mvn.w	r0, #4
 8001f9a:	4611      	mov	r1, r2
 8001f9c:	f7fe fb64 	bl	8000668 <HAL_NVIC_SetPriority>
  /* DebugMonitor_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DebugMonitor_IRQn, 0, 0);
 8001fa0:	2200      	movs	r2, #0
 8001fa2:	f06f 0003 	mvn.w	r0, #3
 8001fa6:	4611      	mov	r1, r2
 8001fa8:	f7fe fb5e 	bl	8000668 <HAL_NVIC_SetPriority>
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 0, 0);
 8001fac:	2200      	movs	r2, #0
 8001fae:	f06f 0001 	mvn.w	r0, #1
 8001fb2:	4611      	mov	r1, r2
 8001fb4:	f7fe fb58 	bl	8000668 <HAL_NVIC_SetPriority>
  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 8001fb8:	2200      	movs	r2, #0
 8001fba:	f04f 30ff 	mov.w	r0, #4294967295
 8001fbe:	4611      	mov	r1, r2

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001fc0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 8001fc4:	f7fe bb50 	b.w	8000668 <HAL_NVIC_SetPriority>

08001fc8 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{

  GPIO_InitTypeDef GPIO_InitStruct;
  if(huart->Instance==USART6)
 8001fc8:	6802      	ldr	r2, [r0, #0]
 8001fca:	4b14      	ldr	r3, [pc, #80]	; (800201c <HAL_UART_MspInit+0x54>)
 8001fcc:	429a      	cmp	r2, r3
{
 8001fce:	b510      	push	{r4, lr}
 8001fd0:	b086      	sub	sp, #24
  if(huart->Instance==USART6)
 8001fd2:	d120      	bne.n	8002016 <HAL_UART_MspInit+0x4e>
  {
  /* USER CODE BEGIN USART6_MspInit 0 */

  /* USER CODE END USART6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART6_CLK_ENABLE();
 8001fd4:	f503 3392 	add.w	r3, r3, #74752	; 0x12400
    PC6     ------> USART6_TX
    PC7     ------> USART6_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fd8:	2400      	movs	r4, #0
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001fda:	a901      	add	r1, sp, #4
 8001fdc:	4810      	ldr	r0, [pc, #64]	; (8002020 <HAL_UART_MspInit+0x58>)
    __HAL_RCC_USART6_CLK_ENABLE();
 8001fde:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001fe0:	f042 0220 	orr.w	r2, r2, #32
 8001fe4:	645a      	str	r2, [r3, #68]	; 0x44
 8001fe6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fe8:	9403      	str	r4, [sp, #12]
    __HAL_RCC_USART6_CLK_ENABLE();
 8001fea:	f003 0320 	and.w	r3, r3, #32
 8001fee:	9300      	str	r3, [sp, #0]
 8001ff0:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001ff2:	23c0      	movs	r3, #192	; 0xc0
 8001ff4:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ff6:	2302      	movs	r3, #2
 8001ff8:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ffa:	2303      	movs	r3, #3
 8001ffc:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8001ffe:	2308      	movs	r3, #8
 8002000:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002002:	f7fe fb9d 	bl	8000740 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART6_MspInit 1 */
    /* USART6 interrupt Init */
    HAL_NVIC_SetPriority(USART6_IRQn, 0, 0);
 8002006:	2047      	movs	r0, #71	; 0x47
 8002008:	4622      	mov	r2, r4
 800200a:	4621      	mov	r1, r4
 800200c:	f7fe fb2c 	bl	8000668 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 8002010:	2047      	movs	r0, #71	; 0x47
 8002012:	f7fe fb61 	bl	80006d8 <HAL_NVIC_EnableIRQ>
  /* USER CODE END USART6_MspInit 1 */
  }

}
 8002016:	b006      	add	sp, #24
 8002018:	bd10      	pop	{r4, pc}
 800201a:	bf00      	nop
 800201c:	40011400 	.word	0x40011400
 8002020:	40020800 	.word	0x40020800

08002024 <SysTick_Handler>:

/**
* @brief This function handles System tick timer.
*/
void SysTick_Handler(void)
{
 8002024:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002026:	f7fe fafb 	bl	8000620 <HAL_IncTick>
  HAL_SYSTICK_IRQHandler();
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800202a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_SYSTICK_IRQHandler();
 800202e:	f7fe bb82 	b.w	8000736 <HAL_SYSTICK_IRQHandler>
	...

08002034 <USART6_IRQHandler>:
void USART6_IRQHandler(void)
{
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
	OS_HAL_USART_command_IRQHandler(&huart6);
 8002034:	4801      	ldr	r0, [pc, #4]	; (800203c <USART6_IRQHandler+0x8>)
 8002036:	f7ff bcd9 	b.w	80019ec <OS_HAL_USART_command_IRQHandler>
 800203a:	bf00      	nop
 800203c:	200000a8 	.word	0x200000a8

08002040 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

int _read (int file, char *ptr, int len)
{
 8002040:	b570      	push	{r4, r5, r6, lr}
 8002042:	460e      	mov	r6, r1
 8002044:	4615      	mov	r5, r2
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002046:	460c      	mov	r4, r1
 8002048:	1ba3      	subs	r3, r4, r6
 800204a:	429d      	cmp	r5, r3
 800204c:	dc01      	bgt.n	8002052 <_read+0x12>
	{
		*ptr++ = __io_getchar();
	}

return len;
}
 800204e:	4628      	mov	r0, r5
 8002050:	bd70      	pop	{r4, r5, r6, pc}
		*ptr++ = __io_getchar();
 8002052:	f7ff fe1b 	bl	8001c8c <__io_getchar>
 8002056:	f804 0b01 	strb.w	r0, [r4], #1
 800205a:	e7f5      	b.n	8002048 <_read+0x8>

0800205c <_write>:

int _write(int file, char *ptr, int len)
{
 800205c:	b570      	push	{r4, r5, r6, lr}
 800205e:	460e      	mov	r6, r1
 8002060:	4615      	mov	r5, r2
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002062:	460c      	mov	r4, r1
 8002064:	1ba3      	subs	r3, r4, r6
 8002066:	429d      	cmp	r5, r3
 8002068:	dc01      	bgt.n	800206e <_write+0x12>
	{
		__io_putchar(*ptr++);
	}
	return len;
}
 800206a:	4628      	mov	r0, r5
 800206c:	bd70      	pop	{r4, r5, r6, pc}
		__io_putchar(*ptr++);
 800206e:	f814 0b01 	ldrb.w	r0, [r4], #1
 8002072:	f7ff fdf7 	bl	8001c64 <__io_putchar>
 8002076:	e7f5      	b.n	8002064 <_write+0x8>

08002078 <_sbrk>:

caddr_t _sbrk(int incr)
{
 8002078:	b508      	push	{r3, lr}
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 800207a:	4b0a      	ldr	r3, [pc, #40]	; (80020a4 <_sbrk+0x2c>)
{
 800207c:	4602      	mov	r2, r0
	if (heap_end == 0)
 800207e:	6819      	ldr	r1, [r3, #0]
 8002080:	b909      	cbnz	r1, 8002086 <_sbrk+0xe>
		heap_end = &end;
 8002082:	4909      	ldr	r1, [pc, #36]	; (80020a8 <_sbrk+0x30>)
 8002084:	6019      	str	r1, [r3, #0]

	prev_heap_end = heap_end;
 8002086:	6818      	ldr	r0, [r3, #0]
	if (heap_end + incr > stack_ptr)
 8002088:	4669      	mov	r1, sp
 800208a:	4402      	add	r2, r0
 800208c:	428a      	cmp	r2, r1
 800208e:	d906      	bls.n	800209e <_sbrk+0x26>
	{
//		write(1, "Heap and stack collision\n", 25);
//		abort();
		errno = ENOMEM;
 8002090:	f000 f868 	bl	8002164 <__errno>
 8002094:	230c      	movs	r3, #12
 8002096:	6003      	str	r3, [r0, #0]
		return (caddr_t) -1;
 8002098:	f04f 30ff 	mov.w	r0, #4294967295
 800209c:	bd08      	pop	{r3, pc}
	}

	heap_end += incr;
 800209e:	601a      	str	r2, [r3, #0]

	return (caddr_t) prev_heap_end;
}
 80020a0:	bd08      	pop	{r3, pc}
 80020a2:	bf00      	nop
 80020a4:	2000008c 	.word	0x2000008c
 80020a8:	2000011c 	.word	0x2000011c

080020ac <_close>:

int _close(int file)
{
	return -1;
}
 80020ac:	f04f 30ff 	mov.w	r0, #4294967295
 80020b0:	4770      	bx	lr

080020b2 <_fstat>:


int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
 80020b2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
	return 0;
}
 80020b6:	2000      	movs	r0, #0
	st->st_mode = S_IFCHR;
 80020b8:	604b      	str	r3, [r1, #4]
}
 80020ba:	4770      	bx	lr

080020bc <_isatty>:

int _isatty(int file)
{
	return 1;
}
 80020bc:	2001      	movs	r0, #1
 80020be:	4770      	bx	lr

080020c0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
	return 0;
}
 80020c0:	2000      	movs	r0, #0
 80020c2:	4770      	bx	lr

080020c4 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80020c4:	490f      	ldr	r1, [pc, #60]	; (8002104 <SystemInit+0x40>)
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80020c6:	2000      	movs	r0, #0
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80020c8:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 80020cc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80020d0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  RCC->CR |= (uint32_t)0x00000001;
 80020d4:	4b0c      	ldr	r3, [pc, #48]	; (8002108 <SystemInit+0x44>)
 80020d6:	681a      	ldr	r2, [r3, #0]
 80020d8:	f042 0201 	orr.w	r2, r2, #1
 80020dc:	601a      	str	r2, [r3, #0]
  RCC->CFGR = 0x00000000;
 80020de:	6098      	str	r0, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 80020e0:	681a      	ldr	r2, [r3, #0]
 80020e2:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 80020e6:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80020ea:	601a      	str	r2, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 80020ec:	4a07      	ldr	r2, [pc, #28]	; (800210c <SystemInit+0x48>)
 80020ee:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 80020f0:	681a      	ldr	r2, [r3, #0]
 80020f2:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80020f6:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 80020f8:	60d8      	str	r0, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80020fa:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80020fe:	608b      	str	r3, [r1, #8]
 8002100:	4770      	bx	lr
 8002102:	bf00      	nop
 8002104:	e000ed00 	.word	0xe000ed00
 8002108:	40023800 	.word	0x40023800
 800210c:	24003010 	.word	0x24003010

08002110 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8002110:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002148 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8002114:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8002116:	e003      	b.n	8002120 <LoopCopyDataInit>

08002118 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8002118:	4b0c      	ldr	r3, [pc, #48]	; (800214c <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800211a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 800211c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800211e:	3104      	adds	r1, #4

08002120 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8002120:	480b      	ldr	r0, [pc, #44]	; (8002150 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8002122:	4b0c      	ldr	r3, [pc, #48]	; (8002154 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8002124:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8002126:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8002128:	d3f6      	bcc.n	8002118 <CopyDataInit>
  ldr  r2, =_sbss
 800212a:	4a0b      	ldr	r2, [pc, #44]	; (8002158 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 800212c:	e002      	b.n	8002134 <LoopFillZerobss>

0800212e <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800212e:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8002130:	f842 3b04 	str.w	r3, [r2], #4

08002134 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8002134:	4b09      	ldr	r3, [pc, #36]	; (800215c <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8002136:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8002138:	d3f9      	bcc.n	800212e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800213a:	f7ff ffc3 	bl	80020c4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800213e:	f000 f817 	bl	8002170 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002142:	f7ff fe0d 	bl	8001d60 <main>
  bx  lr    
 8002146:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002148:	20050000 	.word	0x20050000
  ldr  r3, =_sidata
 800214c:	08003258 	.word	0x08003258
  ldr  r0, =_sdata
 8002150:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8002154:	20000070 	.word	0x20000070
  ldr  r2, =_sbss
 8002158:	20000070 	.word	0x20000070
  ldr  r3, = _ebss
 800215c:	2000011c 	.word	0x2000011c

08002160 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002160:	e7fe      	b.n	8002160 <ADC_IRQHandler>
	...

08002164 <__errno>:
 8002164:	4b01      	ldr	r3, [pc, #4]	; (800216c <__errno+0x8>)
 8002166:	6818      	ldr	r0, [r3, #0]
 8002168:	4770      	bx	lr
 800216a:	bf00      	nop
 800216c:	2000000c 	.word	0x2000000c

08002170 <__libc_init_array>:
 8002170:	b570      	push	{r4, r5, r6, lr}
 8002172:	4e0d      	ldr	r6, [pc, #52]	; (80021a8 <__libc_init_array+0x38>)
 8002174:	4c0d      	ldr	r4, [pc, #52]	; (80021ac <__libc_init_array+0x3c>)
 8002176:	1ba4      	subs	r4, r4, r6
 8002178:	10a4      	asrs	r4, r4, #2
 800217a:	2500      	movs	r5, #0
 800217c:	42a5      	cmp	r5, r4
 800217e:	d109      	bne.n	8002194 <__libc_init_array+0x24>
 8002180:	4e0b      	ldr	r6, [pc, #44]	; (80021b0 <__libc_init_array+0x40>)
 8002182:	4c0c      	ldr	r4, [pc, #48]	; (80021b4 <__libc_init_array+0x44>)
 8002184:	f000 ff7c 	bl	8003080 <_init>
 8002188:	1ba4      	subs	r4, r4, r6
 800218a:	10a4      	asrs	r4, r4, #2
 800218c:	2500      	movs	r5, #0
 800218e:	42a5      	cmp	r5, r4
 8002190:	d105      	bne.n	800219e <__libc_init_array+0x2e>
 8002192:	bd70      	pop	{r4, r5, r6, pc}
 8002194:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002198:	4798      	blx	r3
 800219a:	3501      	adds	r5, #1
 800219c:	e7ee      	b.n	800217c <__libc_init_array+0xc>
 800219e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80021a2:	4798      	blx	r3
 80021a4:	3501      	adds	r5, #1
 80021a6:	e7f2      	b.n	800218e <__libc_init_array+0x1e>
 80021a8:	08003250 	.word	0x08003250
 80021ac:	08003250 	.word	0x08003250
 80021b0:	08003250 	.word	0x08003250
 80021b4:	08003254 	.word	0x08003254

080021b8 <iprintf>:
 80021b8:	b40f      	push	{r0, r1, r2, r3}
 80021ba:	4b0a      	ldr	r3, [pc, #40]	; (80021e4 <iprintf+0x2c>)
 80021bc:	b513      	push	{r0, r1, r4, lr}
 80021be:	681c      	ldr	r4, [r3, #0]
 80021c0:	b124      	cbz	r4, 80021cc <iprintf+0x14>
 80021c2:	69a3      	ldr	r3, [r4, #24]
 80021c4:	b913      	cbnz	r3, 80021cc <iprintf+0x14>
 80021c6:	4620      	mov	r0, r4
 80021c8:	f000 fa24 	bl	8002614 <__sinit>
 80021cc:	ab05      	add	r3, sp, #20
 80021ce:	9a04      	ldr	r2, [sp, #16]
 80021d0:	68a1      	ldr	r1, [r4, #8]
 80021d2:	9301      	str	r3, [sp, #4]
 80021d4:	4620      	mov	r0, r4
 80021d6:	f000 fbe9 	bl	80029ac <_vfiprintf_r>
 80021da:	b002      	add	sp, #8
 80021dc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80021e0:	b004      	add	sp, #16
 80021e2:	4770      	bx	lr
 80021e4:	2000000c 	.word	0x2000000c

080021e8 <_puts_r>:
 80021e8:	b570      	push	{r4, r5, r6, lr}
 80021ea:	460e      	mov	r6, r1
 80021ec:	4605      	mov	r5, r0
 80021ee:	b118      	cbz	r0, 80021f8 <_puts_r+0x10>
 80021f0:	6983      	ldr	r3, [r0, #24]
 80021f2:	b90b      	cbnz	r3, 80021f8 <_puts_r+0x10>
 80021f4:	f000 fa0e 	bl	8002614 <__sinit>
 80021f8:	69ab      	ldr	r3, [r5, #24]
 80021fa:	68ac      	ldr	r4, [r5, #8]
 80021fc:	b913      	cbnz	r3, 8002204 <_puts_r+0x1c>
 80021fe:	4628      	mov	r0, r5
 8002200:	f000 fa08 	bl	8002614 <__sinit>
 8002204:	4b23      	ldr	r3, [pc, #140]	; (8002294 <_puts_r+0xac>)
 8002206:	429c      	cmp	r4, r3
 8002208:	d117      	bne.n	800223a <_puts_r+0x52>
 800220a:	686c      	ldr	r4, [r5, #4]
 800220c:	89a3      	ldrh	r3, [r4, #12]
 800220e:	071b      	lsls	r3, r3, #28
 8002210:	d51d      	bpl.n	800224e <_puts_r+0x66>
 8002212:	6923      	ldr	r3, [r4, #16]
 8002214:	b1db      	cbz	r3, 800224e <_puts_r+0x66>
 8002216:	3e01      	subs	r6, #1
 8002218:	68a3      	ldr	r3, [r4, #8]
 800221a:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800221e:	3b01      	subs	r3, #1
 8002220:	60a3      	str	r3, [r4, #8]
 8002222:	b9e9      	cbnz	r1, 8002260 <_puts_r+0x78>
 8002224:	2b00      	cmp	r3, #0
 8002226:	da2e      	bge.n	8002286 <_puts_r+0x9e>
 8002228:	4622      	mov	r2, r4
 800222a:	210a      	movs	r1, #10
 800222c:	4628      	mov	r0, r5
 800222e:	f000 f83f 	bl	80022b0 <__swbuf_r>
 8002232:	3001      	adds	r0, #1
 8002234:	d011      	beq.n	800225a <_puts_r+0x72>
 8002236:	200a      	movs	r0, #10
 8002238:	bd70      	pop	{r4, r5, r6, pc}
 800223a:	4b17      	ldr	r3, [pc, #92]	; (8002298 <_puts_r+0xb0>)
 800223c:	429c      	cmp	r4, r3
 800223e:	d101      	bne.n	8002244 <_puts_r+0x5c>
 8002240:	68ac      	ldr	r4, [r5, #8]
 8002242:	e7e3      	b.n	800220c <_puts_r+0x24>
 8002244:	4b15      	ldr	r3, [pc, #84]	; (800229c <_puts_r+0xb4>)
 8002246:	429c      	cmp	r4, r3
 8002248:	bf08      	it	eq
 800224a:	68ec      	ldreq	r4, [r5, #12]
 800224c:	e7de      	b.n	800220c <_puts_r+0x24>
 800224e:	4621      	mov	r1, r4
 8002250:	4628      	mov	r0, r5
 8002252:	f000 f87f 	bl	8002354 <__swsetup_r>
 8002256:	2800      	cmp	r0, #0
 8002258:	d0dd      	beq.n	8002216 <_puts_r+0x2e>
 800225a:	f04f 30ff 	mov.w	r0, #4294967295
 800225e:	bd70      	pop	{r4, r5, r6, pc}
 8002260:	2b00      	cmp	r3, #0
 8002262:	da04      	bge.n	800226e <_puts_r+0x86>
 8002264:	69a2      	ldr	r2, [r4, #24]
 8002266:	4293      	cmp	r3, r2
 8002268:	db06      	blt.n	8002278 <_puts_r+0x90>
 800226a:	290a      	cmp	r1, #10
 800226c:	d004      	beq.n	8002278 <_puts_r+0x90>
 800226e:	6823      	ldr	r3, [r4, #0]
 8002270:	1c5a      	adds	r2, r3, #1
 8002272:	6022      	str	r2, [r4, #0]
 8002274:	7019      	strb	r1, [r3, #0]
 8002276:	e7cf      	b.n	8002218 <_puts_r+0x30>
 8002278:	4622      	mov	r2, r4
 800227a:	4628      	mov	r0, r5
 800227c:	f000 f818 	bl	80022b0 <__swbuf_r>
 8002280:	3001      	adds	r0, #1
 8002282:	d1c9      	bne.n	8002218 <_puts_r+0x30>
 8002284:	e7e9      	b.n	800225a <_puts_r+0x72>
 8002286:	6823      	ldr	r3, [r4, #0]
 8002288:	200a      	movs	r0, #10
 800228a:	1c5a      	adds	r2, r3, #1
 800228c:	6022      	str	r2, [r4, #0]
 800228e:	7018      	strb	r0, [r3, #0]
 8002290:	bd70      	pop	{r4, r5, r6, pc}
 8002292:	bf00      	nop
 8002294:	080031d4 	.word	0x080031d4
 8002298:	080031f4 	.word	0x080031f4
 800229c:	080031b4 	.word	0x080031b4

080022a0 <puts>:
 80022a0:	4b02      	ldr	r3, [pc, #8]	; (80022ac <puts+0xc>)
 80022a2:	4601      	mov	r1, r0
 80022a4:	6818      	ldr	r0, [r3, #0]
 80022a6:	f7ff bf9f 	b.w	80021e8 <_puts_r>
 80022aa:	bf00      	nop
 80022ac:	2000000c 	.word	0x2000000c

080022b0 <__swbuf_r>:
 80022b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80022b2:	460e      	mov	r6, r1
 80022b4:	4614      	mov	r4, r2
 80022b6:	4605      	mov	r5, r0
 80022b8:	b118      	cbz	r0, 80022c2 <__swbuf_r+0x12>
 80022ba:	6983      	ldr	r3, [r0, #24]
 80022bc:	b90b      	cbnz	r3, 80022c2 <__swbuf_r+0x12>
 80022be:	f000 f9a9 	bl	8002614 <__sinit>
 80022c2:	4b21      	ldr	r3, [pc, #132]	; (8002348 <__swbuf_r+0x98>)
 80022c4:	429c      	cmp	r4, r3
 80022c6:	d12a      	bne.n	800231e <__swbuf_r+0x6e>
 80022c8:	686c      	ldr	r4, [r5, #4]
 80022ca:	69a3      	ldr	r3, [r4, #24]
 80022cc:	60a3      	str	r3, [r4, #8]
 80022ce:	89a3      	ldrh	r3, [r4, #12]
 80022d0:	071a      	lsls	r2, r3, #28
 80022d2:	d52e      	bpl.n	8002332 <__swbuf_r+0x82>
 80022d4:	6923      	ldr	r3, [r4, #16]
 80022d6:	b363      	cbz	r3, 8002332 <__swbuf_r+0x82>
 80022d8:	6923      	ldr	r3, [r4, #16]
 80022da:	6820      	ldr	r0, [r4, #0]
 80022dc:	1ac0      	subs	r0, r0, r3
 80022de:	6963      	ldr	r3, [r4, #20]
 80022e0:	b2f6      	uxtb	r6, r6
 80022e2:	4298      	cmp	r0, r3
 80022e4:	4637      	mov	r7, r6
 80022e6:	db04      	blt.n	80022f2 <__swbuf_r+0x42>
 80022e8:	4621      	mov	r1, r4
 80022ea:	4628      	mov	r0, r5
 80022ec:	f000 f928 	bl	8002540 <_fflush_r>
 80022f0:	bb28      	cbnz	r0, 800233e <__swbuf_r+0x8e>
 80022f2:	68a3      	ldr	r3, [r4, #8]
 80022f4:	3b01      	subs	r3, #1
 80022f6:	60a3      	str	r3, [r4, #8]
 80022f8:	6823      	ldr	r3, [r4, #0]
 80022fa:	1c5a      	adds	r2, r3, #1
 80022fc:	6022      	str	r2, [r4, #0]
 80022fe:	701e      	strb	r6, [r3, #0]
 8002300:	6963      	ldr	r3, [r4, #20]
 8002302:	3001      	adds	r0, #1
 8002304:	4298      	cmp	r0, r3
 8002306:	d004      	beq.n	8002312 <__swbuf_r+0x62>
 8002308:	89a3      	ldrh	r3, [r4, #12]
 800230a:	07db      	lsls	r3, r3, #31
 800230c:	d519      	bpl.n	8002342 <__swbuf_r+0x92>
 800230e:	2e0a      	cmp	r6, #10
 8002310:	d117      	bne.n	8002342 <__swbuf_r+0x92>
 8002312:	4621      	mov	r1, r4
 8002314:	4628      	mov	r0, r5
 8002316:	f000 f913 	bl	8002540 <_fflush_r>
 800231a:	b190      	cbz	r0, 8002342 <__swbuf_r+0x92>
 800231c:	e00f      	b.n	800233e <__swbuf_r+0x8e>
 800231e:	4b0b      	ldr	r3, [pc, #44]	; (800234c <__swbuf_r+0x9c>)
 8002320:	429c      	cmp	r4, r3
 8002322:	d101      	bne.n	8002328 <__swbuf_r+0x78>
 8002324:	68ac      	ldr	r4, [r5, #8]
 8002326:	e7d0      	b.n	80022ca <__swbuf_r+0x1a>
 8002328:	4b09      	ldr	r3, [pc, #36]	; (8002350 <__swbuf_r+0xa0>)
 800232a:	429c      	cmp	r4, r3
 800232c:	bf08      	it	eq
 800232e:	68ec      	ldreq	r4, [r5, #12]
 8002330:	e7cb      	b.n	80022ca <__swbuf_r+0x1a>
 8002332:	4621      	mov	r1, r4
 8002334:	4628      	mov	r0, r5
 8002336:	f000 f80d 	bl	8002354 <__swsetup_r>
 800233a:	2800      	cmp	r0, #0
 800233c:	d0cc      	beq.n	80022d8 <__swbuf_r+0x28>
 800233e:	f04f 37ff 	mov.w	r7, #4294967295
 8002342:	4638      	mov	r0, r7
 8002344:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002346:	bf00      	nop
 8002348:	080031d4 	.word	0x080031d4
 800234c:	080031f4 	.word	0x080031f4
 8002350:	080031b4 	.word	0x080031b4

08002354 <__swsetup_r>:
 8002354:	4b32      	ldr	r3, [pc, #200]	; (8002420 <__swsetup_r+0xcc>)
 8002356:	b570      	push	{r4, r5, r6, lr}
 8002358:	681d      	ldr	r5, [r3, #0]
 800235a:	4606      	mov	r6, r0
 800235c:	460c      	mov	r4, r1
 800235e:	b125      	cbz	r5, 800236a <__swsetup_r+0x16>
 8002360:	69ab      	ldr	r3, [r5, #24]
 8002362:	b913      	cbnz	r3, 800236a <__swsetup_r+0x16>
 8002364:	4628      	mov	r0, r5
 8002366:	f000 f955 	bl	8002614 <__sinit>
 800236a:	4b2e      	ldr	r3, [pc, #184]	; (8002424 <__swsetup_r+0xd0>)
 800236c:	429c      	cmp	r4, r3
 800236e:	d10f      	bne.n	8002390 <__swsetup_r+0x3c>
 8002370:	686c      	ldr	r4, [r5, #4]
 8002372:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002376:	b29a      	uxth	r2, r3
 8002378:	0715      	lsls	r5, r2, #28
 800237a:	d42c      	bmi.n	80023d6 <__swsetup_r+0x82>
 800237c:	06d0      	lsls	r0, r2, #27
 800237e:	d411      	bmi.n	80023a4 <__swsetup_r+0x50>
 8002380:	2209      	movs	r2, #9
 8002382:	6032      	str	r2, [r6, #0]
 8002384:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002388:	81a3      	strh	r3, [r4, #12]
 800238a:	f04f 30ff 	mov.w	r0, #4294967295
 800238e:	bd70      	pop	{r4, r5, r6, pc}
 8002390:	4b25      	ldr	r3, [pc, #148]	; (8002428 <__swsetup_r+0xd4>)
 8002392:	429c      	cmp	r4, r3
 8002394:	d101      	bne.n	800239a <__swsetup_r+0x46>
 8002396:	68ac      	ldr	r4, [r5, #8]
 8002398:	e7eb      	b.n	8002372 <__swsetup_r+0x1e>
 800239a:	4b24      	ldr	r3, [pc, #144]	; (800242c <__swsetup_r+0xd8>)
 800239c:	429c      	cmp	r4, r3
 800239e:	bf08      	it	eq
 80023a0:	68ec      	ldreq	r4, [r5, #12]
 80023a2:	e7e6      	b.n	8002372 <__swsetup_r+0x1e>
 80023a4:	0751      	lsls	r1, r2, #29
 80023a6:	d512      	bpl.n	80023ce <__swsetup_r+0x7a>
 80023a8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80023aa:	b141      	cbz	r1, 80023be <__swsetup_r+0x6a>
 80023ac:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80023b0:	4299      	cmp	r1, r3
 80023b2:	d002      	beq.n	80023ba <__swsetup_r+0x66>
 80023b4:	4630      	mov	r0, r6
 80023b6:	f000 fa23 	bl	8002800 <_free_r>
 80023ba:	2300      	movs	r3, #0
 80023bc:	6363      	str	r3, [r4, #52]	; 0x34
 80023be:	89a3      	ldrh	r3, [r4, #12]
 80023c0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80023c4:	81a3      	strh	r3, [r4, #12]
 80023c6:	2300      	movs	r3, #0
 80023c8:	6063      	str	r3, [r4, #4]
 80023ca:	6923      	ldr	r3, [r4, #16]
 80023cc:	6023      	str	r3, [r4, #0]
 80023ce:	89a3      	ldrh	r3, [r4, #12]
 80023d0:	f043 0308 	orr.w	r3, r3, #8
 80023d4:	81a3      	strh	r3, [r4, #12]
 80023d6:	6923      	ldr	r3, [r4, #16]
 80023d8:	b94b      	cbnz	r3, 80023ee <__swsetup_r+0x9a>
 80023da:	89a3      	ldrh	r3, [r4, #12]
 80023dc:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80023e0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80023e4:	d003      	beq.n	80023ee <__swsetup_r+0x9a>
 80023e6:	4621      	mov	r1, r4
 80023e8:	4630      	mov	r0, r6
 80023ea:	f000 f9c1 	bl	8002770 <__smakebuf_r>
 80023ee:	89a2      	ldrh	r2, [r4, #12]
 80023f0:	f012 0301 	ands.w	r3, r2, #1
 80023f4:	d00c      	beq.n	8002410 <__swsetup_r+0xbc>
 80023f6:	2300      	movs	r3, #0
 80023f8:	60a3      	str	r3, [r4, #8]
 80023fa:	6963      	ldr	r3, [r4, #20]
 80023fc:	425b      	negs	r3, r3
 80023fe:	61a3      	str	r3, [r4, #24]
 8002400:	6923      	ldr	r3, [r4, #16]
 8002402:	b953      	cbnz	r3, 800241a <__swsetup_r+0xc6>
 8002404:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002408:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 800240c:	d1ba      	bne.n	8002384 <__swsetup_r+0x30>
 800240e:	bd70      	pop	{r4, r5, r6, pc}
 8002410:	0792      	lsls	r2, r2, #30
 8002412:	bf58      	it	pl
 8002414:	6963      	ldrpl	r3, [r4, #20]
 8002416:	60a3      	str	r3, [r4, #8]
 8002418:	e7f2      	b.n	8002400 <__swsetup_r+0xac>
 800241a:	2000      	movs	r0, #0
 800241c:	e7f7      	b.n	800240e <__swsetup_r+0xba>
 800241e:	bf00      	nop
 8002420:	2000000c 	.word	0x2000000c
 8002424:	080031d4 	.word	0x080031d4
 8002428:	080031f4 	.word	0x080031f4
 800242c:	080031b4 	.word	0x080031b4

08002430 <__sflush_r>:
 8002430:	898a      	ldrh	r2, [r1, #12]
 8002432:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002436:	4605      	mov	r5, r0
 8002438:	0710      	lsls	r0, r2, #28
 800243a:	460c      	mov	r4, r1
 800243c:	d45a      	bmi.n	80024f4 <__sflush_r+0xc4>
 800243e:	684b      	ldr	r3, [r1, #4]
 8002440:	2b00      	cmp	r3, #0
 8002442:	dc05      	bgt.n	8002450 <__sflush_r+0x20>
 8002444:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8002446:	2b00      	cmp	r3, #0
 8002448:	dc02      	bgt.n	8002450 <__sflush_r+0x20>
 800244a:	2000      	movs	r0, #0
 800244c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002450:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8002452:	2e00      	cmp	r6, #0
 8002454:	d0f9      	beq.n	800244a <__sflush_r+0x1a>
 8002456:	2300      	movs	r3, #0
 8002458:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800245c:	682f      	ldr	r7, [r5, #0]
 800245e:	602b      	str	r3, [r5, #0]
 8002460:	d033      	beq.n	80024ca <__sflush_r+0x9a>
 8002462:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8002464:	89a3      	ldrh	r3, [r4, #12]
 8002466:	075a      	lsls	r2, r3, #29
 8002468:	d505      	bpl.n	8002476 <__sflush_r+0x46>
 800246a:	6863      	ldr	r3, [r4, #4]
 800246c:	1ac0      	subs	r0, r0, r3
 800246e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8002470:	b10b      	cbz	r3, 8002476 <__sflush_r+0x46>
 8002472:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002474:	1ac0      	subs	r0, r0, r3
 8002476:	2300      	movs	r3, #0
 8002478:	4602      	mov	r2, r0
 800247a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800247c:	6a21      	ldr	r1, [r4, #32]
 800247e:	4628      	mov	r0, r5
 8002480:	47b0      	blx	r6
 8002482:	1c43      	adds	r3, r0, #1
 8002484:	89a3      	ldrh	r3, [r4, #12]
 8002486:	d106      	bne.n	8002496 <__sflush_r+0x66>
 8002488:	6829      	ldr	r1, [r5, #0]
 800248a:	291d      	cmp	r1, #29
 800248c:	d84b      	bhi.n	8002526 <__sflush_r+0xf6>
 800248e:	4a2b      	ldr	r2, [pc, #172]	; (800253c <__sflush_r+0x10c>)
 8002490:	40ca      	lsrs	r2, r1
 8002492:	07d6      	lsls	r6, r2, #31
 8002494:	d547      	bpl.n	8002526 <__sflush_r+0xf6>
 8002496:	2200      	movs	r2, #0
 8002498:	6062      	str	r2, [r4, #4]
 800249a:	04d9      	lsls	r1, r3, #19
 800249c:	6922      	ldr	r2, [r4, #16]
 800249e:	6022      	str	r2, [r4, #0]
 80024a0:	d504      	bpl.n	80024ac <__sflush_r+0x7c>
 80024a2:	1c42      	adds	r2, r0, #1
 80024a4:	d101      	bne.n	80024aa <__sflush_r+0x7a>
 80024a6:	682b      	ldr	r3, [r5, #0]
 80024a8:	b903      	cbnz	r3, 80024ac <__sflush_r+0x7c>
 80024aa:	6560      	str	r0, [r4, #84]	; 0x54
 80024ac:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80024ae:	602f      	str	r7, [r5, #0]
 80024b0:	2900      	cmp	r1, #0
 80024b2:	d0ca      	beq.n	800244a <__sflush_r+0x1a>
 80024b4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80024b8:	4299      	cmp	r1, r3
 80024ba:	d002      	beq.n	80024c2 <__sflush_r+0x92>
 80024bc:	4628      	mov	r0, r5
 80024be:	f000 f99f 	bl	8002800 <_free_r>
 80024c2:	2000      	movs	r0, #0
 80024c4:	6360      	str	r0, [r4, #52]	; 0x34
 80024c6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80024ca:	6a21      	ldr	r1, [r4, #32]
 80024cc:	2301      	movs	r3, #1
 80024ce:	4628      	mov	r0, r5
 80024d0:	47b0      	blx	r6
 80024d2:	1c41      	adds	r1, r0, #1
 80024d4:	d1c6      	bne.n	8002464 <__sflush_r+0x34>
 80024d6:	682b      	ldr	r3, [r5, #0]
 80024d8:	2b00      	cmp	r3, #0
 80024da:	d0c3      	beq.n	8002464 <__sflush_r+0x34>
 80024dc:	2b1d      	cmp	r3, #29
 80024de:	d001      	beq.n	80024e4 <__sflush_r+0xb4>
 80024e0:	2b16      	cmp	r3, #22
 80024e2:	d101      	bne.n	80024e8 <__sflush_r+0xb8>
 80024e4:	602f      	str	r7, [r5, #0]
 80024e6:	e7b0      	b.n	800244a <__sflush_r+0x1a>
 80024e8:	89a3      	ldrh	r3, [r4, #12]
 80024ea:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80024ee:	81a3      	strh	r3, [r4, #12]
 80024f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80024f4:	690f      	ldr	r7, [r1, #16]
 80024f6:	2f00      	cmp	r7, #0
 80024f8:	d0a7      	beq.n	800244a <__sflush_r+0x1a>
 80024fa:	0793      	lsls	r3, r2, #30
 80024fc:	680e      	ldr	r6, [r1, #0]
 80024fe:	bf08      	it	eq
 8002500:	694b      	ldreq	r3, [r1, #20]
 8002502:	600f      	str	r7, [r1, #0]
 8002504:	bf18      	it	ne
 8002506:	2300      	movne	r3, #0
 8002508:	eba6 0807 	sub.w	r8, r6, r7
 800250c:	608b      	str	r3, [r1, #8]
 800250e:	f1b8 0f00 	cmp.w	r8, #0
 8002512:	dd9a      	ble.n	800244a <__sflush_r+0x1a>
 8002514:	4643      	mov	r3, r8
 8002516:	463a      	mov	r2, r7
 8002518:	6a21      	ldr	r1, [r4, #32]
 800251a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800251c:	4628      	mov	r0, r5
 800251e:	47b0      	blx	r6
 8002520:	2800      	cmp	r0, #0
 8002522:	dc07      	bgt.n	8002534 <__sflush_r+0x104>
 8002524:	89a3      	ldrh	r3, [r4, #12]
 8002526:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800252a:	81a3      	strh	r3, [r4, #12]
 800252c:	f04f 30ff 	mov.w	r0, #4294967295
 8002530:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002534:	4407      	add	r7, r0
 8002536:	eba8 0800 	sub.w	r8, r8, r0
 800253a:	e7e8      	b.n	800250e <__sflush_r+0xde>
 800253c:	20400001 	.word	0x20400001

08002540 <_fflush_r>:
 8002540:	b538      	push	{r3, r4, r5, lr}
 8002542:	690b      	ldr	r3, [r1, #16]
 8002544:	4605      	mov	r5, r0
 8002546:	460c      	mov	r4, r1
 8002548:	b1db      	cbz	r3, 8002582 <_fflush_r+0x42>
 800254a:	b118      	cbz	r0, 8002554 <_fflush_r+0x14>
 800254c:	6983      	ldr	r3, [r0, #24]
 800254e:	b90b      	cbnz	r3, 8002554 <_fflush_r+0x14>
 8002550:	f000 f860 	bl	8002614 <__sinit>
 8002554:	4b0c      	ldr	r3, [pc, #48]	; (8002588 <_fflush_r+0x48>)
 8002556:	429c      	cmp	r4, r3
 8002558:	d109      	bne.n	800256e <_fflush_r+0x2e>
 800255a:	686c      	ldr	r4, [r5, #4]
 800255c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002560:	b17b      	cbz	r3, 8002582 <_fflush_r+0x42>
 8002562:	4621      	mov	r1, r4
 8002564:	4628      	mov	r0, r5
 8002566:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800256a:	f7ff bf61 	b.w	8002430 <__sflush_r>
 800256e:	4b07      	ldr	r3, [pc, #28]	; (800258c <_fflush_r+0x4c>)
 8002570:	429c      	cmp	r4, r3
 8002572:	d101      	bne.n	8002578 <_fflush_r+0x38>
 8002574:	68ac      	ldr	r4, [r5, #8]
 8002576:	e7f1      	b.n	800255c <_fflush_r+0x1c>
 8002578:	4b05      	ldr	r3, [pc, #20]	; (8002590 <_fflush_r+0x50>)
 800257a:	429c      	cmp	r4, r3
 800257c:	bf08      	it	eq
 800257e:	68ec      	ldreq	r4, [r5, #12]
 8002580:	e7ec      	b.n	800255c <_fflush_r+0x1c>
 8002582:	2000      	movs	r0, #0
 8002584:	bd38      	pop	{r3, r4, r5, pc}
 8002586:	bf00      	nop
 8002588:	080031d4 	.word	0x080031d4
 800258c:	080031f4 	.word	0x080031f4
 8002590:	080031b4 	.word	0x080031b4

08002594 <_cleanup_r>:
 8002594:	4901      	ldr	r1, [pc, #4]	; (800259c <_cleanup_r+0x8>)
 8002596:	f000 b8a9 	b.w	80026ec <_fwalk_reent>
 800259a:	bf00      	nop
 800259c:	08002541 	.word	0x08002541

080025a0 <std.isra.0>:
 80025a0:	2300      	movs	r3, #0
 80025a2:	b510      	push	{r4, lr}
 80025a4:	4604      	mov	r4, r0
 80025a6:	6003      	str	r3, [r0, #0]
 80025a8:	6043      	str	r3, [r0, #4]
 80025aa:	6083      	str	r3, [r0, #8]
 80025ac:	8181      	strh	r1, [r0, #12]
 80025ae:	6643      	str	r3, [r0, #100]	; 0x64
 80025b0:	81c2      	strh	r2, [r0, #14]
 80025b2:	6103      	str	r3, [r0, #16]
 80025b4:	6143      	str	r3, [r0, #20]
 80025b6:	6183      	str	r3, [r0, #24]
 80025b8:	4619      	mov	r1, r3
 80025ba:	2208      	movs	r2, #8
 80025bc:	305c      	adds	r0, #92	; 0x5c
 80025be:	f000 f917 	bl	80027f0 <memset>
 80025c2:	4b05      	ldr	r3, [pc, #20]	; (80025d8 <std.isra.0+0x38>)
 80025c4:	6263      	str	r3, [r4, #36]	; 0x24
 80025c6:	4b05      	ldr	r3, [pc, #20]	; (80025dc <std.isra.0+0x3c>)
 80025c8:	62a3      	str	r3, [r4, #40]	; 0x28
 80025ca:	4b05      	ldr	r3, [pc, #20]	; (80025e0 <std.isra.0+0x40>)
 80025cc:	62e3      	str	r3, [r4, #44]	; 0x2c
 80025ce:	4b05      	ldr	r3, [pc, #20]	; (80025e4 <std.isra.0+0x44>)
 80025d0:	6224      	str	r4, [r4, #32]
 80025d2:	6323      	str	r3, [r4, #48]	; 0x30
 80025d4:	bd10      	pop	{r4, pc}
 80025d6:	bf00      	nop
 80025d8:	08002f25 	.word	0x08002f25
 80025dc:	08002f47 	.word	0x08002f47
 80025e0:	08002f7f 	.word	0x08002f7f
 80025e4:	08002fa3 	.word	0x08002fa3

080025e8 <__sfmoreglue>:
 80025e8:	b570      	push	{r4, r5, r6, lr}
 80025ea:	1e4a      	subs	r2, r1, #1
 80025ec:	2568      	movs	r5, #104	; 0x68
 80025ee:	4355      	muls	r5, r2
 80025f0:	460e      	mov	r6, r1
 80025f2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80025f6:	f000 f951 	bl	800289c <_malloc_r>
 80025fa:	4604      	mov	r4, r0
 80025fc:	b140      	cbz	r0, 8002610 <__sfmoreglue+0x28>
 80025fe:	2100      	movs	r1, #0
 8002600:	e880 0042 	stmia.w	r0, {r1, r6}
 8002604:	300c      	adds	r0, #12
 8002606:	60a0      	str	r0, [r4, #8]
 8002608:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800260c:	f000 f8f0 	bl	80027f0 <memset>
 8002610:	4620      	mov	r0, r4
 8002612:	bd70      	pop	{r4, r5, r6, pc}

08002614 <__sinit>:
 8002614:	6983      	ldr	r3, [r0, #24]
 8002616:	b510      	push	{r4, lr}
 8002618:	4604      	mov	r4, r0
 800261a:	bb33      	cbnz	r3, 800266a <__sinit+0x56>
 800261c:	6483      	str	r3, [r0, #72]	; 0x48
 800261e:	64c3      	str	r3, [r0, #76]	; 0x4c
 8002620:	6503      	str	r3, [r0, #80]	; 0x50
 8002622:	4b12      	ldr	r3, [pc, #72]	; (800266c <__sinit+0x58>)
 8002624:	4a12      	ldr	r2, [pc, #72]	; (8002670 <__sinit+0x5c>)
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	6282      	str	r2, [r0, #40]	; 0x28
 800262a:	4298      	cmp	r0, r3
 800262c:	bf04      	itt	eq
 800262e:	2301      	moveq	r3, #1
 8002630:	6183      	streq	r3, [r0, #24]
 8002632:	f000 f81f 	bl	8002674 <__sfp>
 8002636:	6060      	str	r0, [r4, #4]
 8002638:	4620      	mov	r0, r4
 800263a:	f000 f81b 	bl	8002674 <__sfp>
 800263e:	60a0      	str	r0, [r4, #8]
 8002640:	4620      	mov	r0, r4
 8002642:	f000 f817 	bl	8002674 <__sfp>
 8002646:	2200      	movs	r2, #0
 8002648:	60e0      	str	r0, [r4, #12]
 800264a:	2104      	movs	r1, #4
 800264c:	6860      	ldr	r0, [r4, #4]
 800264e:	f7ff ffa7 	bl	80025a0 <std.isra.0>
 8002652:	2201      	movs	r2, #1
 8002654:	2109      	movs	r1, #9
 8002656:	68a0      	ldr	r0, [r4, #8]
 8002658:	f7ff ffa2 	bl	80025a0 <std.isra.0>
 800265c:	2202      	movs	r2, #2
 800265e:	2112      	movs	r1, #18
 8002660:	68e0      	ldr	r0, [r4, #12]
 8002662:	f7ff ff9d 	bl	80025a0 <std.isra.0>
 8002666:	2301      	movs	r3, #1
 8002668:	61a3      	str	r3, [r4, #24]
 800266a:	bd10      	pop	{r4, pc}
 800266c:	080031b0 	.word	0x080031b0
 8002670:	08002595 	.word	0x08002595

08002674 <__sfp>:
 8002674:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002676:	4b1c      	ldr	r3, [pc, #112]	; (80026e8 <__sfp+0x74>)
 8002678:	681e      	ldr	r6, [r3, #0]
 800267a:	69b3      	ldr	r3, [r6, #24]
 800267c:	4607      	mov	r7, r0
 800267e:	b913      	cbnz	r3, 8002686 <__sfp+0x12>
 8002680:	4630      	mov	r0, r6
 8002682:	f7ff ffc7 	bl	8002614 <__sinit>
 8002686:	3648      	adds	r6, #72	; 0x48
 8002688:	68b4      	ldr	r4, [r6, #8]
 800268a:	6873      	ldr	r3, [r6, #4]
 800268c:	3b01      	subs	r3, #1
 800268e:	d503      	bpl.n	8002698 <__sfp+0x24>
 8002690:	6833      	ldr	r3, [r6, #0]
 8002692:	b133      	cbz	r3, 80026a2 <__sfp+0x2e>
 8002694:	6836      	ldr	r6, [r6, #0]
 8002696:	e7f7      	b.n	8002688 <__sfp+0x14>
 8002698:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800269c:	b16d      	cbz	r5, 80026ba <__sfp+0x46>
 800269e:	3468      	adds	r4, #104	; 0x68
 80026a0:	e7f4      	b.n	800268c <__sfp+0x18>
 80026a2:	2104      	movs	r1, #4
 80026a4:	4638      	mov	r0, r7
 80026a6:	f7ff ff9f 	bl	80025e8 <__sfmoreglue>
 80026aa:	6030      	str	r0, [r6, #0]
 80026ac:	2800      	cmp	r0, #0
 80026ae:	d1f1      	bne.n	8002694 <__sfp+0x20>
 80026b0:	230c      	movs	r3, #12
 80026b2:	603b      	str	r3, [r7, #0]
 80026b4:	4604      	mov	r4, r0
 80026b6:	4620      	mov	r0, r4
 80026b8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80026ba:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80026be:	81e3      	strh	r3, [r4, #14]
 80026c0:	2301      	movs	r3, #1
 80026c2:	81a3      	strh	r3, [r4, #12]
 80026c4:	6665      	str	r5, [r4, #100]	; 0x64
 80026c6:	6025      	str	r5, [r4, #0]
 80026c8:	60a5      	str	r5, [r4, #8]
 80026ca:	6065      	str	r5, [r4, #4]
 80026cc:	6125      	str	r5, [r4, #16]
 80026ce:	6165      	str	r5, [r4, #20]
 80026d0:	61a5      	str	r5, [r4, #24]
 80026d2:	2208      	movs	r2, #8
 80026d4:	4629      	mov	r1, r5
 80026d6:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80026da:	f000 f889 	bl	80027f0 <memset>
 80026de:	6365      	str	r5, [r4, #52]	; 0x34
 80026e0:	63a5      	str	r5, [r4, #56]	; 0x38
 80026e2:	64a5      	str	r5, [r4, #72]	; 0x48
 80026e4:	64e5      	str	r5, [r4, #76]	; 0x4c
 80026e6:	e7e6      	b.n	80026b6 <__sfp+0x42>
 80026e8:	080031b0 	.word	0x080031b0

080026ec <_fwalk_reent>:
 80026ec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80026f0:	4680      	mov	r8, r0
 80026f2:	4689      	mov	r9, r1
 80026f4:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80026f8:	2600      	movs	r6, #0
 80026fa:	b914      	cbnz	r4, 8002702 <_fwalk_reent+0x16>
 80026fc:	4630      	mov	r0, r6
 80026fe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002702:	68a5      	ldr	r5, [r4, #8]
 8002704:	6867      	ldr	r7, [r4, #4]
 8002706:	3f01      	subs	r7, #1
 8002708:	d501      	bpl.n	800270e <_fwalk_reent+0x22>
 800270a:	6824      	ldr	r4, [r4, #0]
 800270c:	e7f5      	b.n	80026fa <_fwalk_reent+0xe>
 800270e:	89ab      	ldrh	r3, [r5, #12]
 8002710:	2b01      	cmp	r3, #1
 8002712:	d907      	bls.n	8002724 <_fwalk_reent+0x38>
 8002714:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8002718:	3301      	adds	r3, #1
 800271a:	d003      	beq.n	8002724 <_fwalk_reent+0x38>
 800271c:	4629      	mov	r1, r5
 800271e:	4640      	mov	r0, r8
 8002720:	47c8      	blx	r9
 8002722:	4306      	orrs	r6, r0
 8002724:	3568      	adds	r5, #104	; 0x68
 8002726:	e7ee      	b.n	8002706 <_fwalk_reent+0x1a>

08002728 <__swhatbuf_r>:
 8002728:	b570      	push	{r4, r5, r6, lr}
 800272a:	460e      	mov	r6, r1
 800272c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002730:	2900      	cmp	r1, #0
 8002732:	b090      	sub	sp, #64	; 0x40
 8002734:	4614      	mov	r4, r2
 8002736:	461d      	mov	r5, r3
 8002738:	da07      	bge.n	800274a <__swhatbuf_r+0x22>
 800273a:	2300      	movs	r3, #0
 800273c:	602b      	str	r3, [r5, #0]
 800273e:	89b3      	ldrh	r3, [r6, #12]
 8002740:	061a      	lsls	r2, r3, #24
 8002742:	d410      	bmi.n	8002766 <__swhatbuf_r+0x3e>
 8002744:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002748:	e00e      	b.n	8002768 <__swhatbuf_r+0x40>
 800274a:	aa01      	add	r2, sp, #4
 800274c:	f000 fc50 	bl	8002ff0 <_fstat_r>
 8002750:	2800      	cmp	r0, #0
 8002752:	dbf2      	blt.n	800273a <__swhatbuf_r+0x12>
 8002754:	9a02      	ldr	r2, [sp, #8]
 8002756:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800275a:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800275e:	425a      	negs	r2, r3
 8002760:	415a      	adcs	r2, r3
 8002762:	602a      	str	r2, [r5, #0]
 8002764:	e7ee      	b.n	8002744 <__swhatbuf_r+0x1c>
 8002766:	2340      	movs	r3, #64	; 0x40
 8002768:	2000      	movs	r0, #0
 800276a:	6023      	str	r3, [r4, #0]
 800276c:	b010      	add	sp, #64	; 0x40
 800276e:	bd70      	pop	{r4, r5, r6, pc}

08002770 <__smakebuf_r>:
 8002770:	898b      	ldrh	r3, [r1, #12]
 8002772:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8002774:	079d      	lsls	r5, r3, #30
 8002776:	4606      	mov	r6, r0
 8002778:	460c      	mov	r4, r1
 800277a:	d507      	bpl.n	800278c <__smakebuf_r+0x1c>
 800277c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8002780:	6023      	str	r3, [r4, #0]
 8002782:	6123      	str	r3, [r4, #16]
 8002784:	2301      	movs	r3, #1
 8002786:	6163      	str	r3, [r4, #20]
 8002788:	b002      	add	sp, #8
 800278a:	bd70      	pop	{r4, r5, r6, pc}
 800278c:	ab01      	add	r3, sp, #4
 800278e:	466a      	mov	r2, sp
 8002790:	f7ff ffca 	bl	8002728 <__swhatbuf_r>
 8002794:	9900      	ldr	r1, [sp, #0]
 8002796:	4605      	mov	r5, r0
 8002798:	4630      	mov	r0, r6
 800279a:	f000 f87f 	bl	800289c <_malloc_r>
 800279e:	b948      	cbnz	r0, 80027b4 <__smakebuf_r+0x44>
 80027a0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80027a4:	059a      	lsls	r2, r3, #22
 80027a6:	d4ef      	bmi.n	8002788 <__smakebuf_r+0x18>
 80027a8:	f023 0303 	bic.w	r3, r3, #3
 80027ac:	f043 0302 	orr.w	r3, r3, #2
 80027b0:	81a3      	strh	r3, [r4, #12]
 80027b2:	e7e3      	b.n	800277c <__smakebuf_r+0xc>
 80027b4:	4b0d      	ldr	r3, [pc, #52]	; (80027ec <__smakebuf_r+0x7c>)
 80027b6:	62b3      	str	r3, [r6, #40]	; 0x28
 80027b8:	89a3      	ldrh	r3, [r4, #12]
 80027ba:	6020      	str	r0, [r4, #0]
 80027bc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80027c0:	81a3      	strh	r3, [r4, #12]
 80027c2:	9b00      	ldr	r3, [sp, #0]
 80027c4:	6163      	str	r3, [r4, #20]
 80027c6:	9b01      	ldr	r3, [sp, #4]
 80027c8:	6120      	str	r0, [r4, #16]
 80027ca:	b15b      	cbz	r3, 80027e4 <__smakebuf_r+0x74>
 80027cc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80027d0:	4630      	mov	r0, r6
 80027d2:	f000 fc1f 	bl	8003014 <_isatty_r>
 80027d6:	b128      	cbz	r0, 80027e4 <__smakebuf_r+0x74>
 80027d8:	89a3      	ldrh	r3, [r4, #12]
 80027da:	f023 0303 	bic.w	r3, r3, #3
 80027de:	f043 0301 	orr.w	r3, r3, #1
 80027e2:	81a3      	strh	r3, [r4, #12]
 80027e4:	89a3      	ldrh	r3, [r4, #12]
 80027e6:	431d      	orrs	r5, r3
 80027e8:	81a5      	strh	r5, [r4, #12]
 80027ea:	e7cd      	b.n	8002788 <__smakebuf_r+0x18>
 80027ec:	08002595 	.word	0x08002595

080027f0 <memset>:
 80027f0:	4402      	add	r2, r0
 80027f2:	4603      	mov	r3, r0
 80027f4:	4293      	cmp	r3, r2
 80027f6:	d100      	bne.n	80027fa <memset+0xa>
 80027f8:	4770      	bx	lr
 80027fa:	f803 1b01 	strb.w	r1, [r3], #1
 80027fe:	e7f9      	b.n	80027f4 <memset+0x4>

08002800 <_free_r>:
 8002800:	b538      	push	{r3, r4, r5, lr}
 8002802:	4605      	mov	r5, r0
 8002804:	2900      	cmp	r1, #0
 8002806:	d045      	beq.n	8002894 <_free_r+0x94>
 8002808:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800280c:	1f0c      	subs	r4, r1, #4
 800280e:	2b00      	cmp	r3, #0
 8002810:	bfb8      	it	lt
 8002812:	18e4      	addlt	r4, r4, r3
 8002814:	f000 fc20 	bl	8003058 <__malloc_lock>
 8002818:	4a1f      	ldr	r2, [pc, #124]	; (8002898 <_free_r+0x98>)
 800281a:	6813      	ldr	r3, [r2, #0]
 800281c:	4610      	mov	r0, r2
 800281e:	b933      	cbnz	r3, 800282e <_free_r+0x2e>
 8002820:	6063      	str	r3, [r4, #4]
 8002822:	6014      	str	r4, [r2, #0]
 8002824:	4628      	mov	r0, r5
 8002826:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800282a:	f000 bc16 	b.w	800305a <__malloc_unlock>
 800282e:	42a3      	cmp	r3, r4
 8002830:	d90c      	bls.n	800284c <_free_r+0x4c>
 8002832:	6821      	ldr	r1, [r4, #0]
 8002834:	1862      	adds	r2, r4, r1
 8002836:	4293      	cmp	r3, r2
 8002838:	bf04      	itt	eq
 800283a:	681a      	ldreq	r2, [r3, #0]
 800283c:	685b      	ldreq	r3, [r3, #4]
 800283e:	6063      	str	r3, [r4, #4]
 8002840:	bf04      	itt	eq
 8002842:	1852      	addeq	r2, r2, r1
 8002844:	6022      	streq	r2, [r4, #0]
 8002846:	6004      	str	r4, [r0, #0]
 8002848:	e7ec      	b.n	8002824 <_free_r+0x24>
 800284a:	4613      	mov	r3, r2
 800284c:	685a      	ldr	r2, [r3, #4]
 800284e:	b10a      	cbz	r2, 8002854 <_free_r+0x54>
 8002850:	42a2      	cmp	r2, r4
 8002852:	d9fa      	bls.n	800284a <_free_r+0x4a>
 8002854:	6819      	ldr	r1, [r3, #0]
 8002856:	1858      	adds	r0, r3, r1
 8002858:	42a0      	cmp	r0, r4
 800285a:	d10b      	bne.n	8002874 <_free_r+0x74>
 800285c:	6820      	ldr	r0, [r4, #0]
 800285e:	4401      	add	r1, r0
 8002860:	1858      	adds	r0, r3, r1
 8002862:	4282      	cmp	r2, r0
 8002864:	6019      	str	r1, [r3, #0]
 8002866:	d1dd      	bne.n	8002824 <_free_r+0x24>
 8002868:	6810      	ldr	r0, [r2, #0]
 800286a:	6852      	ldr	r2, [r2, #4]
 800286c:	605a      	str	r2, [r3, #4]
 800286e:	4401      	add	r1, r0
 8002870:	6019      	str	r1, [r3, #0]
 8002872:	e7d7      	b.n	8002824 <_free_r+0x24>
 8002874:	d902      	bls.n	800287c <_free_r+0x7c>
 8002876:	230c      	movs	r3, #12
 8002878:	602b      	str	r3, [r5, #0]
 800287a:	e7d3      	b.n	8002824 <_free_r+0x24>
 800287c:	6820      	ldr	r0, [r4, #0]
 800287e:	1821      	adds	r1, r4, r0
 8002880:	428a      	cmp	r2, r1
 8002882:	bf04      	itt	eq
 8002884:	6811      	ldreq	r1, [r2, #0]
 8002886:	6852      	ldreq	r2, [r2, #4]
 8002888:	6062      	str	r2, [r4, #4]
 800288a:	bf04      	itt	eq
 800288c:	1809      	addeq	r1, r1, r0
 800288e:	6021      	streq	r1, [r4, #0]
 8002890:	605c      	str	r4, [r3, #4]
 8002892:	e7c7      	b.n	8002824 <_free_r+0x24>
 8002894:	bd38      	pop	{r3, r4, r5, pc}
 8002896:	bf00      	nop
 8002898:	20000090 	.word	0x20000090

0800289c <_malloc_r>:
 800289c:	b570      	push	{r4, r5, r6, lr}
 800289e:	1ccd      	adds	r5, r1, #3
 80028a0:	f025 0503 	bic.w	r5, r5, #3
 80028a4:	3508      	adds	r5, #8
 80028a6:	2d0c      	cmp	r5, #12
 80028a8:	bf38      	it	cc
 80028aa:	250c      	movcc	r5, #12
 80028ac:	2d00      	cmp	r5, #0
 80028ae:	4606      	mov	r6, r0
 80028b0:	db01      	blt.n	80028b6 <_malloc_r+0x1a>
 80028b2:	42a9      	cmp	r1, r5
 80028b4:	d903      	bls.n	80028be <_malloc_r+0x22>
 80028b6:	230c      	movs	r3, #12
 80028b8:	6033      	str	r3, [r6, #0]
 80028ba:	2000      	movs	r0, #0
 80028bc:	bd70      	pop	{r4, r5, r6, pc}
 80028be:	f000 fbcb 	bl	8003058 <__malloc_lock>
 80028c2:	4a23      	ldr	r2, [pc, #140]	; (8002950 <_malloc_r+0xb4>)
 80028c4:	6814      	ldr	r4, [r2, #0]
 80028c6:	4621      	mov	r1, r4
 80028c8:	b991      	cbnz	r1, 80028f0 <_malloc_r+0x54>
 80028ca:	4c22      	ldr	r4, [pc, #136]	; (8002954 <_malloc_r+0xb8>)
 80028cc:	6823      	ldr	r3, [r4, #0]
 80028ce:	b91b      	cbnz	r3, 80028d8 <_malloc_r+0x3c>
 80028d0:	4630      	mov	r0, r6
 80028d2:	f000 fb17 	bl	8002f04 <_sbrk_r>
 80028d6:	6020      	str	r0, [r4, #0]
 80028d8:	4629      	mov	r1, r5
 80028da:	4630      	mov	r0, r6
 80028dc:	f000 fb12 	bl	8002f04 <_sbrk_r>
 80028e0:	1c43      	adds	r3, r0, #1
 80028e2:	d126      	bne.n	8002932 <_malloc_r+0x96>
 80028e4:	230c      	movs	r3, #12
 80028e6:	6033      	str	r3, [r6, #0]
 80028e8:	4630      	mov	r0, r6
 80028ea:	f000 fbb6 	bl	800305a <__malloc_unlock>
 80028ee:	e7e4      	b.n	80028ba <_malloc_r+0x1e>
 80028f0:	680b      	ldr	r3, [r1, #0]
 80028f2:	1b5b      	subs	r3, r3, r5
 80028f4:	d41a      	bmi.n	800292c <_malloc_r+0x90>
 80028f6:	2b0b      	cmp	r3, #11
 80028f8:	d90f      	bls.n	800291a <_malloc_r+0x7e>
 80028fa:	600b      	str	r3, [r1, #0]
 80028fc:	50cd      	str	r5, [r1, r3]
 80028fe:	18cc      	adds	r4, r1, r3
 8002900:	4630      	mov	r0, r6
 8002902:	f000 fbaa 	bl	800305a <__malloc_unlock>
 8002906:	f104 000b 	add.w	r0, r4, #11
 800290a:	1d23      	adds	r3, r4, #4
 800290c:	f020 0007 	bic.w	r0, r0, #7
 8002910:	1ac3      	subs	r3, r0, r3
 8002912:	d01b      	beq.n	800294c <_malloc_r+0xb0>
 8002914:	425a      	negs	r2, r3
 8002916:	50e2      	str	r2, [r4, r3]
 8002918:	bd70      	pop	{r4, r5, r6, pc}
 800291a:	428c      	cmp	r4, r1
 800291c:	bf0d      	iteet	eq
 800291e:	6863      	ldreq	r3, [r4, #4]
 8002920:	684b      	ldrne	r3, [r1, #4]
 8002922:	6063      	strne	r3, [r4, #4]
 8002924:	6013      	streq	r3, [r2, #0]
 8002926:	bf18      	it	ne
 8002928:	460c      	movne	r4, r1
 800292a:	e7e9      	b.n	8002900 <_malloc_r+0x64>
 800292c:	460c      	mov	r4, r1
 800292e:	6849      	ldr	r1, [r1, #4]
 8002930:	e7ca      	b.n	80028c8 <_malloc_r+0x2c>
 8002932:	1cc4      	adds	r4, r0, #3
 8002934:	f024 0403 	bic.w	r4, r4, #3
 8002938:	42a0      	cmp	r0, r4
 800293a:	d005      	beq.n	8002948 <_malloc_r+0xac>
 800293c:	1a21      	subs	r1, r4, r0
 800293e:	4630      	mov	r0, r6
 8002940:	f000 fae0 	bl	8002f04 <_sbrk_r>
 8002944:	3001      	adds	r0, #1
 8002946:	d0cd      	beq.n	80028e4 <_malloc_r+0x48>
 8002948:	6025      	str	r5, [r4, #0]
 800294a:	e7d9      	b.n	8002900 <_malloc_r+0x64>
 800294c:	bd70      	pop	{r4, r5, r6, pc}
 800294e:	bf00      	nop
 8002950:	20000090 	.word	0x20000090
 8002954:	20000094 	.word	0x20000094

08002958 <__sfputc_r>:
 8002958:	6893      	ldr	r3, [r2, #8]
 800295a:	3b01      	subs	r3, #1
 800295c:	2b00      	cmp	r3, #0
 800295e:	b410      	push	{r4}
 8002960:	6093      	str	r3, [r2, #8]
 8002962:	da09      	bge.n	8002978 <__sfputc_r+0x20>
 8002964:	6994      	ldr	r4, [r2, #24]
 8002966:	42a3      	cmp	r3, r4
 8002968:	db02      	blt.n	8002970 <__sfputc_r+0x18>
 800296a:	b2cb      	uxtb	r3, r1
 800296c:	2b0a      	cmp	r3, #10
 800296e:	d103      	bne.n	8002978 <__sfputc_r+0x20>
 8002970:	f85d 4b04 	ldr.w	r4, [sp], #4
 8002974:	f7ff bc9c 	b.w	80022b0 <__swbuf_r>
 8002978:	6813      	ldr	r3, [r2, #0]
 800297a:	1c58      	adds	r0, r3, #1
 800297c:	6010      	str	r0, [r2, #0]
 800297e:	7019      	strb	r1, [r3, #0]
 8002980:	b2c8      	uxtb	r0, r1
 8002982:	f85d 4b04 	ldr.w	r4, [sp], #4
 8002986:	4770      	bx	lr

08002988 <__sfputs_r>:
 8002988:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800298a:	4606      	mov	r6, r0
 800298c:	460f      	mov	r7, r1
 800298e:	4614      	mov	r4, r2
 8002990:	18d5      	adds	r5, r2, r3
 8002992:	42ac      	cmp	r4, r5
 8002994:	d101      	bne.n	800299a <__sfputs_r+0x12>
 8002996:	2000      	movs	r0, #0
 8002998:	e007      	b.n	80029aa <__sfputs_r+0x22>
 800299a:	463a      	mov	r2, r7
 800299c:	f814 1b01 	ldrb.w	r1, [r4], #1
 80029a0:	4630      	mov	r0, r6
 80029a2:	f7ff ffd9 	bl	8002958 <__sfputc_r>
 80029a6:	1c43      	adds	r3, r0, #1
 80029a8:	d1f3      	bne.n	8002992 <__sfputs_r+0xa>
 80029aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080029ac <_vfiprintf_r>:
 80029ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80029b0:	b09d      	sub	sp, #116	; 0x74
 80029b2:	460c      	mov	r4, r1
 80029b4:	4617      	mov	r7, r2
 80029b6:	9303      	str	r3, [sp, #12]
 80029b8:	4606      	mov	r6, r0
 80029ba:	b118      	cbz	r0, 80029c4 <_vfiprintf_r+0x18>
 80029bc:	6983      	ldr	r3, [r0, #24]
 80029be:	b90b      	cbnz	r3, 80029c4 <_vfiprintf_r+0x18>
 80029c0:	f7ff fe28 	bl	8002614 <__sinit>
 80029c4:	4b7c      	ldr	r3, [pc, #496]	; (8002bb8 <_vfiprintf_r+0x20c>)
 80029c6:	429c      	cmp	r4, r3
 80029c8:	d157      	bne.n	8002a7a <_vfiprintf_r+0xce>
 80029ca:	6874      	ldr	r4, [r6, #4]
 80029cc:	89a3      	ldrh	r3, [r4, #12]
 80029ce:	0718      	lsls	r0, r3, #28
 80029d0:	d55d      	bpl.n	8002a8e <_vfiprintf_r+0xe2>
 80029d2:	6923      	ldr	r3, [r4, #16]
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	d05a      	beq.n	8002a8e <_vfiprintf_r+0xe2>
 80029d8:	2300      	movs	r3, #0
 80029da:	9309      	str	r3, [sp, #36]	; 0x24
 80029dc:	2320      	movs	r3, #32
 80029de:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80029e2:	2330      	movs	r3, #48	; 0x30
 80029e4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80029e8:	f04f 0b01 	mov.w	fp, #1
 80029ec:	46b8      	mov	r8, r7
 80029ee:	4645      	mov	r5, r8
 80029f0:	f815 3b01 	ldrb.w	r3, [r5], #1
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	d155      	bne.n	8002aa4 <_vfiprintf_r+0xf8>
 80029f8:	ebb8 0a07 	subs.w	sl, r8, r7
 80029fc:	d00b      	beq.n	8002a16 <_vfiprintf_r+0x6a>
 80029fe:	4653      	mov	r3, sl
 8002a00:	463a      	mov	r2, r7
 8002a02:	4621      	mov	r1, r4
 8002a04:	4630      	mov	r0, r6
 8002a06:	f7ff ffbf 	bl	8002988 <__sfputs_r>
 8002a0a:	3001      	adds	r0, #1
 8002a0c:	f000 80c4 	beq.w	8002b98 <_vfiprintf_r+0x1ec>
 8002a10:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002a12:	4453      	add	r3, sl
 8002a14:	9309      	str	r3, [sp, #36]	; 0x24
 8002a16:	f898 3000 	ldrb.w	r3, [r8]
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	f000 80bc 	beq.w	8002b98 <_vfiprintf_r+0x1ec>
 8002a20:	2300      	movs	r3, #0
 8002a22:	f04f 32ff 	mov.w	r2, #4294967295
 8002a26:	9304      	str	r3, [sp, #16]
 8002a28:	9307      	str	r3, [sp, #28]
 8002a2a:	9205      	str	r2, [sp, #20]
 8002a2c:	9306      	str	r3, [sp, #24]
 8002a2e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8002a32:	931a      	str	r3, [sp, #104]	; 0x68
 8002a34:	2205      	movs	r2, #5
 8002a36:	7829      	ldrb	r1, [r5, #0]
 8002a38:	4860      	ldr	r0, [pc, #384]	; (8002bbc <_vfiprintf_r+0x210>)
 8002a3a:	f7fd fbe9 	bl	8000210 <memchr>
 8002a3e:	f105 0801 	add.w	r8, r5, #1
 8002a42:	9b04      	ldr	r3, [sp, #16]
 8002a44:	2800      	cmp	r0, #0
 8002a46:	d131      	bne.n	8002aac <_vfiprintf_r+0x100>
 8002a48:	06d9      	lsls	r1, r3, #27
 8002a4a:	bf44      	itt	mi
 8002a4c:	2220      	movmi	r2, #32
 8002a4e:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8002a52:	071a      	lsls	r2, r3, #28
 8002a54:	bf44      	itt	mi
 8002a56:	222b      	movmi	r2, #43	; 0x2b
 8002a58:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8002a5c:	782a      	ldrb	r2, [r5, #0]
 8002a5e:	2a2a      	cmp	r2, #42	; 0x2a
 8002a60:	d02c      	beq.n	8002abc <_vfiprintf_r+0x110>
 8002a62:	9a07      	ldr	r2, [sp, #28]
 8002a64:	2100      	movs	r1, #0
 8002a66:	200a      	movs	r0, #10
 8002a68:	46a8      	mov	r8, r5
 8002a6a:	3501      	adds	r5, #1
 8002a6c:	f898 3000 	ldrb.w	r3, [r8]
 8002a70:	3b30      	subs	r3, #48	; 0x30
 8002a72:	2b09      	cmp	r3, #9
 8002a74:	d96d      	bls.n	8002b52 <_vfiprintf_r+0x1a6>
 8002a76:	b371      	cbz	r1, 8002ad6 <_vfiprintf_r+0x12a>
 8002a78:	e026      	b.n	8002ac8 <_vfiprintf_r+0x11c>
 8002a7a:	4b51      	ldr	r3, [pc, #324]	; (8002bc0 <_vfiprintf_r+0x214>)
 8002a7c:	429c      	cmp	r4, r3
 8002a7e:	d101      	bne.n	8002a84 <_vfiprintf_r+0xd8>
 8002a80:	68b4      	ldr	r4, [r6, #8]
 8002a82:	e7a3      	b.n	80029cc <_vfiprintf_r+0x20>
 8002a84:	4b4f      	ldr	r3, [pc, #316]	; (8002bc4 <_vfiprintf_r+0x218>)
 8002a86:	429c      	cmp	r4, r3
 8002a88:	bf08      	it	eq
 8002a8a:	68f4      	ldreq	r4, [r6, #12]
 8002a8c:	e79e      	b.n	80029cc <_vfiprintf_r+0x20>
 8002a8e:	4621      	mov	r1, r4
 8002a90:	4630      	mov	r0, r6
 8002a92:	f7ff fc5f 	bl	8002354 <__swsetup_r>
 8002a96:	2800      	cmp	r0, #0
 8002a98:	d09e      	beq.n	80029d8 <_vfiprintf_r+0x2c>
 8002a9a:	f04f 30ff 	mov.w	r0, #4294967295
 8002a9e:	b01d      	add	sp, #116	; 0x74
 8002aa0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002aa4:	2b25      	cmp	r3, #37	; 0x25
 8002aa6:	d0a7      	beq.n	80029f8 <_vfiprintf_r+0x4c>
 8002aa8:	46a8      	mov	r8, r5
 8002aaa:	e7a0      	b.n	80029ee <_vfiprintf_r+0x42>
 8002aac:	4a43      	ldr	r2, [pc, #268]	; (8002bbc <_vfiprintf_r+0x210>)
 8002aae:	1a80      	subs	r0, r0, r2
 8002ab0:	fa0b f000 	lsl.w	r0, fp, r0
 8002ab4:	4318      	orrs	r0, r3
 8002ab6:	9004      	str	r0, [sp, #16]
 8002ab8:	4645      	mov	r5, r8
 8002aba:	e7bb      	b.n	8002a34 <_vfiprintf_r+0x88>
 8002abc:	9a03      	ldr	r2, [sp, #12]
 8002abe:	1d11      	adds	r1, r2, #4
 8002ac0:	6812      	ldr	r2, [r2, #0]
 8002ac2:	9103      	str	r1, [sp, #12]
 8002ac4:	2a00      	cmp	r2, #0
 8002ac6:	db01      	blt.n	8002acc <_vfiprintf_r+0x120>
 8002ac8:	9207      	str	r2, [sp, #28]
 8002aca:	e004      	b.n	8002ad6 <_vfiprintf_r+0x12a>
 8002acc:	4252      	negs	r2, r2
 8002ace:	f043 0302 	orr.w	r3, r3, #2
 8002ad2:	9207      	str	r2, [sp, #28]
 8002ad4:	9304      	str	r3, [sp, #16]
 8002ad6:	f898 3000 	ldrb.w	r3, [r8]
 8002ada:	2b2e      	cmp	r3, #46	; 0x2e
 8002adc:	d110      	bne.n	8002b00 <_vfiprintf_r+0x154>
 8002ade:	f898 3001 	ldrb.w	r3, [r8, #1]
 8002ae2:	2b2a      	cmp	r3, #42	; 0x2a
 8002ae4:	f108 0101 	add.w	r1, r8, #1
 8002ae8:	d137      	bne.n	8002b5a <_vfiprintf_r+0x1ae>
 8002aea:	9b03      	ldr	r3, [sp, #12]
 8002aec:	1d1a      	adds	r2, r3, #4
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	9203      	str	r2, [sp, #12]
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	bfb8      	it	lt
 8002af6:	f04f 33ff 	movlt.w	r3, #4294967295
 8002afa:	f108 0802 	add.w	r8, r8, #2
 8002afe:	9305      	str	r3, [sp, #20]
 8002b00:	4d31      	ldr	r5, [pc, #196]	; (8002bc8 <_vfiprintf_r+0x21c>)
 8002b02:	f898 1000 	ldrb.w	r1, [r8]
 8002b06:	2203      	movs	r2, #3
 8002b08:	4628      	mov	r0, r5
 8002b0a:	f7fd fb81 	bl	8000210 <memchr>
 8002b0e:	b140      	cbz	r0, 8002b22 <_vfiprintf_r+0x176>
 8002b10:	2340      	movs	r3, #64	; 0x40
 8002b12:	1b40      	subs	r0, r0, r5
 8002b14:	fa03 f000 	lsl.w	r0, r3, r0
 8002b18:	9b04      	ldr	r3, [sp, #16]
 8002b1a:	4303      	orrs	r3, r0
 8002b1c:	9304      	str	r3, [sp, #16]
 8002b1e:	f108 0801 	add.w	r8, r8, #1
 8002b22:	f898 1000 	ldrb.w	r1, [r8]
 8002b26:	4829      	ldr	r0, [pc, #164]	; (8002bcc <_vfiprintf_r+0x220>)
 8002b28:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8002b2c:	2206      	movs	r2, #6
 8002b2e:	f108 0701 	add.w	r7, r8, #1
 8002b32:	f7fd fb6d 	bl	8000210 <memchr>
 8002b36:	2800      	cmp	r0, #0
 8002b38:	d034      	beq.n	8002ba4 <_vfiprintf_r+0x1f8>
 8002b3a:	4b25      	ldr	r3, [pc, #148]	; (8002bd0 <_vfiprintf_r+0x224>)
 8002b3c:	bb03      	cbnz	r3, 8002b80 <_vfiprintf_r+0x1d4>
 8002b3e:	9b03      	ldr	r3, [sp, #12]
 8002b40:	3307      	adds	r3, #7
 8002b42:	f023 0307 	bic.w	r3, r3, #7
 8002b46:	3308      	adds	r3, #8
 8002b48:	9303      	str	r3, [sp, #12]
 8002b4a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002b4c:	444b      	add	r3, r9
 8002b4e:	9309      	str	r3, [sp, #36]	; 0x24
 8002b50:	e74c      	b.n	80029ec <_vfiprintf_r+0x40>
 8002b52:	fb00 3202 	mla	r2, r0, r2, r3
 8002b56:	2101      	movs	r1, #1
 8002b58:	e786      	b.n	8002a68 <_vfiprintf_r+0xbc>
 8002b5a:	2300      	movs	r3, #0
 8002b5c:	9305      	str	r3, [sp, #20]
 8002b5e:	4618      	mov	r0, r3
 8002b60:	250a      	movs	r5, #10
 8002b62:	4688      	mov	r8, r1
 8002b64:	3101      	adds	r1, #1
 8002b66:	f898 2000 	ldrb.w	r2, [r8]
 8002b6a:	3a30      	subs	r2, #48	; 0x30
 8002b6c:	2a09      	cmp	r2, #9
 8002b6e:	d903      	bls.n	8002b78 <_vfiprintf_r+0x1cc>
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	d0c5      	beq.n	8002b00 <_vfiprintf_r+0x154>
 8002b74:	9005      	str	r0, [sp, #20]
 8002b76:	e7c3      	b.n	8002b00 <_vfiprintf_r+0x154>
 8002b78:	fb05 2000 	mla	r0, r5, r0, r2
 8002b7c:	2301      	movs	r3, #1
 8002b7e:	e7f0      	b.n	8002b62 <_vfiprintf_r+0x1b6>
 8002b80:	ab03      	add	r3, sp, #12
 8002b82:	9300      	str	r3, [sp, #0]
 8002b84:	4622      	mov	r2, r4
 8002b86:	4b13      	ldr	r3, [pc, #76]	; (8002bd4 <_vfiprintf_r+0x228>)
 8002b88:	a904      	add	r1, sp, #16
 8002b8a:	4630      	mov	r0, r6
 8002b8c:	f3af 8000 	nop.w
 8002b90:	f1b0 3fff 	cmp.w	r0, #4294967295
 8002b94:	4681      	mov	r9, r0
 8002b96:	d1d8      	bne.n	8002b4a <_vfiprintf_r+0x19e>
 8002b98:	89a3      	ldrh	r3, [r4, #12]
 8002b9a:	065b      	lsls	r3, r3, #25
 8002b9c:	f53f af7d 	bmi.w	8002a9a <_vfiprintf_r+0xee>
 8002ba0:	9809      	ldr	r0, [sp, #36]	; 0x24
 8002ba2:	e77c      	b.n	8002a9e <_vfiprintf_r+0xf2>
 8002ba4:	ab03      	add	r3, sp, #12
 8002ba6:	9300      	str	r3, [sp, #0]
 8002ba8:	4622      	mov	r2, r4
 8002baa:	4b0a      	ldr	r3, [pc, #40]	; (8002bd4 <_vfiprintf_r+0x228>)
 8002bac:	a904      	add	r1, sp, #16
 8002bae:	4630      	mov	r0, r6
 8002bb0:	f000 f888 	bl	8002cc4 <_printf_i>
 8002bb4:	e7ec      	b.n	8002b90 <_vfiprintf_r+0x1e4>
 8002bb6:	bf00      	nop
 8002bb8:	080031d4 	.word	0x080031d4
 8002bbc:	08003214 	.word	0x08003214
 8002bc0:	080031f4 	.word	0x080031f4
 8002bc4:	080031b4 	.word	0x080031b4
 8002bc8:	0800321a 	.word	0x0800321a
 8002bcc:	0800321e 	.word	0x0800321e
 8002bd0:	00000000 	.word	0x00000000
 8002bd4:	08002989 	.word	0x08002989

08002bd8 <_printf_common>:
 8002bd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002bdc:	4691      	mov	r9, r2
 8002bde:	461f      	mov	r7, r3
 8002be0:	688a      	ldr	r2, [r1, #8]
 8002be2:	690b      	ldr	r3, [r1, #16]
 8002be4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8002be8:	4293      	cmp	r3, r2
 8002bea:	bfb8      	it	lt
 8002bec:	4613      	movlt	r3, r2
 8002bee:	f8c9 3000 	str.w	r3, [r9]
 8002bf2:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8002bf6:	4606      	mov	r6, r0
 8002bf8:	460c      	mov	r4, r1
 8002bfa:	b112      	cbz	r2, 8002c02 <_printf_common+0x2a>
 8002bfc:	3301      	adds	r3, #1
 8002bfe:	f8c9 3000 	str.w	r3, [r9]
 8002c02:	6823      	ldr	r3, [r4, #0]
 8002c04:	0699      	lsls	r1, r3, #26
 8002c06:	bf42      	ittt	mi
 8002c08:	f8d9 3000 	ldrmi.w	r3, [r9]
 8002c0c:	3302      	addmi	r3, #2
 8002c0e:	f8c9 3000 	strmi.w	r3, [r9]
 8002c12:	6825      	ldr	r5, [r4, #0]
 8002c14:	f015 0506 	ands.w	r5, r5, #6
 8002c18:	d107      	bne.n	8002c2a <_printf_common+0x52>
 8002c1a:	f104 0a19 	add.w	sl, r4, #25
 8002c1e:	68e3      	ldr	r3, [r4, #12]
 8002c20:	f8d9 2000 	ldr.w	r2, [r9]
 8002c24:	1a9b      	subs	r3, r3, r2
 8002c26:	429d      	cmp	r5, r3
 8002c28:	db29      	blt.n	8002c7e <_printf_common+0xa6>
 8002c2a:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8002c2e:	6822      	ldr	r2, [r4, #0]
 8002c30:	3300      	adds	r3, #0
 8002c32:	bf18      	it	ne
 8002c34:	2301      	movne	r3, #1
 8002c36:	0692      	lsls	r2, r2, #26
 8002c38:	d42e      	bmi.n	8002c98 <_printf_common+0xc0>
 8002c3a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8002c3e:	4639      	mov	r1, r7
 8002c40:	4630      	mov	r0, r6
 8002c42:	47c0      	blx	r8
 8002c44:	3001      	adds	r0, #1
 8002c46:	d021      	beq.n	8002c8c <_printf_common+0xb4>
 8002c48:	6823      	ldr	r3, [r4, #0]
 8002c4a:	68e5      	ldr	r5, [r4, #12]
 8002c4c:	f8d9 2000 	ldr.w	r2, [r9]
 8002c50:	f003 0306 	and.w	r3, r3, #6
 8002c54:	2b04      	cmp	r3, #4
 8002c56:	bf08      	it	eq
 8002c58:	1aad      	subeq	r5, r5, r2
 8002c5a:	68a3      	ldr	r3, [r4, #8]
 8002c5c:	6922      	ldr	r2, [r4, #16]
 8002c5e:	bf0c      	ite	eq
 8002c60:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8002c64:	2500      	movne	r5, #0
 8002c66:	4293      	cmp	r3, r2
 8002c68:	bfc4      	itt	gt
 8002c6a:	1a9b      	subgt	r3, r3, r2
 8002c6c:	18ed      	addgt	r5, r5, r3
 8002c6e:	f04f 0900 	mov.w	r9, #0
 8002c72:	341a      	adds	r4, #26
 8002c74:	454d      	cmp	r5, r9
 8002c76:	d11b      	bne.n	8002cb0 <_printf_common+0xd8>
 8002c78:	2000      	movs	r0, #0
 8002c7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002c7e:	2301      	movs	r3, #1
 8002c80:	4652      	mov	r2, sl
 8002c82:	4639      	mov	r1, r7
 8002c84:	4630      	mov	r0, r6
 8002c86:	47c0      	blx	r8
 8002c88:	3001      	adds	r0, #1
 8002c8a:	d103      	bne.n	8002c94 <_printf_common+0xbc>
 8002c8c:	f04f 30ff 	mov.w	r0, #4294967295
 8002c90:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002c94:	3501      	adds	r5, #1
 8002c96:	e7c2      	b.n	8002c1e <_printf_common+0x46>
 8002c98:	18e1      	adds	r1, r4, r3
 8002c9a:	1c5a      	adds	r2, r3, #1
 8002c9c:	2030      	movs	r0, #48	; 0x30
 8002c9e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8002ca2:	4422      	add	r2, r4
 8002ca4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8002ca8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8002cac:	3302      	adds	r3, #2
 8002cae:	e7c4      	b.n	8002c3a <_printf_common+0x62>
 8002cb0:	2301      	movs	r3, #1
 8002cb2:	4622      	mov	r2, r4
 8002cb4:	4639      	mov	r1, r7
 8002cb6:	4630      	mov	r0, r6
 8002cb8:	47c0      	blx	r8
 8002cba:	3001      	adds	r0, #1
 8002cbc:	d0e6      	beq.n	8002c8c <_printf_common+0xb4>
 8002cbe:	f109 0901 	add.w	r9, r9, #1
 8002cc2:	e7d7      	b.n	8002c74 <_printf_common+0x9c>

08002cc4 <_printf_i>:
 8002cc4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8002cc8:	4617      	mov	r7, r2
 8002cca:	7e0a      	ldrb	r2, [r1, #24]
 8002ccc:	b085      	sub	sp, #20
 8002cce:	2a6e      	cmp	r2, #110	; 0x6e
 8002cd0:	4698      	mov	r8, r3
 8002cd2:	4606      	mov	r6, r0
 8002cd4:	460c      	mov	r4, r1
 8002cd6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8002cd8:	f101 0e43 	add.w	lr, r1, #67	; 0x43
 8002cdc:	f000 80bc 	beq.w	8002e58 <_printf_i+0x194>
 8002ce0:	d81a      	bhi.n	8002d18 <_printf_i+0x54>
 8002ce2:	2a63      	cmp	r2, #99	; 0x63
 8002ce4:	d02e      	beq.n	8002d44 <_printf_i+0x80>
 8002ce6:	d80a      	bhi.n	8002cfe <_printf_i+0x3a>
 8002ce8:	2a00      	cmp	r2, #0
 8002cea:	f000 80c8 	beq.w	8002e7e <_printf_i+0x1ba>
 8002cee:	2a58      	cmp	r2, #88	; 0x58
 8002cf0:	f000 808a 	beq.w	8002e08 <_printf_i+0x144>
 8002cf4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002cf8:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
 8002cfc:	e02a      	b.n	8002d54 <_printf_i+0x90>
 8002cfe:	2a64      	cmp	r2, #100	; 0x64
 8002d00:	d001      	beq.n	8002d06 <_printf_i+0x42>
 8002d02:	2a69      	cmp	r2, #105	; 0x69
 8002d04:	d1f6      	bne.n	8002cf4 <_printf_i+0x30>
 8002d06:	6821      	ldr	r1, [r4, #0]
 8002d08:	681a      	ldr	r2, [r3, #0]
 8002d0a:	f011 0f80 	tst.w	r1, #128	; 0x80
 8002d0e:	d023      	beq.n	8002d58 <_printf_i+0x94>
 8002d10:	1d11      	adds	r1, r2, #4
 8002d12:	6019      	str	r1, [r3, #0]
 8002d14:	6813      	ldr	r3, [r2, #0]
 8002d16:	e027      	b.n	8002d68 <_printf_i+0xa4>
 8002d18:	2a73      	cmp	r2, #115	; 0x73
 8002d1a:	f000 80b4 	beq.w	8002e86 <_printf_i+0x1c2>
 8002d1e:	d808      	bhi.n	8002d32 <_printf_i+0x6e>
 8002d20:	2a6f      	cmp	r2, #111	; 0x6f
 8002d22:	d02a      	beq.n	8002d7a <_printf_i+0xb6>
 8002d24:	2a70      	cmp	r2, #112	; 0x70
 8002d26:	d1e5      	bne.n	8002cf4 <_printf_i+0x30>
 8002d28:	680a      	ldr	r2, [r1, #0]
 8002d2a:	f042 0220 	orr.w	r2, r2, #32
 8002d2e:	600a      	str	r2, [r1, #0]
 8002d30:	e003      	b.n	8002d3a <_printf_i+0x76>
 8002d32:	2a75      	cmp	r2, #117	; 0x75
 8002d34:	d021      	beq.n	8002d7a <_printf_i+0xb6>
 8002d36:	2a78      	cmp	r2, #120	; 0x78
 8002d38:	d1dc      	bne.n	8002cf4 <_printf_i+0x30>
 8002d3a:	2278      	movs	r2, #120	; 0x78
 8002d3c:	f884 2045 	strb.w	r2, [r4, #69]	; 0x45
 8002d40:	496e      	ldr	r1, [pc, #440]	; (8002efc <_printf_i+0x238>)
 8002d42:	e064      	b.n	8002e0e <_printf_i+0x14a>
 8002d44:	681a      	ldr	r2, [r3, #0]
 8002d46:	f101 0542 	add.w	r5, r1, #66	; 0x42
 8002d4a:	1d11      	adds	r1, r2, #4
 8002d4c:	6019      	str	r1, [r3, #0]
 8002d4e:	6813      	ldr	r3, [r2, #0]
 8002d50:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8002d54:	2301      	movs	r3, #1
 8002d56:	e0a3      	b.n	8002ea0 <_printf_i+0x1dc>
 8002d58:	f011 0f40 	tst.w	r1, #64	; 0x40
 8002d5c:	f102 0104 	add.w	r1, r2, #4
 8002d60:	6019      	str	r1, [r3, #0]
 8002d62:	d0d7      	beq.n	8002d14 <_printf_i+0x50>
 8002d64:	f9b2 3000 	ldrsh.w	r3, [r2]
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	da03      	bge.n	8002d74 <_printf_i+0xb0>
 8002d6c:	222d      	movs	r2, #45	; 0x2d
 8002d6e:	425b      	negs	r3, r3
 8002d70:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8002d74:	4962      	ldr	r1, [pc, #392]	; (8002f00 <_printf_i+0x23c>)
 8002d76:	220a      	movs	r2, #10
 8002d78:	e017      	b.n	8002daa <_printf_i+0xe6>
 8002d7a:	6820      	ldr	r0, [r4, #0]
 8002d7c:	6819      	ldr	r1, [r3, #0]
 8002d7e:	f010 0f80 	tst.w	r0, #128	; 0x80
 8002d82:	d003      	beq.n	8002d8c <_printf_i+0xc8>
 8002d84:	1d08      	adds	r0, r1, #4
 8002d86:	6018      	str	r0, [r3, #0]
 8002d88:	680b      	ldr	r3, [r1, #0]
 8002d8a:	e006      	b.n	8002d9a <_printf_i+0xd6>
 8002d8c:	f010 0f40 	tst.w	r0, #64	; 0x40
 8002d90:	f101 0004 	add.w	r0, r1, #4
 8002d94:	6018      	str	r0, [r3, #0]
 8002d96:	d0f7      	beq.n	8002d88 <_printf_i+0xc4>
 8002d98:	880b      	ldrh	r3, [r1, #0]
 8002d9a:	4959      	ldr	r1, [pc, #356]	; (8002f00 <_printf_i+0x23c>)
 8002d9c:	2a6f      	cmp	r2, #111	; 0x6f
 8002d9e:	bf14      	ite	ne
 8002da0:	220a      	movne	r2, #10
 8002da2:	2208      	moveq	r2, #8
 8002da4:	2000      	movs	r0, #0
 8002da6:	f884 0043 	strb.w	r0, [r4, #67]	; 0x43
 8002daa:	6865      	ldr	r5, [r4, #4]
 8002dac:	60a5      	str	r5, [r4, #8]
 8002dae:	2d00      	cmp	r5, #0
 8002db0:	f2c0 809c 	blt.w	8002eec <_printf_i+0x228>
 8002db4:	6820      	ldr	r0, [r4, #0]
 8002db6:	f020 0004 	bic.w	r0, r0, #4
 8002dba:	6020      	str	r0, [r4, #0]
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	d13f      	bne.n	8002e40 <_printf_i+0x17c>
 8002dc0:	2d00      	cmp	r5, #0
 8002dc2:	f040 8095 	bne.w	8002ef0 <_printf_i+0x22c>
 8002dc6:	4675      	mov	r5, lr
 8002dc8:	2a08      	cmp	r2, #8
 8002dca:	d10b      	bne.n	8002de4 <_printf_i+0x120>
 8002dcc:	6823      	ldr	r3, [r4, #0]
 8002dce:	07da      	lsls	r2, r3, #31
 8002dd0:	d508      	bpl.n	8002de4 <_printf_i+0x120>
 8002dd2:	6923      	ldr	r3, [r4, #16]
 8002dd4:	6862      	ldr	r2, [r4, #4]
 8002dd6:	429a      	cmp	r2, r3
 8002dd8:	bfde      	ittt	le
 8002dda:	2330      	movle	r3, #48	; 0x30
 8002ddc:	f805 3c01 	strble.w	r3, [r5, #-1]
 8002de0:	f105 35ff 	addle.w	r5, r5, #4294967295
 8002de4:	ebae 0305 	sub.w	r3, lr, r5
 8002de8:	6123      	str	r3, [r4, #16]
 8002dea:	f8cd 8000 	str.w	r8, [sp]
 8002dee:	463b      	mov	r3, r7
 8002df0:	aa03      	add	r2, sp, #12
 8002df2:	4621      	mov	r1, r4
 8002df4:	4630      	mov	r0, r6
 8002df6:	f7ff feef 	bl	8002bd8 <_printf_common>
 8002dfa:	3001      	adds	r0, #1
 8002dfc:	d155      	bne.n	8002eaa <_printf_i+0x1e6>
 8002dfe:	f04f 30ff 	mov.w	r0, #4294967295
 8002e02:	b005      	add	sp, #20
 8002e04:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8002e08:	f881 2045 	strb.w	r2, [r1, #69]	; 0x45
 8002e0c:	493c      	ldr	r1, [pc, #240]	; (8002f00 <_printf_i+0x23c>)
 8002e0e:	6822      	ldr	r2, [r4, #0]
 8002e10:	6818      	ldr	r0, [r3, #0]
 8002e12:	f012 0f80 	tst.w	r2, #128	; 0x80
 8002e16:	f100 0504 	add.w	r5, r0, #4
 8002e1a:	601d      	str	r5, [r3, #0]
 8002e1c:	d001      	beq.n	8002e22 <_printf_i+0x15e>
 8002e1e:	6803      	ldr	r3, [r0, #0]
 8002e20:	e002      	b.n	8002e28 <_printf_i+0x164>
 8002e22:	0655      	lsls	r5, r2, #25
 8002e24:	d5fb      	bpl.n	8002e1e <_printf_i+0x15a>
 8002e26:	8803      	ldrh	r3, [r0, #0]
 8002e28:	07d0      	lsls	r0, r2, #31
 8002e2a:	bf44      	itt	mi
 8002e2c:	f042 0220 	orrmi.w	r2, r2, #32
 8002e30:	6022      	strmi	r2, [r4, #0]
 8002e32:	b91b      	cbnz	r3, 8002e3c <_printf_i+0x178>
 8002e34:	6822      	ldr	r2, [r4, #0]
 8002e36:	f022 0220 	bic.w	r2, r2, #32
 8002e3a:	6022      	str	r2, [r4, #0]
 8002e3c:	2210      	movs	r2, #16
 8002e3e:	e7b1      	b.n	8002da4 <_printf_i+0xe0>
 8002e40:	4675      	mov	r5, lr
 8002e42:	fbb3 f0f2 	udiv	r0, r3, r2
 8002e46:	fb02 3310 	mls	r3, r2, r0, r3
 8002e4a:	5ccb      	ldrb	r3, [r1, r3]
 8002e4c:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8002e50:	4603      	mov	r3, r0
 8002e52:	2800      	cmp	r0, #0
 8002e54:	d1f5      	bne.n	8002e42 <_printf_i+0x17e>
 8002e56:	e7b7      	b.n	8002dc8 <_printf_i+0x104>
 8002e58:	6808      	ldr	r0, [r1, #0]
 8002e5a:	681a      	ldr	r2, [r3, #0]
 8002e5c:	6949      	ldr	r1, [r1, #20]
 8002e5e:	f010 0f80 	tst.w	r0, #128	; 0x80
 8002e62:	d004      	beq.n	8002e6e <_printf_i+0x1aa>
 8002e64:	1d10      	adds	r0, r2, #4
 8002e66:	6018      	str	r0, [r3, #0]
 8002e68:	6813      	ldr	r3, [r2, #0]
 8002e6a:	6019      	str	r1, [r3, #0]
 8002e6c:	e007      	b.n	8002e7e <_printf_i+0x1ba>
 8002e6e:	f010 0f40 	tst.w	r0, #64	; 0x40
 8002e72:	f102 0004 	add.w	r0, r2, #4
 8002e76:	6018      	str	r0, [r3, #0]
 8002e78:	6813      	ldr	r3, [r2, #0]
 8002e7a:	d0f6      	beq.n	8002e6a <_printf_i+0x1a6>
 8002e7c:	8019      	strh	r1, [r3, #0]
 8002e7e:	2300      	movs	r3, #0
 8002e80:	6123      	str	r3, [r4, #16]
 8002e82:	4675      	mov	r5, lr
 8002e84:	e7b1      	b.n	8002dea <_printf_i+0x126>
 8002e86:	681a      	ldr	r2, [r3, #0]
 8002e88:	1d11      	adds	r1, r2, #4
 8002e8a:	6019      	str	r1, [r3, #0]
 8002e8c:	6815      	ldr	r5, [r2, #0]
 8002e8e:	6862      	ldr	r2, [r4, #4]
 8002e90:	2100      	movs	r1, #0
 8002e92:	4628      	mov	r0, r5
 8002e94:	f7fd f9bc 	bl	8000210 <memchr>
 8002e98:	b108      	cbz	r0, 8002e9e <_printf_i+0x1da>
 8002e9a:	1b40      	subs	r0, r0, r5
 8002e9c:	6060      	str	r0, [r4, #4]
 8002e9e:	6863      	ldr	r3, [r4, #4]
 8002ea0:	6123      	str	r3, [r4, #16]
 8002ea2:	2300      	movs	r3, #0
 8002ea4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002ea8:	e79f      	b.n	8002dea <_printf_i+0x126>
 8002eaa:	6923      	ldr	r3, [r4, #16]
 8002eac:	462a      	mov	r2, r5
 8002eae:	4639      	mov	r1, r7
 8002eb0:	4630      	mov	r0, r6
 8002eb2:	47c0      	blx	r8
 8002eb4:	3001      	adds	r0, #1
 8002eb6:	d0a2      	beq.n	8002dfe <_printf_i+0x13a>
 8002eb8:	6823      	ldr	r3, [r4, #0]
 8002eba:	079b      	lsls	r3, r3, #30
 8002ebc:	d507      	bpl.n	8002ece <_printf_i+0x20a>
 8002ebe:	2500      	movs	r5, #0
 8002ec0:	f104 0919 	add.w	r9, r4, #25
 8002ec4:	68e3      	ldr	r3, [r4, #12]
 8002ec6:	9a03      	ldr	r2, [sp, #12]
 8002ec8:	1a9b      	subs	r3, r3, r2
 8002eca:	429d      	cmp	r5, r3
 8002ecc:	db05      	blt.n	8002eda <_printf_i+0x216>
 8002ece:	68e0      	ldr	r0, [r4, #12]
 8002ed0:	9b03      	ldr	r3, [sp, #12]
 8002ed2:	4298      	cmp	r0, r3
 8002ed4:	bfb8      	it	lt
 8002ed6:	4618      	movlt	r0, r3
 8002ed8:	e793      	b.n	8002e02 <_printf_i+0x13e>
 8002eda:	2301      	movs	r3, #1
 8002edc:	464a      	mov	r2, r9
 8002ede:	4639      	mov	r1, r7
 8002ee0:	4630      	mov	r0, r6
 8002ee2:	47c0      	blx	r8
 8002ee4:	3001      	adds	r0, #1
 8002ee6:	d08a      	beq.n	8002dfe <_printf_i+0x13a>
 8002ee8:	3501      	adds	r5, #1
 8002eea:	e7eb      	b.n	8002ec4 <_printf_i+0x200>
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	d1a7      	bne.n	8002e40 <_printf_i+0x17c>
 8002ef0:	780b      	ldrb	r3, [r1, #0]
 8002ef2:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8002ef6:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002efa:	e765      	b.n	8002dc8 <_printf_i+0x104>
 8002efc:	08003236 	.word	0x08003236
 8002f00:	08003225 	.word	0x08003225

08002f04 <_sbrk_r>:
 8002f04:	b538      	push	{r3, r4, r5, lr}
 8002f06:	4c06      	ldr	r4, [pc, #24]	; (8002f20 <_sbrk_r+0x1c>)
 8002f08:	2300      	movs	r3, #0
 8002f0a:	4605      	mov	r5, r0
 8002f0c:	4608      	mov	r0, r1
 8002f0e:	6023      	str	r3, [r4, #0]
 8002f10:	f7ff f8b2 	bl	8002078 <_sbrk>
 8002f14:	1c43      	adds	r3, r0, #1
 8002f16:	d102      	bne.n	8002f1e <_sbrk_r+0x1a>
 8002f18:	6823      	ldr	r3, [r4, #0]
 8002f1a:	b103      	cbz	r3, 8002f1e <_sbrk_r+0x1a>
 8002f1c:	602b      	str	r3, [r5, #0]
 8002f1e:	bd38      	pop	{r3, r4, r5, pc}
 8002f20:	20000118 	.word	0x20000118

08002f24 <__sread>:
 8002f24:	b510      	push	{r4, lr}
 8002f26:	460c      	mov	r4, r1
 8002f28:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002f2c:	f000 f896 	bl	800305c <_read_r>
 8002f30:	2800      	cmp	r0, #0
 8002f32:	bfab      	itete	ge
 8002f34:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8002f36:	89a3      	ldrhlt	r3, [r4, #12]
 8002f38:	181b      	addge	r3, r3, r0
 8002f3a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8002f3e:	bfac      	ite	ge
 8002f40:	6563      	strge	r3, [r4, #84]	; 0x54
 8002f42:	81a3      	strhlt	r3, [r4, #12]
 8002f44:	bd10      	pop	{r4, pc}

08002f46 <__swrite>:
 8002f46:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002f4a:	461f      	mov	r7, r3
 8002f4c:	898b      	ldrh	r3, [r1, #12]
 8002f4e:	05db      	lsls	r3, r3, #23
 8002f50:	4605      	mov	r5, r0
 8002f52:	460c      	mov	r4, r1
 8002f54:	4616      	mov	r6, r2
 8002f56:	d505      	bpl.n	8002f64 <__swrite+0x1e>
 8002f58:	2302      	movs	r3, #2
 8002f5a:	2200      	movs	r2, #0
 8002f5c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002f60:	f000 f868 	bl	8003034 <_lseek_r>
 8002f64:	89a3      	ldrh	r3, [r4, #12]
 8002f66:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8002f6a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002f6e:	81a3      	strh	r3, [r4, #12]
 8002f70:	4632      	mov	r2, r6
 8002f72:	463b      	mov	r3, r7
 8002f74:	4628      	mov	r0, r5
 8002f76:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8002f7a:	f000 b817 	b.w	8002fac <_write_r>

08002f7e <__sseek>:
 8002f7e:	b510      	push	{r4, lr}
 8002f80:	460c      	mov	r4, r1
 8002f82:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002f86:	f000 f855 	bl	8003034 <_lseek_r>
 8002f8a:	1c43      	adds	r3, r0, #1
 8002f8c:	89a3      	ldrh	r3, [r4, #12]
 8002f8e:	bf15      	itete	ne
 8002f90:	6560      	strne	r0, [r4, #84]	; 0x54
 8002f92:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8002f96:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8002f9a:	81a3      	strheq	r3, [r4, #12]
 8002f9c:	bf18      	it	ne
 8002f9e:	81a3      	strhne	r3, [r4, #12]
 8002fa0:	bd10      	pop	{r4, pc}

08002fa2 <__sclose>:
 8002fa2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002fa6:	f000 b813 	b.w	8002fd0 <_close_r>
	...

08002fac <_write_r>:
 8002fac:	b538      	push	{r3, r4, r5, lr}
 8002fae:	4c07      	ldr	r4, [pc, #28]	; (8002fcc <_write_r+0x20>)
 8002fb0:	4605      	mov	r5, r0
 8002fb2:	4608      	mov	r0, r1
 8002fb4:	4611      	mov	r1, r2
 8002fb6:	2200      	movs	r2, #0
 8002fb8:	6022      	str	r2, [r4, #0]
 8002fba:	461a      	mov	r2, r3
 8002fbc:	f7ff f84e 	bl	800205c <_write>
 8002fc0:	1c43      	adds	r3, r0, #1
 8002fc2:	d102      	bne.n	8002fca <_write_r+0x1e>
 8002fc4:	6823      	ldr	r3, [r4, #0]
 8002fc6:	b103      	cbz	r3, 8002fca <_write_r+0x1e>
 8002fc8:	602b      	str	r3, [r5, #0]
 8002fca:	bd38      	pop	{r3, r4, r5, pc}
 8002fcc:	20000118 	.word	0x20000118

08002fd0 <_close_r>:
 8002fd0:	b538      	push	{r3, r4, r5, lr}
 8002fd2:	4c06      	ldr	r4, [pc, #24]	; (8002fec <_close_r+0x1c>)
 8002fd4:	2300      	movs	r3, #0
 8002fd6:	4605      	mov	r5, r0
 8002fd8:	4608      	mov	r0, r1
 8002fda:	6023      	str	r3, [r4, #0]
 8002fdc:	f7ff f866 	bl	80020ac <_close>
 8002fe0:	1c43      	adds	r3, r0, #1
 8002fe2:	d102      	bne.n	8002fea <_close_r+0x1a>
 8002fe4:	6823      	ldr	r3, [r4, #0]
 8002fe6:	b103      	cbz	r3, 8002fea <_close_r+0x1a>
 8002fe8:	602b      	str	r3, [r5, #0]
 8002fea:	bd38      	pop	{r3, r4, r5, pc}
 8002fec:	20000118 	.word	0x20000118

08002ff0 <_fstat_r>:
 8002ff0:	b538      	push	{r3, r4, r5, lr}
 8002ff2:	4c07      	ldr	r4, [pc, #28]	; (8003010 <_fstat_r+0x20>)
 8002ff4:	2300      	movs	r3, #0
 8002ff6:	4605      	mov	r5, r0
 8002ff8:	4608      	mov	r0, r1
 8002ffa:	4611      	mov	r1, r2
 8002ffc:	6023      	str	r3, [r4, #0]
 8002ffe:	f7ff f858 	bl	80020b2 <_fstat>
 8003002:	1c43      	adds	r3, r0, #1
 8003004:	d102      	bne.n	800300c <_fstat_r+0x1c>
 8003006:	6823      	ldr	r3, [r4, #0]
 8003008:	b103      	cbz	r3, 800300c <_fstat_r+0x1c>
 800300a:	602b      	str	r3, [r5, #0]
 800300c:	bd38      	pop	{r3, r4, r5, pc}
 800300e:	bf00      	nop
 8003010:	20000118 	.word	0x20000118

08003014 <_isatty_r>:
 8003014:	b538      	push	{r3, r4, r5, lr}
 8003016:	4c06      	ldr	r4, [pc, #24]	; (8003030 <_isatty_r+0x1c>)
 8003018:	2300      	movs	r3, #0
 800301a:	4605      	mov	r5, r0
 800301c:	4608      	mov	r0, r1
 800301e:	6023      	str	r3, [r4, #0]
 8003020:	f7ff f84c 	bl	80020bc <_isatty>
 8003024:	1c43      	adds	r3, r0, #1
 8003026:	d102      	bne.n	800302e <_isatty_r+0x1a>
 8003028:	6823      	ldr	r3, [r4, #0]
 800302a:	b103      	cbz	r3, 800302e <_isatty_r+0x1a>
 800302c:	602b      	str	r3, [r5, #0]
 800302e:	bd38      	pop	{r3, r4, r5, pc}
 8003030:	20000118 	.word	0x20000118

08003034 <_lseek_r>:
 8003034:	b538      	push	{r3, r4, r5, lr}
 8003036:	4c07      	ldr	r4, [pc, #28]	; (8003054 <_lseek_r+0x20>)
 8003038:	4605      	mov	r5, r0
 800303a:	4608      	mov	r0, r1
 800303c:	4611      	mov	r1, r2
 800303e:	2200      	movs	r2, #0
 8003040:	6022      	str	r2, [r4, #0]
 8003042:	461a      	mov	r2, r3
 8003044:	f7ff f83c 	bl	80020c0 <_lseek>
 8003048:	1c43      	adds	r3, r0, #1
 800304a:	d102      	bne.n	8003052 <_lseek_r+0x1e>
 800304c:	6823      	ldr	r3, [r4, #0]
 800304e:	b103      	cbz	r3, 8003052 <_lseek_r+0x1e>
 8003050:	602b      	str	r3, [r5, #0]
 8003052:	bd38      	pop	{r3, r4, r5, pc}
 8003054:	20000118 	.word	0x20000118

08003058 <__malloc_lock>:
 8003058:	4770      	bx	lr

0800305a <__malloc_unlock>:
 800305a:	4770      	bx	lr

0800305c <_read_r>:
 800305c:	b538      	push	{r3, r4, r5, lr}
 800305e:	4c07      	ldr	r4, [pc, #28]	; (800307c <_read_r+0x20>)
 8003060:	4605      	mov	r5, r0
 8003062:	4608      	mov	r0, r1
 8003064:	4611      	mov	r1, r2
 8003066:	2200      	movs	r2, #0
 8003068:	6022      	str	r2, [r4, #0]
 800306a:	461a      	mov	r2, r3
 800306c:	f7fe ffe8 	bl	8002040 <_read>
 8003070:	1c43      	adds	r3, r0, #1
 8003072:	d102      	bne.n	800307a <_read_r+0x1e>
 8003074:	6823      	ldr	r3, [r4, #0]
 8003076:	b103      	cbz	r3, 800307a <_read_r+0x1e>
 8003078:	602b      	str	r3, [r5, #0]
 800307a:	bd38      	pop	{r3, r4, r5, pc}
 800307c:	20000118 	.word	0x20000118

08003080 <_init>:
 8003080:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003082:	bf00      	nop
 8003084:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003086:	bc08      	pop	{r3}
 8003088:	469e      	mov	lr, r3
 800308a:	4770      	bx	lr

0800308c <_fini>:
 800308c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800308e:	bf00      	nop
 8003090:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003092:	bc08      	pop	{r3}
 8003094:	469e      	mov	lr, r3
 8003096:	4770      	bx	lr
